
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_verilog /home/flynn/workplace/CEMapping/benchmark/adder/full_adder_16.v; hierarchy -top full_adder_16; flatten; synth -top full_adder_16; aigmap; write_aiger /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_16//full_adder_16.aig;' --

1. Executing Verilog-2005 frontend: /home/flynn/workplace/CEMapping/benchmark/adder/full_adder_16.v
Parsing Verilog input from `/home/flynn/workplace/CEMapping/benchmark/adder/full_adder_16.v' to AST representation.
Generating RTLIL representation for module `\full_adder_16'.
Generating RTLIL representation for module `\fullAdder'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \full_adder_16
Used module:     \fullAdder

2.2. Analyzing design hierarchy..
Top module:  \full_adder_16
Used module:     \fullAdder
Removed 0 unused modules.
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[15].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[14].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[13].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[12].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[11].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[10].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[9].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[8].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[7].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[6].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[5].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[4].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[3].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[2].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[1].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[0].f (fullAdder).

3. Executing FLATTEN pass (flatten design).
Using template fullAdder for cells of type fullAdder.
<suppressed ~16 debug messages>
No more expansions possible.
Deleting now unused module fullAdder.

4. Executing SYNTH pass.

4.1. Executing HIERARCHY pass (managing design hierarchy).

4.1.1. Analyzing design hierarchy..
Top module:  \full_adder_16

4.1.2. Analyzing design hierarchy..
Top module:  \full_adder_16
Removed 0 unused modules.

4.2. Executing PROC pass (convert processes to netlists).

4.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.2.3. Executing PROC_INIT pass (extract init attributes).

4.2.4. Executing PROC_ARST pass (detect async resets in processes).

4.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

4.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

4.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_16.

4.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..
Removed 0 unused cells and 32 unused wires.
<suppressed ~1 debug messages>

4.5. Executing CHECK pass (checking for obvious problems).
checking module full_adder_16..
found and reported 0 problems.

4.6. Executing OPT pass (performing simple optimizations).

4.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_16.

4.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_16'.
Removed a total of 0 cells.

4.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_16.
Performed a total of 0 changes.

4.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_16'.
Removed a total of 0 cells.

4.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..

4.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_16.

4.6.9. Finished OPT passes. (There is nothing left to do.)

4.7. Executing WREDUCE pass (reducing word size of cells).

4.8. Executing PEEPOPT pass (run peephole optimizers).

4.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..

4.10. Executing TECHMAP pass (map to technology primitives).

4.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

4.10.2. Continuing TECHMAP pass.
No more expansions possible.

4.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module full_adder_16:
  created 0 $alu and 0 $macc cells.

4.12. Executing SHARE pass (SAT-based resource sharing).

4.13. Executing OPT pass (performing simple optimizations).

4.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_16.

4.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_16'.
Removed a total of 0 cells.

4.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_16.
Performed a total of 0 changes.

4.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_16'.
Removed a total of 0 cells.

4.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..

4.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_16.

4.13.9. Finished OPT passes. (There is nothing left to do.)

4.14. Executing FSM pass (extract and optimize FSM).

4.14.1. Executing FSM_DETECT pass (finding FSMs in design).

4.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..

4.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.15. Executing OPT pass (performing simple optimizations).

4.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_16.

4.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_16'.
Removed a total of 0 cells.

4.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..

4.15.5. Finished fast OPT passes.

4.16. Executing MEMORY pass.

4.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

4.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..

4.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..

4.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

4.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..

4.18. Executing OPT pass (performing simple optimizations).

4.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_16.

4.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_16'.
Removed a total of 0 cells.

4.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..

4.18.5. Finished fast OPT passes.

4.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

4.20. Executing OPT pass (performing simple optimizations).

4.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_16.

4.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_16'.
Removed a total of 0 cells.

4.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_16.
Performed a total of 0 changes.

4.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_16'.
Removed a total of 0 cells.

4.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..

4.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_16.

4.20.9. Finished OPT passes. (There is nothing left to do.)

4.21. Executing TECHMAP pass (map to technology primitives).

4.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
No more expansions possible.
<suppressed ~112 debug messages>

4.22. Executing OPT pass (performing simple optimizations).

4.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_16.

4.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_16'.
Removed a total of 0 cells.

4.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..

4.22.5. Finished fast OPT passes.

4.23. Executing ABC pass (technology mapping using ABC).

4.23.1. Extracting gate netlist of module `\full_adder_16' to `<abc-temp-dir>/input.blif'..
Extracted 112 gates and 145 wires to a netlist network with 33 inputs and 17 outputs.

4.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:       14
ABC RESULTS:              AOI3 cells:       14
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:       13
ABC RESULTS:               NOT cells:       28
ABC RESULTS:              OAI3 cells:        2
ABC RESULTS:                OR cells:        1
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:       14
ABC RESULTS:               XOR cells:       18
ABC RESULTS:        internal signals:       95
ABC RESULTS:           input signals:       33
ABC RESULTS:          output signals:       17
Removing temp directory.

4.24. Executing OPT pass (performing simple optimizations).

4.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_16.

4.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_16'.
Removed a total of 0 cells.

4.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..
Removed 0 unused cells and 130 unused wires.
<suppressed ~1 debug messages>

4.24.5. Finished fast OPT passes.

4.25. Executing HIERARCHY pass (managing design hierarchy).

4.25.1. Analyzing design hierarchy..
Top module:  \full_adder_16

4.25.2. Analyzing design hierarchy..
Top module:  \full_adder_16
Removed 0 unused modules.

4.26. Printing statistics.

=== full_adder_16 ===

   Number of wires:                177
   Number of wire bits:            238
   Number of public wires:          86
   Number of public wire bits:     147
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                108
     $_ANDNOT_                      14
     $_AND_                          2
     $_AOI3_                        14
     $_NAND_                         1
     $_NOR_                         13
     $_NOT_                         28
     $_OAI3_                         2
     $_ORNOT_                        1
     $_OR_                           1
     $_XNOR_                        14
     $_XOR_                         18

4.27. Executing CHECK pass (checking for obvious problems).
checking module full_adder_16..
found and reported 0 problems.

5. Executing AIGMAP pass (map logic to AIG).
Module full_adder_16: replaced 78 cells with 382 new cells, skipped 30 cells.
  replaced 9 cell types:
       1 $_NAND_
       1 $_OR_
      13 $_NOR_
      18 $_XOR_
      14 $_XNOR_
      14 $_ANDNOT_
       1 $_ORNOT_
      14 $_AOI3_
       2 $_OAI3_
  not replaced 2 cell types:
      28 $_NOT_
       2 $_AND_

6. Executing AIGER backend.

End of script. Logfile hash: f787031733
CPU: user 0.17s system 0.00s, MEM: 17.29 MB total, 11.00 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 23% 13x opt_clean (0 sec), 13% 11x opt_expr (0 sec), ...
>>> aig writing succeed!
[i] processing /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_16//full_adder_16.aig
resyn runtime: 0
[i] area: 11.707740180194378, gates: 97, depth: 25
mapping runtime: 0

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib stdCellLib/asap7/asap7_75t_L.lib; read_verilog /tmp/JDCY7BZFML.v; write_blif -impltf /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_16//full_adder_16_init.blif;' --

1. Executing Liberty frontend.
Imported 148 cell types from liberty file.

2. Executing Verilog-2005 frontend: /tmp/JDCY7BZFML.v
Parsing Verilog input from `/tmp/JDCY7BZFML.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

3. Executing BLIF backend.

End of script. Logfile hash: 9331913a16
CPU: user 0.20s system 0.02s, MEM: 47.66 MB total, 41.00 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 88% 2x read_liberty (0 sec), 10% 2x read_verilog (0 sec), ...
>>> initial mapping succeed with area = 11.707740180194378
[i] processing /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_16//full_adder_16.aig
resyn runtime: 0
[i] area: 9.549899782985449, gates: 50, depth: 17
mapping runtime: 0

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib benchmark/adder/adder.lib; read_verilog /tmp/AHZM0UTAX4.v; write_blif -impltf /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_16//full_adder_16_temacle.blif;' --

1. Executing Liberty frontend.
Imported 13 cell types from liberty file.

2. Executing Verilog-2005 frontend: /tmp/AHZM0UTAX4.v
Parsing Verilog input from `/tmp/AHZM0UTAX4.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

3. Executing BLIF backend.

End of script. Logfile hash: dc2831b841
CPU: user 0.01s system 0.01s, MEM: 15.95 MB total, 9.50 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 49% 2x read_liberty (0 sec), 40% 2x read_verilog (0 sec), ...
>>> Temacle mapping succeed with area = 9.549899782985449
full_adder_16 initial mapping area = 11.707740180194378
full_adder_16 Temacle mapping area = 9.549899782985449
full_adder_16 Temacle saveArea = (11.707740180194378 - 9.549899782985449) / 11.707740180194378 = 18.430887293341893 %

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_verilog /home/flynn/workplace/CEMapping/benchmark/adder/full_adder_32.v; hierarchy -top full_adder_32; flatten; synth -top full_adder_32; aigmap; write_aiger /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_32//full_adder_32.aig;' --

1. Executing Verilog-2005 frontend: /home/flynn/workplace/CEMapping/benchmark/adder/full_adder_32.v
Parsing Verilog input from `/home/flynn/workplace/CEMapping/benchmark/adder/full_adder_32.v' to AST representation.
Generating RTLIL representation for module `\full_adder_32'.
Generating RTLIL representation for module `\fullAdder'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \full_adder_32
Used module:     \fullAdder

2.2. Analyzing design hierarchy..
Top module:  \full_adder_32
Used module:     \fullAdder
Removed 0 unused modules.
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[31].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[30].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[29].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[28].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[27].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[26].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[25].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[24].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[23].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[22].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[21].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[20].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[19].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[18].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[17].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[16].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[15].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[14].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[13].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[12].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[11].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[10].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[9].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[8].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[7].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[6].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[5].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[4].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[3].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[2].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[1].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[0].f (fullAdder).

3. Executing FLATTEN pass (flatten design).
Using template fullAdder for cells of type fullAdder.
<suppressed ~32 debug messages>
No more expansions possible.
Deleting now unused module fullAdder.

4. Executing SYNTH pass.

4.1. Executing HIERARCHY pass (managing design hierarchy).

4.1.1. Analyzing design hierarchy..
Top module:  \full_adder_32

4.1.2. Analyzing design hierarchy..
Top module:  \full_adder_32
Removed 0 unused modules.

4.2. Executing PROC pass (convert processes to netlists).

4.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.2.3. Executing PROC_INIT pass (extract init attributes).

4.2.4. Executing PROC_ARST pass (detect async resets in processes).

4.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

4.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

4.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_32.

4.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..
Removed 0 unused cells and 64 unused wires.
<suppressed ~1 debug messages>

4.5. Executing CHECK pass (checking for obvious problems).
checking module full_adder_32..
found and reported 0 problems.

4.6. Executing OPT pass (performing simple optimizations).

4.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_32.

4.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_32'.
Removed a total of 0 cells.

4.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_32.
Performed a total of 0 changes.

4.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_32'.
Removed a total of 0 cells.

4.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..

4.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_32.

4.6.9. Finished OPT passes. (There is nothing left to do.)

4.7. Executing WREDUCE pass (reducing word size of cells).

4.8. Executing PEEPOPT pass (run peephole optimizers).

4.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..

4.10. Executing TECHMAP pass (map to technology primitives).

4.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

4.10.2. Continuing TECHMAP pass.
No more expansions possible.

4.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module full_adder_32:
  created 0 $alu and 0 $macc cells.

4.12. Executing SHARE pass (SAT-based resource sharing).

4.13. Executing OPT pass (performing simple optimizations).

4.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_32.

4.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_32'.
Removed a total of 0 cells.

4.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_32.
Performed a total of 0 changes.

4.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_32'.
Removed a total of 0 cells.

4.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..

4.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_32.

4.13.9. Finished OPT passes. (There is nothing left to do.)

4.14. Executing FSM pass (extract and optimize FSM).

4.14.1. Executing FSM_DETECT pass (finding FSMs in design).

4.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..

4.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.15. Executing OPT pass (performing simple optimizations).

4.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_32.

4.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_32'.
Removed a total of 0 cells.

4.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..

4.15.5. Finished fast OPT passes.

4.16. Executing MEMORY pass.

4.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

4.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..

4.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..

4.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

4.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..

4.18. Executing OPT pass (performing simple optimizations).

4.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_32.

4.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_32'.
Removed a total of 0 cells.

4.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..

4.18.5. Finished fast OPT passes.

4.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

4.20. Executing OPT pass (performing simple optimizations).

4.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_32.

4.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_32'.
Removed a total of 0 cells.

4.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_32.
Performed a total of 0 changes.

4.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_32'.
Removed a total of 0 cells.

4.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..

4.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_32.

4.20.9. Finished OPT passes. (There is nothing left to do.)

4.21. Executing TECHMAP pass (map to technology primitives).

4.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
No more expansions possible.
<suppressed ~224 debug messages>

4.22. Executing OPT pass (performing simple optimizations).

4.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_32.

4.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_32'.
Removed a total of 0 cells.

4.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..

4.22.5. Finished fast OPT passes.

4.23. Executing ABC pass (technology mapping using ABC).

4.23.1. Extracting gate netlist of module `\full_adder_32' to `<abc-temp-dir>/input.blif'..
Extracted 224 gates and 289 wires to a netlist network with 65 inputs and 33 outputs.

4.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:       30
ABC RESULTS:              AOI3 cells:       30
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:       29
ABC RESULTS:               NOT cells:       60
ABC RESULTS:              OAI3 cells:        2
ABC RESULTS:                OR cells:        1
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:       30
ABC RESULTS:               XOR cells:       34
ABC RESULTS:        internal signals:      191
ABC RESULTS:           input signals:       65
ABC RESULTS:          output signals:       33
Removing temp directory.

4.24. Executing OPT pass (performing simple optimizations).

4.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_32.

4.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_32'.
Removed a total of 0 cells.

4.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..
Removed 0 unused cells and 258 unused wires.
<suppressed ~1 debug messages>

4.24.5. Finished fast OPT passes.

4.25. Executing HIERARCHY pass (managing design hierarchy).

4.25.1. Analyzing design hierarchy..
Top module:  \full_adder_32

4.25.2. Analyzing design hierarchy..
Top module:  \full_adder_32
Removed 0 unused modules.

4.26. Printing statistics.

=== full_adder_32 ===

   Number of wires:                353
   Number of wire bits:            478
   Number of public wires:         166
   Number of public wire bits:     291
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                220
     $_ANDNOT_                      30
     $_AND_                          2
     $_AOI3_                        30
     $_NAND_                         1
     $_NOR_                         29
     $_NOT_                         60
     $_OAI3_                         2
     $_ORNOT_                        1
     $_OR_                           1
     $_XNOR_                        30
     $_XOR_                         34

4.27. Executing CHECK pass (checking for obvious problems).
checking module full_adder_32..
found and reported 0 problems.

5. Executing AIGMAP pass (map logic to AIG).
Module full_adder_32: replaced 158 cells with 766 new cells, skipped 62 cells.
  replaced 9 cell types:
       1 $_NAND_
       1 $_OR_
      29 $_NOR_
      34 $_XOR_
      30 $_XNOR_
      30 $_ANDNOT_
       1 $_ORNOT_
      30 $_AOI3_
       2 $_OAI3_
  not replaced 2 cell types:
      60 $_NOT_
       2 $_AND_

6. Executing AIGER backend.

End of script. Logfile hash: 79189055d8
CPU: user 0.28s system 0.00s, MEM: 17.93 MB total, 12.00 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 22% 13x opt_clean (0 sec), 14% 7x opt (0 sec), ...
>>> aig writing succeed!
[i] processing /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_32//full_adder_32.aig
resyn runtime: 0
[i] area: 23.48838036507368, gates: 193, depth: 49
mapping runtime: 0

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib stdCellLib/asap7/asap7_75t_L.lib; read_verilog /tmp/E5FTAMC34I.v; write_blif -impltf /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_32//full_adder_32_init.blif;' --

1. Executing Liberty frontend.
Imported 148 cell types from liberty file.

2. Executing Verilog-2005 frontend: /tmp/E5FTAMC34I.v
Parsing Verilog input from `/tmp/E5FTAMC34I.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

3. Executing BLIF backend.

End of script. Logfile hash: d6233063ef
CPU: user 0.22s system 0.01s, MEM: 47.66 MB total, 41.00 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 87% 2x read_liberty (0 sec), 11% 2x read_verilog (0 sec), ...
>>> initial mapping succeed with area = 23.48838036507368
[i] processing /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_32//full_adder_32.aig
resyn runtime: 0
[i] area: 19.114379551261663, gates: 98, depth: 33
mapping runtime: 0

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib benchmark/adder/adder.lib; read_verilog /tmp/ATKMI721VH.v; write_blif -impltf /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_32//full_adder_32_temacle.blif;' --

1. Executing Liberty frontend.
Imported 13 cell types from liberty file.

2. Executing Verilog-2005 frontend: /tmp/ATKMI721VH.v
Parsing Verilog input from `/tmp/ATKMI721VH.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

3. Executing BLIF backend.

End of script. Logfile hash: 605d68fd0e
CPU: user 0.02s system 0.00s, MEM: 16.46 MB total, 10.00 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 57% 2x read_verilog (0 sec), 36% 2x read_liberty (0 sec), ...
>>> Temacle mapping succeed with area = 19.114379551261663
full_adder_32 initial mapping area = 23.48838036507368
full_adder_32 Temacle mapping area = 19.114379551261663
full_adder_32 Temacle saveArea = (23.48838036507368 - 19.114379551261663) / 23.48838036507368 = 18.6219771045431 %

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_verilog /home/flynn/workplace/CEMapping/benchmark/adder/full_adder_64.v; hierarchy -top full_adder_64; flatten; synth -top full_adder_64; aigmap; write_aiger /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_64//full_adder_64.aig;' --

1. Executing Verilog-2005 frontend: /home/flynn/workplace/CEMapping/benchmark/adder/full_adder_64.v
Parsing Verilog input from `/home/flynn/workplace/CEMapping/benchmark/adder/full_adder_64.v' to AST representation.
Generating RTLIL representation for module `\full_adder_64'.
Generating RTLIL representation for module `\fullAdder'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \full_adder_64
Used module:     \fullAdder

2.2. Analyzing design hierarchy..
Top module:  \full_adder_64
Used module:     \fullAdder
Removed 0 unused modules.
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[63].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[62].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[61].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[60].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[59].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[58].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[57].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[56].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[55].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[54].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[53].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[52].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[51].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[50].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[49].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[48].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[47].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[46].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[45].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[44].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[43].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[42].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[41].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[40].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[39].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[38].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[37].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[36].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[35].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[34].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[33].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[32].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[31].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[30].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[29].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[28].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[27].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[26].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[25].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[24].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[23].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[22].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[21].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[20].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[19].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[18].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[17].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[16].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[15].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[14].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[13].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[12].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[11].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[10].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[9].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[8].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[7].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[6].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[5].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[4].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[3].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[2].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[1].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[0].f (fullAdder).

3. Executing FLATTEN pass (flatten design).
Using template fullAdder for cells of type fullAdder.
<suppressed ~64 debug messages>
No more expansions possible.
Deleting now unused module fullAdder.

4. Executing SYNTH pass.

4.1. Executing HIERARCHY pass (managing design hierarchy).

4.1.1. Analyzing design hierarchy..
Top module:  \full_adder_64

4.1.2. Analyzing design hierarchy..
Top module:  \full_adder_64
Removed 0 unused modules.

4.2. Executing PROC pass (convert processes to netlists).

4.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.2.3. Executing PROC_INIT pass (extract init attributes).

4.2.4. Executing PROC_ARST pass (detect async resets in processes).

4.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

4.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

4.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_64.

4.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..
Removed 0 unused cells and 128 unused wires.
<suppressed ~1 debug messages>

4.5. Executing CHECK pass (checking for obvious problems).
checking module full_adder_64..
found and reported 0 problems.

4.6. Executing OPT pass (performing simple optimizations).

4.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_64.

4.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_64'.
Removed a total of 0 cells.

4.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_64..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_64.
Performed a total of 0 changes.

4.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_64'.
Removed a total of 0 cells.

4.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..

4.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_64.

4.6.9. Finished OPT passes. (There is nothing left to do.)

4.7. Executing WREDUCE pass (reducing word size of cells).

4.8. Executing PEEPOPT pass (run peephole optimizers).

4.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..

4.10. Executing TECHMAP pass (map to technology primitives).

4.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

4.10.2. Continuing TECHMAP pass.
No more expansions possible.

4.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module full_adder_64:
  created 0 $alu and 0 $macc cells.

4.12. Executing SHARE pass (SAT-based resource sharing).

4.13. Executing OPT pass (performing simple optimizations).

4.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_64.

4.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_64'.
Removed a total of 0 cells.

4.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_64..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_64.
Performed a total of 0 changes.

4.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_64'.
Removed a total of 0 cells.

4.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..

4.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_64.

4.13.9. Finished OPT passes. (There is nothing left to do.)

4.14. Executing FSM pass (extract and optimize FSM).

4.14.1. Executing FSM_DETECT pass (finding FSMs in design).

4.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..

4.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.15. Executing OPT pass (performing simple optimizations).

4.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_64.

4.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_64'.
Removed a total of 0 cells.

4.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..

4.15.5. Finished fast OPT passes.

4.16. Executing MEMORY pass.

4.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

4.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..

4.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..

4.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

4.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..

4.18. Executing OPT pass (performing simple optimizations).

4.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_64.

4.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_64'.
Removed a total of 0 cells.

4.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..

4.18.5. Finished fast OPT passes.

4.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

4.20. Executing OPT pass (performing simple optimizations).

4.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_64.

4.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_64'.
Removed a total of 0 cells.

4.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_64..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_64.
Performed a total of 0 changes.

4.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_64'.
Removed a total of 0 cells.

4.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..

4.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_64.

4.20.9. Finished OPT passes. (There is nothing left to do.)

4.21. Executing TECHMAP pass (map to technology primitives).

4.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
No more expansions possible.
<suppressed ~448 debug messages>

4.22. Executing OPT pass (performing simple optimizations).

4.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_64.

4.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_64'.
Removed a total of 0 cells.

4.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..

4.22.5. Finished fast OPT passes.

4.23. Executing ABC pass (technology mapping using ABC).

4.23.1. Extracting gate netlist of module `\full_adder_64' to `<abc-temp-dir>/input.blif'..
Extracted 448 gates and 577 wires to a netlist network with 129 inputs and 65 outputs.

4.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:       62
ABC RESULTS:              AOI3 cells:       62
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:       61
ABC RESULTS:               NOT cells:      124
ABC RESULTS:              OAI3 cells:        2
ABC RESULTS:                OR cells:        1
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:       62
ABC RESULTS:               XOR cells:       66
ABC RESULTS:        internal signals:      383
ABC RESULTS:           input signals:      129
ABC RESULTS:          output signals:       65
Removing temp directory.

4.24. Executing OPT pass (performing simple optimizations).

4.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_64.

4.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_64'.
Removed a total of 0 cells.

4.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..
Removed 0 unused cells and 514 unused wires.
<suppressed ~1 debug messages>

4.24.5. Finished fast OPT passes.

4.25. Executing HIERARCHY pass (managing design hierarchy).

4.25.1. Analyzing design hierarchy..
Top module:  \full_adder_64

4.25.2. Analyzing design hierarchy..
Top module:  \full_adder_64
Removed 0 unused modules.

4.26. Printing statistics.

=== full_adder_64 ===

   Number of wires:                705
   Number of wire bits:            958
   Number of public wires:         326
   Number of public wire bits:     579
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                444
     $_ANDNOT_                      62
     $_AND_                          2
     $_AOI3_                        62
     $_NAND_                         1
     $_NOR_                         61
     $_NOT_                        124
     $_OAI3_                         2
     $_ORNOT_                        1
     $_OR_                           1
     $_XNOR_                        62
     $_XOR_                         66

4.27. Executing CHECK pass (checking for obvious problems).
checking module full_adder_64..
found and reported 0 problems.

5. Executing AIGMAP pass (map logic to AIG).
Module full_adder_64: replaced 318 cells with 1534 new cells, skipped 126 cells.
  replaced 9 cell types:
       1 $_NAND_
       1 $_OR_
      61 $_NOR_
      66 $_XOR_
      62 $_XNOR_
      62 $_ANDNOT_
       1 $_ORNOT_
      62 $_AOI3_
       2 $_OAI3_
  not replaced 2 cell types:
     124 $_NOT_
       2 $_AND_

6. Executing AIGER backend.

End of script. Logfile hash: c369b2b7f0
CPU: user 0.50s system 0.02s, MEM: 19.68 MB total, 13.50 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 24% 13x opt_clean (0 sec), 15% 7x opt (0 sec), ...
>>> aig writing succeed!
[i] processing /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_64//full_adder_64.aig
resyn runtime: 0
[i] area: 47.04966073483229, gates: 385, depth: 97
mapping runtime: 0

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib stdCellLib/asap7/asap7_75t_L.lib; read_verilog /tmp/LB6S5X6JNF.v; write_blif -impltf /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_64//full_adder_64_init.blif;' --

1. Executing Liberty frontend.
Imported 148 cell types from liberty file.

2. Executing Verilog-2005 frontend: /tmp/LB6S5X6JNF.v
Parsing Verilog input from `/tmp/LB6S5X6JNF.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

3. Executing BLIF backend.

End of script. Logfile hash: 85ee07d443
CPU: user 0.20s system 0.02s, MEM: 47.66 MB total, 41.00 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 80% 2x read_liberty (0 sec), 17% 2x read_verilog (0 sec), ...
>>> initial mapping succeed with area = 47.04966073483229
[i] processing /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_64//full_adder_64.aig
resyn runtime: 0
[i] area: 38.24333908781409, gates: 194, depth: 65
mapping runtime: 0

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib benchmark/adder/adder.lib; read_verilog /tmp/C6L0YN545F.v; write_blif -impltf /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_64//full_adder_64_temacle.blif;' --

1. Executing Liberty frontend.
Imported 13 cell types from liberty file.

2. Executing Verilog-2005 frontend: /tmp/C6L0YN545F.v
Parsing Verilog input from `/tmp/C6L0YN545F.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

3. Executing BLIF backend.

End of script. Logfile hash: f550053196
CPU: user 0.03s system 0.01s, MEM: 17.37 MB total, 11.00 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 67% 2x read_verilog (0 sec), 25% 2x read_liberty (0 sec), ...
>>> Temacle mapping succeed with area = 38.24333908781409
full_adder_64 initial mapping area = 47.04966073483229
full_adder_64 Temacle mapping area = 38.24333908781409
full_adder_64 Temacle saveArea = (47.04966073483229 - 38.24333908781409) / 47.04966073483229 = 18.717077890635263 %

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_verilog /home/flynn/workplace/CEMapping/benchmark/adder/full_adder_128.v; hierarchy -top full_adder_128; flatten; synth -top full_adder_128; aigmap; write_aiger /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_128//full_adder_128.aig;' --

1. Executing Verilog-2005 frontend: /home/flynn/workplace/CEMapping/benchmark/adder/full_adder_128.v
Parsing Verilog input from `/home/flynn/workplace/CEMapping/benchmark/adder/full_adder_128.v' to AST representation.
Generating RTLIL representation for module `\full_adder_128'.
Generating RTLIL representation for module `\fullAdder'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \full_adder_128
Used module:     \fullAdder

2.2. Analyzing design hierarchy..
Top module:  \full_adder_128
Used module:     \fullAdder
Removed 0 unused modules.
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[127].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[126].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[125].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[124].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[123].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[122].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[121].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[120].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[119].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[118].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[117].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[116].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[115].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[114].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[113].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[112].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[111].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[110].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[109].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[108].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[107].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[106].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[105].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[104].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[103].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[102].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[101].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[100].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[99].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[98].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[97].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[96].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[95].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[94].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[93].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[92].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[91].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[90].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[89].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[88].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[87].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[86].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[85].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[84].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[83].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[82].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[81].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[80].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[79].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[78].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[77].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[76].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[75].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[74].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[73].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[72].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[71].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[70].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[69].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[68].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[67].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[66].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[65].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[64].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[63].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[62].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[61].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[60].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[59].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[58].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[57].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[56].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[55].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[54].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[53].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[52].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[51].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[50].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[49].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[48].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[47].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[46].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[45].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[44].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[43].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[42].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[41].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[40].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[39].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[38].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[37].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[36].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[35].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[34].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[33].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[32].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[31].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[30].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[29].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[28].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[27].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[26].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[25].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[24].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[23].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[22].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[21].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[20].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[19].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[18].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[17].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[16].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[15].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[14].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[13].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[12].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[11].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[10].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[9].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[8].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[7].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[6].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[5].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[4].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[3].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[2].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[1].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[0].f (fullAdder).

3. Executing FLATTEN pass (flatten design).
Using template fullAdder for cells of type fullAdder.
<suppressed ~128 debug messages>
No more expansions possible.
Deleting now unused module fullAdder.

4. Executing SYNTH pass.

4.1. Executing HIERARCHY pass (managing design hierarchy).

4.1.1. Analyzing design hierarchy..
Top module:  \full_adder_128

4.1.2. Analyzing design hierarchy..
Top module:  \full_adder_128
Removed 0 unused modules.

4.2. Executing PROC pass (convert processes to netlists).

4.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.2.3. Executing PROC_INIT pass (extract init attributes).

4.2.4. Executing PROC_ARST pass (detect async resets in processes).

4.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

4.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

4.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_128.

4.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..
Removed 0 unused cells and 256 unused wires.
<suppressed ~1 debug messages>

4.5. Executing CHECK pass (checking for obvious problems).
checking module full_adder_128..
found and reported 0 problems.

4.6. Executing OPT pass (performing simple optimizations).

4.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_128.

4.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_128'.
Removed a total of 0 cells.

4.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_128..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_128.
Performed a total of 0 changes.

4.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_128'.
Removed a total of 0 cells.

4.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..

4.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_128.

4.6.9. Finished OPT passes. (There is nothing left to do.)

4.7. Executing WREDUCE pass (reducing word size of cells).

4.8. Executing PEEPOPT pass (run peephole optimizers).

4.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..

4.10. Executing TECHMAP pass (map to technology primitives).

4.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

4.10.2. Continuing TECHMAP pass.
No more expansions possible.

4.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module full_adder_128:
  created 0 $alu and 0 $macc cells.

4.12. Executing SHARE pass (SAT-based resource sharing).

4.13. Executing OPT pass (performing simple optimizations).

4.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_128.

4.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_128'.
Removed a total of 0 cells.

4.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_128..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_128.
Performed a total of 0 changes.

4.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_128'.
Removed a total of 0 cells.

4.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..

4.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_128.

4.13.9. Finished OPT passes. (There is nothing left to do.)

4.14. Executing FSM pass (extract and optimize FSM).

4.14.1. Executing FSM_DETECT pass (finding FSMs in design).

4.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..

4.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.15. Executing OPT pass (performing simple optimizations).

4.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_128.

4.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_128'.
Removed a total of 0 cells.

4.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..

4.15.5. Finished fast OPT passes.

4.16. Executing MEMORY pass.

4.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

4.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..

4.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..

4.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

4.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..

4.18. Executing OPT pass (performing simple optimizations).

4.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_128.

4.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_128'.
Removed a total of 0 cells.

4.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..

4.18.5. Finished fast OPT passes.

4.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

4.20. Executing OPT pass (performing simple optimizations).

4.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_128.

4.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_128'.
Removed a total of 0 cells.

4.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_128..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_128.
Performed a total of 0 changes.

4.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_128'.
Removed a total of 0 cells.

4.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..

4.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_128.

4.20.9. Finished OPT passes. (There is nothing left to do.)

4.21. Executing TECHMAP pass (map to technology primitives).

4.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
No more expansions possible.
<suppressed ~896 debug messages>

4.22. Executing OPT pass (performing simple optimizations).

4.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_128.

4.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_128'.
Removed a total of 0 cells.

4.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..

4.22.5. Finished fast OPT passes.

4.23. Executing ABC pass (technology mapping using ABC).

4.23.1. Extracting gate netlist of module `\full_adder_128' to `<abc-temp-dir>/input.blif'..
Extracted 896 gates and 1153 wires to a netlist network with 257 inputs and 129 outputs.

4.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:      126
ABC RESULTS:              AOI3 cells:      126
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:      125
ABC RESULTS:               NOT cells:      252
ABC RESULTS:              OAI3 cells:        2
ABC RESULTS:                OR cells:        1
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:      126
ABC RESULTS:               XOR cells:      130
ABC RESULTS:        internal signals:      767
ABC RESULTS:           input signals:      257
ABC RESULTS:          output signals:      129
Removing temp directory.

4.24. Executing OPT pass (performing simple optimizations).

4.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_128.

4.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_128'.
Removed a total of 0 cells.

4.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..
Removed 0 unused cells and 1026 unused wires.
<suppressed ~1 debug messages>

4.24.5. Finished fast OPT passes.

4.25. Executing HIERARCHY pass (managing design hierarchy).

4.25.1. Analyzing design hierarchy..
Top module:  \full_adder_128

4.25.2. Analyzing design hierarchy..
Top module:  \full_adder_128
Removed 0 unused modules.

4.26. Printing statistics.

=== full_adder_128 ===

   Number of wires:               1409
   Number of wire bits:           1918
   Number of public wires:         646
   Number of public wire bits:    1155
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                892
     $_ANDNOT_                     126
     $_AND_                          2
     $_AOI3_                       126
     $_NAND_                         1
     $_NOR_                        125
     $_NOT_                        252
     $_OAI3_                         2
     $_ORNOT_                        1
     $_OR_                           1
     $_XNOR_                       126
     $_XOR_                        130

4.27. Executing CHECK pass (checking for obvious problems).
checking module full_adder_128..
found and reported 0 problems.

5. Executing AIGMAP pass (map logic to AIG).
Module full_adder_128: replaced 638 cells with 3070 new cells, skipped 254 cells.
  replaced 9 cell types:
       1 $_NAND_
       1 $_OR_
     125 $_NOR_
     130 $_XOR_
     126 $_XNOR_
     126 $_ANDNOT_
       1 $_ORNOT_
     126 $_AOI3_
       2 $_OAI3_
  not replaced 2 cell types:
     252 $_NOT_
       2 $_AND_

6. Executing AIGER backend.

End of script. Logfile hash: 064e456f9b
CPU: user 0.98s system 0.01s, MEM: 23.42 MB total, 17.50 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 24% 13x opt_clean (0 sec), 15% 7x opt (0 sec), ...
>>> aig writing succeed!
[i] processing /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_128//full_adder_128.aig
resyn runtime: 0
[i] area: 94.1722214743495, gates: 769, depth: 193
mapping runtime: 0

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib stdCellLib/asap7/asap7_75t_L.lib; read_verilog /tmp/O8AA4H9JIJ.v; write_blif -impltf /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_128//full_adder_128_init.blif;' --

1. Executing Liberty frontend.
Imported 148 cell types from liberty file.

2. Executing Verilog-2005 frontend: /tmp/O8AA4H9JIJ.v
Parsing Verilog input from `/tmp/O8AA4H9JIJ.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

3. Executing BLIF backend.

End of script. Logfile hash: fcdef8b08e
CPU: user 0.22s system 0.03s, MEM: 47.66 MB total, 41.00 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 73% 2x read_liberty (0 sec), 24% 2x read_verilog (0 sec), ...
>>> initial mapping succeed with area = 94.1722214743495
[i] processing /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_128//full_adder_128.aig
resyn runtime: 0
[i] area: 76.50125816091895, gates: 386, depth: 129
mapping runtime: 0

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib benchmark/adder/adder.lib; read_verilog /tmp/H9IISGWK12.v; write_blif -impltf /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_128//full_adder_128_temacle.blif;' --

1. Executing Liberty frontend.
Imported 13 cell types from liberty file.

2. Executing Verilog-2005 frontend: /tmp/H9IISGWK12.v
Parsing Verilog input from `/tmp/H9IISGWK12.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

3. Executing BLIF backend.

End of script. Logfile hash: d8fccf10ad
CPU: user 0.04s system 0.01s, MEM: 19.09 MB total, 12.50 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 76% 2x read_verilog (0 sec), 16% 2x read_liberty (0 sec), ...
>>> Temacle mapping succeed with area = 76.50125816091895
full_adder_128 initial mapping area = 94.1722214743495
full_adder_128 Temacle mapping area = 76.50125816091895
full_adder_128 Temacle saveArea = (94.1722214743495 - 76.50125816091895) / 94.1722214743495 = 18.76451785545246 %

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_verilog /home/flynn/workplace/CEMapping/benchmark/adder/full_adder_256.v; hierarchy -top full_adder_256; flatten; synth -top full_adder_256; aigmap; write_aiger /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_256//full_adder_256.aig;' --

1. Executing Verilog-2005 frontend: /home/flynn/workplace/CEMapping/benchmark/adder/full_adder_256.v
Parsing Verilog input from `/home/flynn/workplace/CEMapping/benchmark/adder/full_adder_256.v' to AST representation.
Generating RTLIL representation for module `\full_adder_256'.
Generating RTLIL representation for module `\fullAdder'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \full_adder_256
Used module:     \fullAdder

2.2. Analyzing design hierarchy..
Top module:  \full_adder_256
Used module:     \fullAdder
Removed 0 unused modules.
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[255].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[254].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[253].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[252].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[251].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[250].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[249].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[248].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[247].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[246].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[245].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[244].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[243].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[242].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[241].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[240].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[239].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[238].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[237].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[236].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[235].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[234].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[233].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[232].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[231].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[230].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[229].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[228].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[227].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[226].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[225].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[224].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[223].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[222].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[221].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[220].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[219].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[218].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[217].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[216].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[215].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[214].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[213].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[212].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[211].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[210].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[209].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[208].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[207].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[206].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[205].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[204].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[203].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[202].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[201].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[200].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[199].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[198].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[197].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[196].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[195].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[194].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[193].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[192].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[191].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[190].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[189].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[188].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[187].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[186].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[185].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[184].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[183].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[182].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[181].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[180].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[179].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[178].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[177].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[176].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[175].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[174].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[173].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[172].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[171].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[170].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[169].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[168].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[167].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[166].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[165].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[164].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[163].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[162].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[161].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[160].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[159].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[158].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[157].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[156].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[155].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[154].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[153].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[152].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[151].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[150].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[149].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[148].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[147].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[146].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[145].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[144].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[143].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[142].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[141].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[140].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[139].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[138].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[137].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[136].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[135].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[134].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[133].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[132].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[131].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[130].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[129].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[128].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[127].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[126].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[125].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[124].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[123].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[122].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[121].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[120].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[119].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[118].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[117].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[116].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[115].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[114].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[113].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[112].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[111].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[110].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[109].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[108].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[107].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[106].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[105].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[104].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[103].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[102].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[101].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[100].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[99].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[98].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[97].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[96].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[95].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[94].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[93].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[92].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[91].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[90].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[89].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[88].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[87].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[86].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[85].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[84].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[83].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[82].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[81].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[80].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[79].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[78].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[77].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[76].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[75].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[74].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[73].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[72].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[71].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[70].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[69].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[68].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[67].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[66].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[65].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[64].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[63].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[62].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[61].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[60].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[59].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[58].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[57].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[56].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[55].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[54].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[53].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[52].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[51].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[50].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[49].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[48].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[47].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[46].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[45].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[44].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[43].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[42].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[41].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[40].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[39].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[38].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[37].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[36].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[35].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[34].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[33].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[32].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[31].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[30].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[29].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[28].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[27].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[26].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[25].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[24].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[23].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[22].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[21].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[20].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[19].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[18].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[17].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[16].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[15].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[14].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[13].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[12].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[11].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[10].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[9].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[8].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[7].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[6].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[5].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[4].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[3].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[2].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[1].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[0].f (fullAdder).

3. Executing FLATTEN pass (flatten design).
Using template fullAdder for cells of type fullAdder.
<suppressed ~256 debug messages>
No more expansions possible.
Deleting now unused module fullAdder.

4. Executing SYNTH pass.

4.1. Executing HIERARCHY pass (managing design hierarchy).

4.1.1. Analyzing design hierarchy..
Top module:  \full_adder_256

4.1.2. Analyzing design hierarchy..
Top module:  \full_adder_256
Removed 0 unused modules.

4.2. Executing PROC pass (convert processes to netlists).

4.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.2.3. Executing PROC_INIT pass (extract init attributes).

4.2.4. Executing PROC_ARST pass (detect async resets in processes).

4.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

4.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

4.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_256.

4.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..
Removed 0 unused cells and 512 unused wires.
<suppressed ~1 debug messages>

4.5. Executing CHECK pass (checking for obvious problems).
checking module full_adder_256..
found and reported 0 problems.

4.6. Executing OPT pass (performing simple optimizations).

4.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_256.

4.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_256'.
Removed a total of 0 cells.

4.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_256.
Performed a total of 0 changes.

4.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_256'.
Removed a total of 0 cells.

4.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..

4.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_256.

4.6.9. Finished OPT passes. (There is nothing left to do.)

4.7. Executing WREDUCE pass (reducing word size of cells).

4.8. Executing PEEPOPT pass (run peephole optimizers).

4.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..

4.10. Executing TECHMAP pass (map to technology primitives).

4.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

4.10.2. Continuing TECHMAP pass.
No more expansions possible.

4.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module full_adder_256:
  created 0 $alu and 0 $macc cells.

4.12. Executing SHARE pass (SAT-based resource sharing).

4.13. Executing OPT pass (performing simple optimizations).

4.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_256.

4.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_256'.
Removed a total of 0 cells.

4.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_256.
Performed a total of 0 changes.

4.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_256'.
Removed a total of 0 cells.

4.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..

4.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_256.

4.13.9. Finished OPT passes. (There is nothing left to do.)

4.14. Executing FSM pass (extract and optimize FSM).

4.14.1. Executing FSM_DETECT pass (finding FSMs in design).

4.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..

4.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.15. Executing OPT pass (performing simple optimizations).

4.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_256.

4.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_256'.
Removed a total of 0 cells.

4.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..

4.15.5. Finished fast OPT passes.

4.16. Executing MEMORY pass.

4.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

4.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..

4.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..

4.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

4.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..

4.18. Executing OPT pass (performing simple optimizations).

4.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_256.

4.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_256'.
Removed a total of 0 cells.

4.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..

4.18.5. Finished fast OPT passes.

4.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

4.20. Executing OPT pass (performing simple optimizations).

4.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_256.

4.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_256'.
Removed a total of 0 cells.

4.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_256.
Performed a total of 0 changes.

4.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_256'.
Removed a total of 0 cells.

4.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..

4.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_256.

4.20.9. Finished OPT passes. (There is nothing left to do.)

4.21. Executing TECHMAP pass (map to technology primitives).

4.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
No more expansions possible.
<suppressed ~1792 debug messages>

4.22. Executing OPT pass (performing simple optimizations).

4.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_256.

4.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_256'.
Removed a total of 0 cells.

4.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..

4.22.5. Finished fast OPT passes.

4.23. Executing ABC pass (technology mapping using ABC).

4.23.1. Extracting gate netlist of module `\full_adder_256' to `<abc-temp-dir>/input.blif'..
Extracted 1792 gates and 2305 wires to a netlist network with 513 inputs and 257 outputs.

4.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:      254
ABC RESULTS:              AOI3 cells:      254
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:      253
ABC RESULTS:               NOT cells:      508
ABC RESULTS:              OAI3 cells:        2
ABC RESULTS:                OR cells:        1
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:      254
ABC RESULTS:               XOR cells:      258
ABC RESULTS:        internal signals:     1535
ABC RESULTS:           input signals:      513
ABC RESULTS:          output signals:      257
Removing temp directory.

4.24. Executing OPT pass (performing simple optimizations).

4.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_256.

4.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_256'.
Removed a total of 0 cells.

4.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..
Removed 0 unused cells and 2050 unused wires.
<suppressed ~1 debug messages>

4.24.5. Finished fast OPT passes.

4.25. Executing HIERARCHY pass (managing design hierarchy).

4.25.1. Analyzing design hierarchy..
Top module:  \full_adder_256

4.25.2. Analyzing design hierarchy..
Top module:  \full_adder_256
Removed 0 unused modules.

4.26. Printing statistics.

=== full_adder_256 ===

   Number of wires:               2817
   Number of wire bits:           3838
   Number of public wires:        1286
   Number of public wire bits:    2307
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1788
     $_ANDNOT_                     254
     $_AND_                          2
     $_AOI3_                       254
     $_NAND_                         1
     $_NOR_                        253
     $_NOT_                        508
     $_OAI3_                         2
     $_ORNOT_                        1
     $_OR_                           1
     $_XNOR_                       254
     $_XOR_                        258

4.27. Executing CHECK pass (checking for obvious problems).
checking module full_adder_256..
found and reported 0 problems.

5. Executing AIGMAP pass (map logic to AIG).
Module full_adder_256: replaced 1278 cells with 6142 new cells, skipped 510 cells.
  replaced 9 cell types:
       1 $_NAND_
       1 $_OR_
     253 $_NOR_
     258 $_XOR_
     254 $_XNOR_
     254 $_ANDNOT_
       1 $_ORNOT_
     254 $_AOI3_
       2 $_OAI3_
  not replaced 2 cell types:
     508 $_NOT_
       2 $_AND_

6. Executing AIGER backend.

End of script. Logfile hash: d77eb44b93
CPU: user 2.01s system 0.01s, MEM: 30.91 MB total, 24.19 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 25% 13x opt_clean (0 sec), 15% 7x opt (0 sec), ...
>>> aig writing succeed!
[i] processing /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_256//full_adder_256.aig
resyn runtime: 0
[i] area: 188.41734295338392, gates: 1537, depth: 385
mapping runtime: 0

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib stdCellLib/asap7/asap7_75t_L.lib; read_verilog /tmp/62JC1DZQ3S.v; write_blif -impltf /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_256//full_adder_256_init.blif;' --

1. Executing Liberty frontend.
Imported 148 cell types from liberty file.

2. Executing Verilog-2005 frontend: /tmp/62JC1DZQ3S.v
Parsing Verilog input from `/tmp/62JC1DZQ3S.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

3. Executing BLIF backend.

End of script. Logfile hash: 3d01f0927e
CPU: user 0.28s system 0.02s, MEM: 47.66 MB total, 41.00 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 60% 2x read_liberty (0 sec), 35% 2x read_verilog (0 sec), ...
>>> initial mapping succeed with area = 188.41734295338392
[i] processing /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_256//full_adder_256.aig
resyn runtime: 0
[i] area: 153.01709630712867, gates: 770, depth: 257
mapping runtime: 0

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib benchmark/adder/adder.lib; read_verilog /tmp/OQBT3F84KP.v; write_blif -impltf /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_256//full_adder_256_temacle.blif;' --

1. Executing Liberty frontend.
Imported 13 cell types from liberty file.

2. Executing Verilog-2005 frontend: /tmp/OQBT3F84KP.v
Parsing Verilog input from `/tmp/OQBT3F84KP.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

3. Executing BLIF backend.

End of script. Logfile hash: b35d8eff34
CPU: user 0.06s system 0.01s, MEM: 22.68 MB total, 16.00 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 82% 2x read_verilog (0 sec), 9% 2x read_liberty (0 sec), ...
>>> Temacle mapping succeed with area = 153.01709630712867
full_adder_256 initial mapping area = 188.41734295338392
full_adder_256 Temacle mapping area = 153.01709630712867
full_adder_256 Temacle saveArea = (188.41734295338392 - 153.01709630712867) / 188.41734295338392 = 18.7882103055734 %
