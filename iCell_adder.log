
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_verilog /home/flynn/workplace/CEMapping/benchmark/adder/full_adder_16.v; hierarchy -top full_adder_16; flatten; synth -top full_adder_16; aigmap; write_aiger /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_16//full_adder_16.aig;' --

1. Executing Verilog-2005 frontend: /home/flynn/workplace/CEMapping/benchmark/adder/full_adder_16.v
Parsing Verilog input from `/home/flynn/workplace/CEMapping/benchmark/adder/full_adder_16.v' to AST representation.
Generating RTLIL representation for module `\full_adder_16'.
Generating RTLIL representation for module `\fullAdder'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \full_adder_16
Used module:     \fullAdder

2.2. Analyzing design hierarchy..
Top module:  \full_adder_16
Used module:     \fullAdder
Removed 0 unused modules.
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[15].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[14].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[13].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[12].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[11].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[10].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[9].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[8].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[7].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[6].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[5].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[4].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[3].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[2].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[1].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[0].f (fullAdder).

3. Executing FLATTEN pass (flatten design).
Using template fullAdder for cells of type fullAdder.
<suppressed ~16 debug messages>
No more expansions possible.
Deleting now unused module fullAdder.

4. Executing SYNTH pass.

4.1. Executing HIERARCHY pass (managing design hierarchy).

4.1.1. Analyzing design hierarchy..
Top module:  \full_adder_16

4.1.2. Analyzing design hierarchy..
Top module:  \full_adder_16
Removed 0 unused modules.

4.2. Executing PROC pass (convert processes to netlists).

4.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.2.3. Executing PROC_INIT pass (extract init attributes).

4.2.4. Executing PROC_ARST pass (detect async resets in processes).

4.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

4.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

4.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_16.

4.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..
Removed 0 unused cells and 32 unused wires.
<suppressed ~1 debug messages>

4.5. Executing CHECK pass (checking for obvious problems).
checking module full_adder_16..
found and reported 0 problems.

4.6. Executing OPT pass (performing simple optimizations).

4.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_16.

4.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_16'.
Removed a total of 0 cells.

4.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_16.
Performed a total of 0 changes.

4.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_16'.
Removed a total of 0 cells.

4.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..

4.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_16.

4.6.9. Finished OPT passes. (There is nothing left to do.)

4.7. Executing WREDUCE pass (reducing word size of cells).

4.8. Executing PEEPOPT pass (run peephole optimizers).

4.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..

4.10. Executing TECHMAP pass (map to technology primitives).

4.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

4.10.2. Continuing TECHMAP pass.
No more expansions possible.

4.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module full_adder_16:
  created 0 $alu and 0 $macc cells.

4.12. Executing SHARE pass (SAT-based resource sharing).

4.13. Executing OPT pass (performing simple optimizations).

4.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_16.

4.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_16'.
Removed a total of 0 cells.

4.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_16.
Performed a total of 0 changes.

4.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_16'.
Removed a total of 0 cells.

4.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..

4.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_16.

4.13.9. Finished OPT passes. (There is nothing left to do.)

4.14. Executing FSM pass (extract and optimize FSM).

4.14.1. Executing FSM_DETECT pass (finding FSMs in design).

4.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..

4.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.15. Executing OPT pass (performing simple optimizations).

4.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_16.

4.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_16'.
Removed a total of 0 cells.

4.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..

4.15.5. Finished fast OPT passes.

4.16. Executing MEMORY pass.

4.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

4.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..

4.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..

4.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

4.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..

4.18. Executing OPT pass (performing simple optimizations).

4.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_16.

4.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_16'.
Removed a total of 0 cells.

4.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..

4.18.5. Finished fast OPT passes.

4.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

4.20. Executing OPT pass (performing simple optimizations).

4.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_16.

4.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_16'.
Removed a total of 0 cells.

4.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_16.
Performed a total of 0 changes.

4.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_16'.
Removed a total of 0 cells.

4.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..

4.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_16.

4.20.9. Finished OPT passes. (There is nothing left to do.)

4.21. Executing TECHMAP pass (map to technology primitives).

4.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
No more expansions possible.
<suppressed ~112 debug messages>

4.22. Executing OPT pass (performing simple optimizations).

4.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_16.

4.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_16'.
Removed a total of 0 cells.

4.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..

4.22.5. Finished fast OPT passes.

4.23. Executing ABC pass (technology mapping using ABC).

4.23.1. Extracting gate netlist of module `\full_adder_16' to `<abc-temp-dir>/input.blif'..
Extracted 112 gates and 145 wires to a netlist network with 33 inputs and 17 outputs.

4.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:       14
ABC RESULTS:              AOI3 cells:       14
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:       13
ABC RESULTS:               NOT cells:       28
ABC RESULTS:              OAI3 cells:        2
ABC RESULTS:                OR cells:        1
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:       14
ABC RESULTS:               XOR cells:       18
ABC RESULTS:        internal signals:       95
ABC RESULTS:           input signals:       33
ABC RESULTS:          output signals:       17
Removing temp directory.

4.24. Executing OPT pass (performing simple optimizations).

4.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_16.

4.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_16'.
Removed a total of 0 cells.

4.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..
Removed 0 unused cells and 130 unused wires.
<suppressed ~1 debug messages>

4.24.5. Finished fast OPT passes.

4.25. Executing HIERARCHY pass (managing design hierarchy).

4.25.1. Analyzing design hierarchy..
Top module:  \full_adder_16

4.25.2. Analyzing design hierarchy..
Top module:  \full_adder_16
Removed 0 unused modules.

4.26. Printing statistics.

=== full_adder_16 ===

   Number of wires:                177
   Number of wire bits:            238
   Number of public wires:          86
   Number of public wire bits:     147
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                108
     $_ANDNOT_                      14
     $_AND_                          2
     $_AOI3_                        14
     $_NAND_                         1
     $_NOR_                         13
     $_NOT_                         28
     $_OAI3_                         2
     $_ORNOT_                        1
     $_OR_                           1
     $_XNOR_                        14
     $_XOR_                         18

4.27. Executing CHECK pass (checking for obvious problems).
checking module full_adder_16..
found and reported 0 problems.

5. Executing AIGMAP pass (map logic to AIG).
Module full_adder_16: replaced 78 cells with 382 new cells, skipped 30 cells.
  replaced 9 cell types:
       1 $_NAND_
       1 $_OR_
      13 $_NOR_
      18 $_XOR_
      14 $_XNOR_
      14 $_ANDNOT_
       1 $_ORNOT_
      14 $_AOI3_
       2 $_OAI3_
  not replaced 2 cell types:
      28 $_NOT_
       2 $_AND_

6. Executing AIGER backend.

End of script. Logfile hash: f787031733
CPU: user 0.25s system 0.01s, MEM: 17.29 MB total, 11.50 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 24% 13x opt_clean (0 sec), 13% 7x opt (0 sec), ...
>>> aig writing succeed!
[i] processing /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_16//full_adder_16.aig
resyn runtime: 0
[i] area: 11.707740180194378, gates: 97, depth: 25
mapping runtime: 0

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib outputs/iCell/K3/adder/adder.lib; read_verilog /tmp/5SBVMYOD1N.v; write_blif -impltf /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_16//full_adder_16_init.blif;' --

1. Executing Liberty frontend.
Imported 14 cell types from liberty file.

2. Executing Verilog-2005 frontend: /tmp/5SBVMYOD1N.v
Parsing Verilog input from `/tmp/5SBVMYOD1N.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

3. Executing BLIF backend.

End of script. Logfile hash: 792d4265bb
CPU: user 0.02s system 0.00s, MEM: 16.34 MB total, 10.50 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 46% 2x read_verilog (0 sec), 42% 2x read_liberty (0 sec), ...

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib stdCellLib/asap7/asap7_75t_L.lib; read_blif /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_16//full_adder_16_init.blif; stat -liberty outputs/iCell/K3/adder/adder.lib; ltp;' --

1. Executing Liberty frontend.
Imported 148 cell types from liberty file.

2. Executing BLIF frontend.

3. Printing statistics.

=== top ===

   Number of wires:                130
   Number of wire bits:            130
   Number of public wires:         130
   Number of public wire bits:     130
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 97
     AND2x2                          1
     AOI21x1                        13
     INVx1                          18
     NAND2x1                         6
     NAND3x1                         3
     NOR2x1                          5
     NOR3x1                          4
     OAI21x1                        11
     OR2x2                           4
     XNOR2x1                        29
     XOR2x1                          3

   Chip area for module '\top': 11.707740

4. Executing LTP pass (find longest path).

Longest topological path in top (length=0):
    0: \x0

End of script. Logfile hash: 6d33b8b9e9
CPU: user 0.34s system 0.01s, MEM: 47.66 MB total, 41.00 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 84% 2x read_liberty (0 sec), 13% 2x read_blif (0 sec), ...
>>> initial mapping succeed with area = 11.707740180194378
[i] processing /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_16//full_adder_16.aig
resyn runtime: 0
[i] area: 9.549899782985449, gates: 50, depth: 17
mapping runtime: 0

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib outputs/iCell/K3/adder/ADDER_G2_69_70_420.lib; read_verilog /tmp/WC48FT4BWP.v; write_blif -impltf /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_16//full_adder_16_temacle.blif;' --

1. Executing Liberty frontend.
Imported 17 cell types from liberty file.

2. Executing Verilog-2005 frontend: /tmp/WC48FT4BWP.v
Parsing Verilog input from `/tmp/WC48FT4BWP.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

3. Executing BLIF backend.

End of script. Logfile hash: 1d6f0383bc
CPU: user 0.02s system 0.00s, MEM: 16.34 MB total, 10.00 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 56% 2x read_liberty (0 sec), 34% 2x read_verilog (0 sec), ...

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib outputs/iCell/K3/adder/ADDER_G2_69_70_420.lib; read_blif /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_16//full_adder_16_temacle.blif; stat -liberty outputs/iCell/K3/adder/ADDER_G2_69_70_420.lib; ltp;' --

1. Executing Liberty frontend.
Imported 17 cell types from liberty file.

2. Executing BLIF frontend.

3. Printing statistics.

=== top ===

   Number of wires:                 83
   Number of wire bits:             83
   Number of public wires:          83
   Number of public wire bits:      83
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 50
     ADDER_G0_455_456               16
     ADDER_G2_69_70_420             15
     AOI21x1                         2
     INVx1                          17

   Chip area for module '\top': 9.549900

4. Executing LTP pass (find longest path).

Longest topological path in top (length=17):
    0: \x0
    1: \n35 (via $auto$blifparse.cc:371:parse_blif$3)
    2: \n53 (via $auto$blifparse.cc:371:parse_blif$6)
    3: \n54 (via $auto$blifparse.cc:371:parse_blif$7)
    4: \n55 (via $auto$blifparse.cc:371:parse_blif$8)
    5: \n56 (via $auto$blifparse.cc:371:parse_blif$9)
    6: \n57 (via $auto$blifparse.cc:371:parse_blif$10)
    7: \n58 (via $auto$blifparse.cc:371:parse_blif$11)
    8: \n59 (via $auto$blifparse.cc:371:parse_blif$12)
    9: \n60 (via $auto$blifparse.cc:371:parse_blif$13)
   10: \n61 (via $auto$blifparse.cc:371:parse_blif$14)
   11: \n62 (via $auto$blifparse.cc:371:parse_blif$15)
   12: \n63 (via $auto$blifparse.cc:371:parse_blif$16)
   13: \n64 (via $auto$blifparse.cc:371:parse_blif$17)
   14: \n65 (via $auto$blifparse.cc:371:parse_blif$18)
   15: \n66 (via $auto$blifparse.cc:371:parse_blif$19)
   16: \n67 (via $auto$blifparse.cc:371:parse_blif$20)
   17: \y0 (via $auto$blifparse.cc:371:parse_blif$21)

End of script. Logfile hash: 6b602c967d
CPU: user 0.02s system 0.01s, MEM: 16.46 MB total, 10.50 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 44% 2x read_liberty (0 sec), 43% 1x stat (0 sec), ...
>>> Temacle mapping succeed with area = 9.549899782985449
full_adder_16 initial mapping area = 11.707740180194378
full_adder_16 Temacle mapping area = 9.549899782985449
full_adder_16 Temacle saveArea = (11.707740180194378 - 9.549899782985449) / 11.707740180194378 = 18.430887293341893 %

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_verilog /home/flynn/workplace/CEMapping/benchmark/adder/full_adder_32.v; hierarchy -top full_adder_32; flatten; synth -top full_adder_32; aigmap; write_aiger /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_32//full_adder_32.aig;' --

1. Executing Verilog-2005 frontend: /home/flynn/workplace/CEMapping/benchmark/adder/full_adder_32.v
Parsing Verilog input from `/home/flynn/workplace/CEMapping/benchmark/adder/full_adder_32.v' to AST representation.
Generating RTLIL representation for module `\full_adder_32'.
Generating RTLIL representation for module `\fullAdder'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \full_adder_32
Used module:     \fullAdder

2.2. Analyzing design hierarchy..
Top module:  \full_adder_32
Used module:     \fullAdder
Removed 0 unused modules.
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[31].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[30].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[29].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[28].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[27].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[26].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[25].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[24].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[23].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[22].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[21].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[20].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[19].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[18].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[17].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[16].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[15].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[14].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[13].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[12].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[11].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[10].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[9].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[8].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[7].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[6].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[5].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[4].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[3].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[2].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[1].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[0].f (fullAdder).

3. Executing FLATTEN pass (flatten design).
Using template fullAdder for cells of type fullAdder.
<suppressed ~32 debug messages>
No more expansions possible.
Deleting now unused module fullAdder.

4. Executing SYNTH pass.

4.1. Executing HIERARCHY pass (managing design hierarchy).

4.1.1. Analyzing design hierarchy..
Top module:  \full_adder_32

4.1.2. Analyzing design hierarchy..
Top module:  \full_adder_32
Removed 0 unused modules.

4.2. Executing PROC pass (convert processes to netlists).

4.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.2.3. Executing PROC_INIT pass (extract init attributes).

4.2.4. Executing PROC_ARST pass (detect async resets in processes).

4.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

4.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

4.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_32.

4.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..
Removed 0 unused cells and 64 unused wires.
<suppressed ~1 debug messages>

4.5. Executing CHECK pass (checking for obvious problems).
checking module full_adder_32..
found and reported 0 problems.

4.6. Executing OPT pass (performing simple optimizations).

4.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_32.

4.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_32'.
Removed a total of 0 cells.

4.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_32.
Performed a total of 0 changes.

4.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_32'.
Removed a total of 0 cells.

4.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..

4.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_32.

4.6.9. Finished OPT passes. (There is nothing left to do.)

4.7. Executing WREDUCE pass (reducing word size of cells).

4.8. Executing PEEPOPT pass (run peephole optimizers).

4.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..

4.10. Executing TECHMAP pass (map to technology primitives).

4.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

4.10.2. Continuing TECHMAP pass.
No more expansions possible.

4.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module full_adder_32:
  created 0 $alu and 0 $macc cells.

4.12. Executing SHARE pass (SAT-based resource sharing).

4.13. Executing OPT pass (performing simple optimizations).

4.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_32.

4.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_32'.
Removed a total of 0 cells.

4.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_32.
Performed a total of 0 changes.

4.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_32'.
Removed a total of 0 cells.

4.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..

4.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_32.

4.13.9. Finished OPT passes. (There is nothing left to do.)

4.14. Executing FSM pass (extract and optimize FSM).

4.14.1. Executing FSM_DETECT pass (finding FSMs in design).

4.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..

4.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.15. Executing OPT pass (performing simple optimizations).

4.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_32.

4.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_32'.
Removed a total of 0 cells.

4.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..

4.15.5. Finished fast OPT passes.

4.16. Executing MEMORY pass.

4.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

4.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..

4.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..

4.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

4.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..

4.18. Executing OPT pass (performing simple optimizations).

4.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_32.

4.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_32'.
Removed a total of 0 cells.

4.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..

4.18.5. Finished fast OPT passes.

4.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

4.20. Executing OPT pass (performing simple optimizations).

4.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_32.

4.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_32'.
Removed a total of 0 cells.

4.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_32.
Performed a total of 0 changes.

4.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_32'.
Removed a total of 0 cells.

4.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..

4.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_32.

4.20.9. Finished OPT passes. (There is nothing left to do.)

4.21. Executing TECHMAP pass (map to technology primitives).

4.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
No more expansions possible.
<suppressed ~224 debug messages>

4.22. Executing OPT pass (performing simple optimizations).

4.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_32.

4.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_32'.
Removed a total of 0 cells.

4.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..

4.22.5. Finished fast OPT passes.

4.23. Executing ABC pass (technology mapping using ABC).

4.23.1. Extracting gate netlist of module `\full_adder_32' to `<abc-temp-dir>/input.blif'..
Extracted 224 gates and 289 wires to a netlist network with 65 inputs and 33 outputs.

4.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:       30
ABC RESULTS:              AOI3 cells:       30
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:       29
ABC RESULTS:               NOT cells:       60
ABC RESULTS:              OAI3 cells:        2
ABC RESULTS:                OR cells:        1
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:       30
ABC RESULTS:               XOR cells:       34
ABC RESULTS:        internal signals:      191
ABC RESULTS:           input signals:       65
ABC RESULTS:          output signals:       33
Removing temp directory.

4.24. Executing OPT pass (performing simple optimizations).

4.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_32.

4.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_32'.
Removed a total of 0 cells.

4.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..
Removed 0 unused cells and 258 unused wires.
<suppressed ~1 debug messages>

4.24.5. Finished fast OPT passes.

4.25. Executing HIERARCHY pass (managing design hierarchy).

4.25.1. Analyzing design hierarchy..
Top module:  \full_adder_32

4.25.2. Analyzing design hierarchy..
Top module:  \full_adder_32
Removed 0 unused modules.

4.26. Printing statistics.

=== full_adder_32 ===

   Number of wires:                353
   Number of wire bits:            478
   Number of public wires:         166
   Number of public wire bits:     291
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                220
     $_ANDNOT_                      30
     $_AND_                          2
     $_AOI3_                        30
     $_NAND_                         1
     $_NOR_                         29
     $_NOT_                         60
     $_OAI3_                         2
     $_ORNOT_                        1
     $_OR_                           1
     $_XNOR_                        30
     $_XOR_                         34

4.27. Executing CHECK pass (checking for obvious problems).
checking module full_adder_32..
found and reported 0 problems.

5. Executing AIGMAP pass (map logic to AIG).
Module full_adder_32: replaced 158 cells with 766 new cells, skipped 62 cells.
  replaced 9 cell types:
       1 $_NAND_
       1 $_OR_
      29 $_NOR_
      34 $_XOR_
      30 $_XNOR_
      30 $_ANDNOT_
       1 $_ORNOT_
      30 $_AOI3_
       2 $_OAI3_
  not replaced 2 cell types:
      60 $_NOT_
       2 $_AND_

6. Executing AIGER backend.

End of script. Logfile hash: 79189055d8
CPU: user 0.56s system 0.01s, MEM: 17.94 MB total, 12.00 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 25% 13x opt_clean (0 sec), 15% 7x opt (0 sec), ...
>>> aig writing succeed!
[i] processing /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_32//full_adder_32.aig
resyn runtime: 0
[i] area: 23.48838036507368, gates: 193, depth: 49
mapping runtime: 0

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib outputs/iCell/K3/adder/adder.lib; read_verilog /tmp/ND0K597UNR.v; write_blif -impltf /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_32//full_adder_32_init.blif;' --

1. Executing Liberty frontend.
Imported 14 cell types from liberty file.

2. Executing Verilog-2005 frontend: /tmp/ND0K597UNR.v
Parsing Verilog input from `/tmp/ND0K597UNR.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

3. Executing BLIF backend.

End of script. Logfile hash: c680e320a8
CPU: user 0.03s system 0.00s, MEM: 17.11 MB total, 10.50 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 63% 2x read_verilog (0 sec), 25% 2x read_liberty (0 sec), ...

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib stdCellLib/asap7/asap7_75t_L.lib; read_blif /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_32//full_adder_32_init.blif; stat -liberty outputs/iCell/K3/adder/adder.lib; ltp;' --

1. Executing Liberty frontend.
Imported 148 cell types from liberty file.

2. Executing BLIF frontend.

3. Printing statistics.

=== top ===

   Number of wires:                258
   Number of wire bits:            258
   Number of public wires:         258
   Number of public wire bits:     258
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                193
     AND2x2                          1
     AOI21x1                        25
     INVx1                          34
     NAND2x1                        14
     NAND3x1                         7
     NOR2x1                          9
     NOR3x1                          8
     OAI21x1                        23
     OR2x2                           8
     XNOR2x1                        61
     XOR2x1                          3

   Chip area for module '\top': 23.488380

4. Executing LTP pass (find longest path).

Longest topological path in top (length=0):
    0: \x0

End of script. Logfile hash: f910c3fb65
CPU: user 0.32s system 0.02s, MEM: 47.66 MB total, 41.00 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 84% 2x read_liberty (0 sec), 12% 2x read_blif (0 sec), ...
>>> initial mapping succeed with area = 23.48838036507368
[i] processing /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_32//full_adder_32.aig
resyn runtime: 0
[i] area: 19.114379551261663, gates: 98, depth: 33
mapping runtime: 0

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib outputs/iCell/K3/adder/ADDER_G2_69_70_420.lib; read_verilog /tmp/Z2UKB55LT7.v; write_blif -impltf /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_32//full_adder_32_temacle.blif;' --

1. Executing Liberty frontend.
Imported 17 cell types from liberty file.

2. Executing Verilog-2005 frontend: /tmp/Z2UKB55LT7.v
Parsing Verilog input from `/tmp/Z2UKB55LT7.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

3. Executing BLIF backend.

End of script. Logfile hash: 5e5b44159e
CPU: user 0.02s system 0.01s, MEM: 16.46 MB total, 10.00 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 50% 2x read_verilog (0 sec), 39% 2x read_liberty (0 sec), ...

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib outputs/iCell/K3/adder/ADDER_G2_69_70_420.lib; read_blif /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_32//full_adder_32_temacle.blif; stat -liberty outputs/iCell/K3/adder/ADDER_G2_69_70_420.lib; ltp;' --

1. Executing Liberty frontend.
Imported 17 cell types from liberty file.

2. Executing BLIF frontend.

3. Printing statistics.

=== top ===

   Number of wires:                163
   Number of wire bits:            163
   Number of public wires:         163
   Number of public wire bits:     163
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 98
     ADDER_G0_455_456               32
     ADDER_G2_69_70_420             31
     AOI21x1                         2
     INVx1                          33

   Chip area for module '\top': 19.114380

4. Executing LTP pass (find longest path).

Longest topological path in top (length=33):
    0: \x0
    1: \n67 (via $auto$blifparse.cc:371:parse_blif$3)
    2: \n101 (via $auto$blifparse.cc:371:parse_blif$6)
    3: \n102 (via $auto$blifparse.cc:371:parse_blif$7)
    4: \n103 (via $auto$blifparse.cc:371:parse_blif$8)
    5: \n104 (via $auto$blifparse.cc:371:parse_blif$9)
    6: \n105 (via $auto$blifparse.cc:371:parse_blif$10)
    7: \n106 (via $auto$blifparse.cc:371:parse_blif$11)
    8: \n107 (via $auto$blifparse.cc:371:parse_blif$12)
    9: \n108 (via $auto$blifparse.cc:371:parse_blif$13)
   10: \n109 (via $auto$blifparse.cc:371:parse_blif$14)
   11: \n110 (via $auto$blifparse.cc:371:parse_blif$15)
   12: \n111 (via $auto$blifparse.cc:371:parse_blif$16)
   13: \n112 (via $auto$blifparse.cc:371:parse_blif$17)
   14: \n113 (via $auto$blifparse.cc:371:parse_blif$18)
   15: \n114 (via $auto$blifparse.cc:371:parse_blif$19)
   16: \n115 (via $auto$blifparse.cc:371:parse_blif$20)
   17: \n116 (via $auto$blifparse.cc:371:parse_blif$21)
   18: \n117 (via $auto$blifparse.cc:371:parse_blif$22)
   19: \n118 (via $auto$blifparse.cc:371:parse_blif$23)
   20: \n119 (via $auto$blifparse.cc:371:parse_blif$24)
   21: \n120 (via $auto$blifparse.cc:371:parse_blif$25)
   22: \n121 (via $auto$blifparse.cc:371:parse_blif$26)
   23: \n122 (via $auto$blifparse.cc:371:parse_blif$27)
   24: \n123 (via $auto$blifparse.cc:371:parse_blif$28)
   25: \n124 (via $auto$blifparse.cc:371:parse_blif$29)
   26: \n125 (via $auto$blifparse.cc:371:parse_blif$30)
   27: \n126 (via $auto$blifparse.cc:371:parse_blif$31)
   28: \n127 (via $auto$blifparse.cc:371:parse_blif$32)
   29: \n128 (via $auto$blifparse.cc:371:parse_blif$33)
   30: \n129 (via $auto$blifparse.cc:371:parse_blif$34)
   31: \n130 (via $auto$blifparse.cc:371:parse_blif$35)
   32: \n131 (via $auto$blifparse.cc:371:parse_blif$36)
   33: \y0 (via $auto$blifparse.cc:371:parse_blif$37)

End of script. Logfile hash: c982fa4a00
CPU: user 0.02s system 0.00s, MEM: 16.46 MB total, 10.50 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 43% 1x stat (0 sec), 42% 2x read_liberty (0 sec), ...
>>> Temacle mapping succeed with area = 19.114379551261663
full_adder_32 initial mapping area = 23.48838036507368
full_adder_32 Temacle mapping area = 19.114379551261663
full_adder_32 Temacle saveArea = (23.48838036507368 - 19.114379551261663) / 23.48838036507368 = 18.6219771045431 %

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_verilog /home/flynn/workplace/CEMapping/benchmark/adder/full_adder_64.v; hierarchy -top full_adder_64; flatten; synth -top full_adder_64; aigmap; write_aiger /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_64//full_adder_64.aig;' --

1. Executing Verilog-2005 frontend: /home/flynn/workplace/CEMapping/benchmark/adder/full_adder_64.v
Parsing Verilog input from `/home/flynn/workplace/CEMapping/benchmark/adder/full_adder_64.v' to AST representation.
Generating RTLIL representation for module `\full_adder_64'.
Generating RTLIL representation for module `\fullAdder'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \full_adder_64
Used module:     \fullAdder

2.2. Analyzing design hierarchy..
Top module:  \full_adder_64
Used module:     \fullAdder
Removed 0 unused modules.
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[63].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[62].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[61].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[60].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[59].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[58].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[57].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[56].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[55].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[54].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[53].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[52].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[51].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[50].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[49].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[48].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[47].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[46].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[45].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[44].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[43].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[42].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[41].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[40].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[39].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[38].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[37].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[36].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[35].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[34].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[33].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[32].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[31].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[30].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[29].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[28].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[27].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[26].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[25].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[24].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[23].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[22].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[21].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[20].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[19].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[18].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[17].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[16].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[15].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[14].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[13].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[12].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[11].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[10].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[9].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[8].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[7].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[6].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[5].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[4].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[3].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[2].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[1].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[0].f (fullAdder).

3. Executing FLATTEN pass (flatten design).
Using template fullAdder for cells of type fullAdder.
<suppressed ~64 debug messages>
No more expansions possible.
Deleting now unused module fullAdder.

4. Executing SYNTH pass.

4.1. Executing HIERARCHY pass (managing design hierarchy).

4.1.1. Analyzing design hierarchy..
Top module:  \full_adder_64

4.1.2. Analyzing design hierarchy..
Top module:  \full_adder_64
Removed 0 unused modules.

4.2. Executing PROC pass (convert processes to netlists).

4.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.2.3. Executing PROC_INIT pass (extract init attributes).

4.2.4. Executing PROC_ARST pass (detect async resets in processes).

4.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

4.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

4.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_64.

4.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..
Removed 0 unused cells and 128 unused wires.
<suppressed ~1 debug messages>

4.5. Executing CHECK pass (checking for obvious problems).
checking module full_adder_64..
found and reported 0 problems.

4.6. Executing OPT pass (performing simple optimizations).

4.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_64.

4.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_64'.
Removed a total of 0 cells.

4.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_64..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_64.
Performed a total of 0 changes.

4.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_64'.
Removed a total of 0 cells.

4.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..

4.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_64.

4.6.9. Finished OPT passes. (There is nothing left to do.)

4.7. Executing WREDUCE pass (reducing word size of cells).

4.8. Executing PEEPOPT pass (run peephole optimizers).

4.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..

4.10. Executing TECHMAP pass (map to technology primitives).

4.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

4.10.2. Continuing TECHMAP pass.
No more expansions possible.

4.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module full_adder_64:
  created 0 $alu and 0 $macc cells.

4.12. Executing SHARE pass (SAT-based resource sharing).

4.13. Executing OPT pass (performing simple optimizations).

4.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_64.

4.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_64'.
Removed a total of 0 cells.

4.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_64..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_64.
Performed a total of 0 changes.

4.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_64'.
Removed a total of 0 cells.

4.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..

4.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_64.

4.13.9. Finished OPT passes. (There is nothing left to do.)

4.14. Executing FSM pass (extract and optimize FSM).

4.14.1. Executing FSM_DETECT pass (finding FSMs in design).

4.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..

4.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.15. Executing OPT pass (performing simple optimizations).

4.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_64.

4.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_64'.
Removed a total of 0 cells.

4.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..

4.15.5. Finished fast OPT passes.

4.16. Executing MEMORY pass.

4.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

4.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..

4.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..

4.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

4.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..

4.18. Executing OPT pass (performing simple optimizations).

4.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_64.

4.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_64'.
Removed a total of 0 cells.

4.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..

4.18.5. Finished fast OPT passes.

4.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

4.20. Executing OPT pass (performing simple optimizations).

4.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_64.

4.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_64'.
Removed a total of 0 cells.

4.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_64..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_64.
Performed a total of 0 changes.

4.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_64'.
Removed a total of 0 cells.

4.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..

4.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_64.

4.20.9. Finished OPT passes. (There is nothing left to do.)

4.21. Executing TECHMAP pass (map to technology primitives).

4.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
No more expansions possible.
<suppressed ~448 debug messages>

4.22. Executing OPT pass (performing simple optimizations).

4.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_64.

4.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_64'.
Removed a total of 0 cells.

4.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..

4.22.5. Finished fast OPT passes.

4.23. Executing ABC pass (technology mapping using ABC).

4.23.1. Extracting gate netlist of module `\full_adder_64' to `<abc-temp-dir>/input.blif'..
Extracted 448 gates and 577 wires to a netlist network with 129 inputs and 65 outputs.

4.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:       62
ABC RESULTS:              AOI3 cells:       62
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:       61
ABC RESULTS:               NOT cells:      124
ABC RESULTS:              OAI3 cells:        2
ABC RESULTS:                OR cells:        1
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:       62
ABC RESULTS:               XOR cells:       66
ABC RESULTS:        internal signals:      383
ABC RESULTS:           input signals:      129
ABC RESULTS:          output signals:       65
Removing temp directory.

4.24. Executing OPT pass (performing simple optimizations).

4.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_64.

4.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_64'.
Removed a total of 0 cells.

4.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..
Removed 0 unused cells and 514 unused wires.
<suppressed ~1 debug messages>

4.24.5. Finished fast OPT passes.

4.25. Executing HIERARCHY pass (managing design hierarchy).

4.25.1. Analyzing design hierarchy..
Top module:  \full_adder_64

4.25.2. Analyzing design hierarchy..
Top module:  \full_adder_64
Removed 0 unused modules.

4.26. Printing statistics.

=== full_adder_64 ===

   Number of wires:                705
   Number of wire bits:            958
   Number of public wires:         326
   Number of public wire bits:     579
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                444
     $_ANDNOT_                      62
     $_AND_                          2
     $_AOI3_                        62
     $_NAND_                         1
     $_NOR_                         61
     $_NOT_                        124
     $_OAI3_                         2
     $_ORNOT_                        1
     $_OR_                           1
     $_XNOR_                        62
     $_XOR_                         66

4.27. Executing CHECK pass (checking for obvious problems).
checking module full_adder_64..
found and reported 0 problems.

5. Executing AIGMAP pass (map logic to AIG).
Module full_adder_64: replaced 318 cells with 1534 new cells, skipped 126 cells.
  replaced 9 cell types:
       1 $_NAND_
       1 $_OR_
      61 $_NOR_
      66 $_XOR_
      62 $_XNOR_
      62 $_ANDNOT_
       1 $_ORNOT_
      62 $_AOI3_
       2 $_OAI3_
  not replaced 2 cell types:
     124 $_NOT_
       2 $_AND_

6. Executing AIGER backend.

End of script. Logfile hash: c369b2b7f0
CPU: user 1.16s system 0.03s, MEM: 19.78 MB total, 13.50 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 27% 13x opt_clean (0 sec), 14% 7x opt (0 sec), ...
>>> aig writing succeed!
[i] processing /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_64//full_adder_64.aig
resyn runtime: 0
[i] area: 47.04966073483229, gates: 385, depth: 97
mapping runtime: 0

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib outputs/iCell/K3/adder/adder.lib; read_verilog /tmp/90L9TTC5CP.v; write_blif -impltf /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_64//full_adder_64_init.blif;' --

1. Executing Liberty frontend.
Imported 14 cell types from liberty file.

2. Executing Verilog-2005 frontend: /tmp/90L9TTC5CP.v
Parsing Verilog input from `/tmp/90L9TTC5CP.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

3. Executing BLIF backend.

End of script. Logfile hash: 28f42214bb
CPU: user 0.05s system 0.01s, MEM: 18.81 MB total, 12.50 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 74% 2x read_verilog (0 sec), 14% 2x read_liberty (0 sec), ...

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib stdCellLib/asap7/asap7_75t_L.lib; read_blif /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_64//full_adder_64_init.blif; stat -liberty outputs/iCell/K3/adder/adder.lib; ltp;' --

1. Executing Liberty frontend.
Imported 148 cell types from liberty file.

2. Executing BLIF frontend.

3. Printing statistics.

=== top ===

   Number of wires:                514
   Number of wire bits:            514
   Number of public wires:         514
   Number of public wire bits:     514
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                385
     AND2x2                          1
     AOI21x1                        49
     INVx1                          66
     NAND2x1                        30
     NAND3x1                        15
     NOR2x1                         17
     NOR3x1                         16
     OAI21x1                        47
     OR2x2                          16
     XNOR2x1                       125
     XOR2x1                          3

   Chip area for module '\top': 47.049660

4. Executing LTP pass (find longest path).

Longest topological path in top (length=0):
    0: \x0

End of script. Logfile hash: db720961ea
CPU: user 0.35s system 0.02s, MEM: 47.66 MB total, 41.50 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 83% 2x read_liberty (0 sec), 13% 2x read_blif (0 sec), ...
>>> initial mapping succeed with area = 47.04966073483229
[i] processing /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_64//full_adder_64.aig
resyn runtime: 0
[i] area: 38.24333908781409, gates: 194, depth: 65
mapping runtime: 0

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib outputs/iCell/K3/adder/ADDER_G2_69_70_420.lib; read_verilog /tmp/TEOZJL1KER.v; write_blif -impltf /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_64//full_adder_64_temacle.blif;' --

1. Executing Liberty frontend.
Imported 17 cell types from liberty file.

2. Executing Verilog-2005 frontend: /tmp/TEOZJL1KER.v
Parsing Verilog input from `/tmp/TEOZJL1KER.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

3. Executing BLIF backend.

End of script. Logfile hash: 9bba5fd560
CPU: user 0.03s system 0.01s, MEM: 17.37 MB total, 11.00 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 64% 2x read_verilog (0 sec), 24% 2x read_liberty (0 sec), ...

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib outputs/iCell/K3/adder/ADDER_G2_69_70_420.lib; read_blif /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_64//full_adder_64_temacle.blif; stat -liberty outputs/iCell/K3/adder/ADDER_G2_69_70_420.lib; ltp;' --

1. Executing Liberty frontend.
Imported 17 cell types from liberty file.

2. Executing BLIF frontend.

3. Printing statistics.

=== top ===

   Number of wires:                323
   Number of wire bits:            323
   Number of public wires:         323
   Number of public wire bits:     323
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                194
     ADDER_G0_455_456               64
     ADDER_G2_69_70_420             63
     AOI21x1                         2
     INVx1                          65

   Chip area for module '\top': 38.243340

4. Executing LTP pass (find longest path).

Longest topological path in top (length=65):
    0: \x0
    1: \n131 (via $auto$blifparse.cc:371:parse_blif$3)
    2: \n197 (via $auto$blifparse.cc:371:parse_blif$6)
    3: \n198 (via $auto$blifparse.cc:371:parse_blif$7)
    4: \n199 (via $auto$blifparse.cc:371:parse_blif$8)
    5: \n200 (via $auto$blifparse.cc:371:parse_blif$9)
    6: \n201 (via $auto$blifparse.cc:371:parse_blif$10)
    7: \n202 (via $auto$blifparse.cc:371:parse_blif$11)
    8: \n203 (via $auto$blifparse.cc:371:parse_blif$12)
    9: \n204 (via $auto$blifparse.cc:371:parse_blif$13)
   10: \n205 (via $auto$blifparse.cc:371:parse_blif$14)
   11: \n206 (via $auto$blifparse.cc:371:parse_blif$15)
   12: \n207 (via $auto$blifparse.cc:371:parse_blif$16)
   13: \n208 (via $auto$blifparse.cc:371:parse_blif$17)
   14: \n209 (via $auto$blifparse.cc:371:parse_blif$18)
   15: \n210 (via $auto$blifparse.cc:371:parse_blif$19)
   16: \n211 (via $auto$blifparse.cc:371:parse_blif$20)
   17: \n212 (via $auto$blifparse.cc:371:parse_blif$21)
   18: \n213 (via $auto$blifparse.cc:371:parse_blif$22)
   19: \n214 (via $auto$blifparse.cc:371:parse_blif$23)
   20: \n215 (via $auto$blifparse.cc:371:parse_blif$24)
   21: \n216 (via $auto$blifparse.cc:371:parse_blif$25)
   22: \n217 (via $auto$blifparse.cc:371:parse_blif$26)
   23: \n218 (via $auto$blifparse.cc:371:parse_blif$27)
   24: \n219 (via $auto$blifparse.cc:371:parse_blif$28)
   25: \n220 (via $auto$blifparse.cc:371:parse_blif$29)
   26: \n221 (via $auto$blifparse.cc:371:parse_blif$30)
   27: \n222 (via $auto$blifparse.cc:371:parse_blif$31)
   28: \n223 (via $auto$blifparse.cc:371:parse_blif$32)
   29: \n224 (via $auto$blifparse.cc:371:parse_blif$33)
   30: \n225 (via $auto$blifparse.cc:371:parse_blif$34)
   31: \n226 (via $auto$blifparse.cc:371:parse_blif$35)
   32: \n227 (via $auto$blifparse.cc:371:parse_blif$36)
   33: \n228 (via $auto$blifparse.cc:371:parse_blif$37)
   34: \n229 (via $auto$blifparse.cc:371:parse_blif$38)
   35: \n230 (via $auto$blifparse.cc:371:parse_blif$39)
   36: \n231 (via $auto$blifparse.cc:371:parse_blif$40)
   37: \n232 (via $auto$blifparse.cc:371:parse_blif$41)
   38: \n233 (via $auto$blifparse.cc:371:parse_blif$42)
   39: \n234 (via $auto$blifparse.cc:371:parse_blif$43)
   40: \n235 (via $auto$blifparse.cc:371:parse_blif$44)
   41: \n236 (via $auto$blifparse.cc:371:parse_blif$45)
   42: \n237 (via $auto$blifparse.cc:371:parse_blif$46)
   43: \n238 (via $auto$blifparse.cc:371:parse_blif$47)
   44: \n239 (via $auto$blifparse.cc:371:parse_blif$48)
   45: \n240 (via $auto$blifparse.cc:371:parse_blif$49)
   46: \n241 (via $auto$blifparse.cc:371:parse_blif$50)
   47: \n242 (via $auto$blifparse.cc:371:parse_blif$51)
   48: \n243 (via $auto$blifparse.cc:371:parse_blif$52)
   49: \n244 (via $auto$blifparse.cc:371:parse_blif$53)
   50: \n245 (via $auto$blifparse.cc:371:parse_blif$54)
   51: \n246 (via $auto$blifparse.cc:371:parse_blif$55)
   52: \n247 (via $auto$blifparse.cc:371:parse_blif$56)
   53: \n248 (via $auto$blifparse.cc:371:parse_blif$57)
   54: \n249 (via $auto$blifparse.cc:371:parse_blif$58)
   55: \n250 (via $auto$blifparse.cc:371:parse_blif$59)
   56: \n251 (via $auto$blifparse.cc:371:parse_blif$60)
   57: \n252 (via $auto$blifparse.cc:371:parse_blif$61)
   58: \n253 (via $auto$blifparse.cc:371:parse_blif$62)
   59: \n254 (via $auto$blifparse.cc:371:parse_blif$63)
   60: \n255 (via $auto$blifparse.cc:371:parse_blif$64)
   61: \n256 (via $auto$blifparse.cc:371:parse_blif$65)
   62: \n257 (via $auto$blifparse.cc:371:parse_blif$66)
   63: \n258 (via $auto$blifparse.cc:371:parse_blif$67)
   64: \n259 (via $auto$blifparse.cc:371:parse_blif$68)
   65: \y0 (via $auto$blifparse.cc:371:parse_blif$69)

End of script. Logfile hash: 95e886873e
CPU: user 0.03s system 0.00s, MEM: 16.59 MB total, 10.00 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 40% 1x stat (0 sec), 39% 2x read_liberty (0 sec), ...
>>> Temacle mapping succeed with area = 38.24333908781409
full_adder_64 initial mapping area = 47.04966073483229
full_adder_64 Temacle mapping area = 38.24333908781409
full_adder_64 Temacle saveArea = (47.04966073483229 - 38.24333908781409) / 47.04966073483229 = 18.717077890635263 %

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_verilog /home/flynn/workplace/CEMapping/benchmark/adder/full_adder_128.v; hierarchy -top full_adder_128; flatten; synth -top full_adder_128; aigmap; write_aiger /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_128//full_adder_128.aig;' --

1. Executing Verilog-2005 frontend: /home/flynn/workplace/CEMapping/benchmark/adder/full_adder_128.v
Parsing Verilog input from `/home/flynn/workplace/CEMapping/benchmark/adder/full_adder_128.v' to AST representation.
Generating RTLIL representation for module `\full_adder_128'.
Generating RTLIL representation for module `\fullAdder'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \full_adder_128
Used module:     \fullAdder

2.2. Analyzing design hierarchy..
Top module:  \full_adder_128
Used module:     \fullAdder
Removed 0 unused modules.
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[127].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[126].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[125].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[124].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[123].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[122].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[121].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[120].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[119].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[118].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[117].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[116].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[115].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[114].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[113].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[112].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[111].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[110].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[109].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[108].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[107].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[106].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[105].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[104].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[103].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[102].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[101].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[100].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[99].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[98].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[97].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[96].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[95].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[94].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[93].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[92].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[91].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[90].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[89].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[88].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[87].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[86].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[85].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[84].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[83].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[82].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[81].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[80].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[79].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[78].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[77].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[76].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[75].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[74].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[73].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[72].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[71].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[70].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[69].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[68].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[67].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[66].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[65].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[64].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[63].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[62].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[61].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[60].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[59].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[58].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[57].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[56].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[55].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[54].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[53].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[52].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[51].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[50].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[49].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[48].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[47].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[46].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[45].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[44].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[43].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[42].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[41].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[40].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[39].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[38].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[37].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[36].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[35].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[34].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[33].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[32].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[31].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[30].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[29].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[28].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[27].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[26].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[25].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[24].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[23].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[22].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[21].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[20].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[19].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[18].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[17].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[16].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[15].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[14].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[13].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[12].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[11].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[10].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[9].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[8].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[7].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[6].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[5].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[4].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[3].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[2].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[1].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[0].f (fullAdder).

3. Executing FLATTEN pass (flatten design).
Using template fullAdder for cells of type fullAdder.
<suppressed ~128 debug messages>
No more expansions possible.
Deleting now unused module fullAdder.

4. Executing SYNTH pass.

4.1. Executing HIERARCHY pass (managing design hierarchy).

4.1.1. Analyzing design hierarchy..
Top module:  \full_adder_128

4.1.2. Analyzing design hierarchy..
Top module:  \full_adder_128
Removed 0 unused modules.

4.2. Executing PROC pass (convert processes to netlists).

4.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.2.3. Executing PROC_INIT pass (extract init attributes).

4.2.4. Executing PROC_ARST pass (detect async resets in processes).

4.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

4.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

4.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_128.

4.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..
Removed 0 unused cells and 256 unused wires.
<suppressed ~1 debug messages>

4.5. Executing CHECK pass (checking for obvious problems).
checking module full_adder_128..
found and reported 0 problems.

4.6. Executing OPT pass (performing simple optimizations).

4.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_128.

4.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_128'.
Removed a total of 0 cells.

4.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_128..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_128.
Performed a total of 0 changes.

4.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_128'.
Removed a total of 0 cells.

4.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..

4.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_128.

4.6.9. Finished OPT passes. (There is nothing left to do.)

4.7. Executing WREDUCE pass (reducing word size of cells).

4.8. Executing PEEPOPT pass (run peephole optimizers).

4.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..

4.10. Executing TECHMAP pass (map to technology primitives).

4.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

4.10.2. Continuing TECHMAP pass.
No more expansions possible.

4.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module full_adder_128:
  created 0 $alu and 0 $macc cells.

4.12. Executing SHARE pass (SAT-based resource sharing).

4.13. Executing OPT pass (performing simple optimizations).

4.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_128.

4.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_128'.
Removed a total of 0 cells.

4.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_128..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_128.
Performed a total of 0 changes.

4.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_128'.
Removed a total of 0 cells.

4.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..

4.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_128.

4.13.9. Finished OPT passes. (There is nothing left to do.)

4.14. Executing FSM pass (extract and optimize FSM).

4.14.1. Executing FSM_DETECT pass (finding FSMs in design).

4.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..

4.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.15. Executing OPT pass (performing simple optimizations).

4.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_128.

4.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_128'.
Removed a total of 0 cells.

4.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..

4.15.5. Finished fast OPT passes.

4.16. Executing MEMORY pass.

4.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

4.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..

4.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..

4.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

4.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..

4.18. Executing OPT pass (performing simple optimizations).

4.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_128.

4.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_128'.
Removed a total of 0 cells.

4.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..

4.18.5. Finished fast OPT passes.

4.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

4.20. Executing OPT pass (performing simple optimizations).

4.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_128.

4.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_128'.
Removed a total of 0 cells.

4.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_128..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_128.
Performed a total of 0 changes.

4.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_128'.
Removed a total of 0 cells.

4.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..

4.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_128.

4.20.9. Finished OPT passes. (There is nothing left to do.)

4.21. Executing TECHMAP pass (map to technology primitives).

4.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
No more expansions possible.
<suppressed ~896 debug messages>

4.22. Executing OPT pass (performing simple optimizations).

4.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_128.

4.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_128'.
Removed a total of 0 cells.

4.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..

4.22.5. Finished fast OPT passes.

4.23. Executing ABC pass (technology mapping using ABC).

4.23.1. Extracting gate netlist of module `\full_adder_128' to `<abc-temp-dir>/input.blif'..
Extracted 896 gates and 1153 wires to a netlist network with 257 inputs and 129 outputs.

4.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:      126
ABC RESULTS:              AOI3 cells:      126
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:      125
ABC RESULTS:               NOT cells:      252
ABC RESULTS:              OAI3 cells:        2
ABC RESULTS:                OR cells:        1
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:      126
ABC RESULTS:               XOR cells:      130
ABC RESULTS:        internal signals:      767
ABC RESULTS:           input signals:      257
ABC RESULTS:          output signals:      129
Removing temp directory.

4.24. Executing OPT pass (performing simple optimizations).

4.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_128.

4.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_128'.
Removed a total of 0 cells.

4.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..
Removed 0 unused cells and 1026 unused wires.
<suppressed ~1 debug messages>

4.24.5. Finished fast OPT passes.

4.25. Executing HIERARCHY pass (managing design hierarchy).

4.25.1. Analyzing design hierarchy..
Top module:  \full_adder_128

4.25.2. Analyzing design hierarchy..
Top module:  \full_adder_128
Removed 0 unused modules.

4.26. Printing statistics.

=== full_adder_128 ===

   Number of wires:               1409
   Number of wire bits:           1918
   Number of public wires:         646
   Number of public wire bits:    1155
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                892
     $_ANDNOT_                     126
     $_AND_                          2
     $_AOI3_                       126
     $_NAND_                         1
     $_NOR_                        125
     $_NOT_                        252
     $_OAI3_                         2
     $_ORNOT_                        1
     $_OR_                           1
     $_XNOR_                       126
     $_XOR_                        130

4.27. Executing CHECK pass (checking for obvious problems).
checking module full_adder_128..
found and reported 0 problems.

5. Executing AIGMAP pass (map logic to AIG).
Module full_adder_128: replaced 638 cells with 3070 new cells, skipped 254 cells.
  replaced 9 cell types:
       1 $_NAND_
       1 $_OR_
     125 $_NOR_
     130 $_XOR_
     126 $_XNOR_
     126 $_ANDNOT_
       1 $_ORNOT_
     126 $_AOI3_
       2 $_OAI3_
  not replaced 2 cell types:
     252 $_NOT_
       2 $_AND_

6. Executing AIGER backend.

End of script. Logfile hash: 064e456f9b
CPU: user 2.19s system 0.01s, MEM: 23.73 MB total, 17.50 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 28% 13x opt_clean (0 sec), 14% 7x opt (0 sec), ...
>>> aig writing succeed!
[i] processing /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_128//full_adder_128.aig
resyn runtime: 0
[i] area: 94.1722214743495, gates: 769, depth: 193
mapping runtime: 0

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib outputs/iCell/K3/adder/adder.lib; read_verilog /tmp/9YWLZ3TTZ3.v; write_blif -impltf /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_128//full_adder_128_init.blif;' --

1. Executing Liberty frontend.
Imported 14 cell types from liberty file.

2. Executing Verilog-2005 frontend: /tmp/9YWLZ3TTZ3.v
Parsing Verilog input from `/tmp/9YWLZ3TTZ3.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

3. Executing BLIF backend.

End of script. Logfile hash: 73700ac8d0
CPU: user 0.10s system 0.00s, MEM: 22.02 MB total, 15.00 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 84% 2x read_verilog (0 sec), 8% 2x read_liberty (0 sec), ...

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib stdCellLib/asap7/asap7_75t_L.lib; read_blif /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_128//full_adder_128_init.blif; stat -liberty outputs/iCell/K3/adder/adder.lib; ltp;' --

1. Executing Liberty frontend.
Imported 148 cell types from liberty file.

2. Executing BLIF frontend.

3. Printing statistics.

=== top ===

   Number of wires:               1026
   Number of wire bits:           1026
   Number of public wires:        1026
   Number of public wire bits:    1026
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                769
     AND2x2                          1
     AOI21x1                        97
     INVx1                         130
     NAND2x1                        62
     NAND3x1                        31
     NOR2x1                         33
     NOR3x1                         32
     OAI21x1                        95
     OR2x2                          32
     XNOR2x1                       253
     XOR2x1                          3

   Chip area for module '\top': 94.172220

4. Executing LTP pass (find longest path).

Longest topological path in top (length=0):
    0: \x0

End of script. Logfile hash: ac54ada7fd
CPU: user 0.21s system 0.04s, MEM: 47.66 MB total, 41.00 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 80% 2x read_liberty (0 sec), 16% 2x read_blif (0 sec), ...
>>> initial mapping succeed with area = 94.1722214743495
[i] processing /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_128//full_adder_128.aig
resyn runtime: 0
[i] area: 76.50125816091895, gates: 386, depth: 129
mapping runtime: 0

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib outputs/iCell/K3/adder/ADDER_G2_69_70_420.lib; read_verilog /tmp/WUENTRN15N.v; write_blif -impltf /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_128//full_adder_128_temacle.blif;' --

1. Executing Liberty frontend.
Imported 17 cell types from liberty file.

2. Executing Verilog-2005 frontend: /tmp/WUENTRN15N.v
Parsing Verilog input from `/tmp/WUENTRN15N.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

3. Executing BLIF backend.

End of script. Logfile hash: 59364e58e7
CPU: user 0.05s system 0.01s, MEM: 19.10 MB total, 12.50 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 67% 2x read_verilog (0 sec), 25% 2x read_liberty (0 sec), ...

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib outputs/iCell/K3/adder/ADDER_G2_69_70_420.lib; read_blif /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_128//full_adder_128_temacle.blif; stat -liberty outputs/iCell/K3/adder/ADDER_G2_69_70_420.lib; ltp;' --

1. Executing Liberty frontend.
Imported 17 cell types from liberty file.

2. Executing BLIF frontend.

3. Printing statistics.

=== top ===

   Number of wires:                643
   Number of wire bits:            643
   Number of public wires:         643
   Number of public wire bits:     643
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                386
     ADDER_G0_455_456              128
     ADDER_G2_69_70_420            127
     AOI21x1                         2
     INVx1                         129

   Chip area for module '\top': 76.501260

4. Executing LTP pass (find longest path).

Longest topological path in top (length=129):
    0: \x0
    1: \n259 (via $auto$blifparse.cc:371:parse_blif$3)
    2: \n389 (via $auto$blifparse.cc:371:parse_blif$6)
    3: \n390 (via $auto$blifparse.cc:371:parse_blif$7)
    4: \n391 (via $auto$blifparse.cc:371:parse_blif$8)
    5: \n392 (via $auto$blifparse.cc:371:parse_blif$9)
    6: \n393 (via $auto$blifparse.cc:371:parse_blif$10)
    7: \n394 (via $auto$blifparse.cc:371:parse_blif$11)
    8: \n395 (via $auto$blifparse.cc:371:parse_blif$12)
    9: \n396 (via $auto$blifparse.cc:371:parse_blif$13)
   10: \n397 (via $auto$blifparse.cc:371:parse_blif$14)
   11: \n398 (via $auto$blifparse.cc:371:parse_blif$15)
   12: \n399 (via $auto$blifparse.cc:371:parse_blif$16)
   13: \n400 (via $auto$blifparse.cc:371:parse_blif$17)
   14: \n401 (via $auto$blifparse.cc:371:parse_blif$18)
   15: \n402 (via $auto$blifparse.cc:371:parse_blif$19)
   16: \n403 (via $auto$blifparse.cc:371:parse_blif$20)
   17: \n404 (via $auto$blifparse.cc:371:parse_blif$21)
   18: \n405 (via $auto$blifparse.cc:371:parse_blif$22)
   19: \n406 (via $auto$blifparse.cc:371:parse_blif$23)
   20: \n407 (via $auto$blifparse.cc:371:parse_blif$24)
   21: \n408 (via $auto$blifparse.cc:371:parse_blif$25)
   22: \n409 (via $auto$blifparse.cc:371:parse_blif$26)
   23: \n410 (via $auto$blifparse.cc:371:parse_blif$27)
   24: \n411 (via $auto$blifparse.cc:371:parse_blif$28)
   25: \n412 (via $auto$blifparse.cc:371:parse_blif$29)
   26: \n413 (via $auto$blifparse.cc:371:parse_blif$30)
   27: \n414 (via $auto$blifparse.cc:371:parse_blif$31)
   28: \n415 (via $auto$blifparse.cc:371:parse_blif$32)
   29: \n416 (via $auto$blifparse.cc:371:parse_blif$33)
   30: \n417 (via $auto$blifparse.cc:371:parse_blif$34)
   31: \n418 (via $auto$blifparse.cc:371:parse_blif$35)
   32: \n419 (via $auto$blifparse.cc:371:parse_blif$36)
   33: \n420 (via $auto$blifparse.cc:371:parse_blif$37)
   34: \n421 (via $auto$blifparse.cc:371:parse_blif$38)
   35: \n422 (via $auto$blifparse.cc:371:parse_blif$39)
   36: \n423 (via $auto$blifparse.cc:371:parse_blif$40)
   37: \n424 (via $auto$blifparse.cc:371:parse_blif$41)
   38: \n425 (via $auto$blifparse.cc:371:parse_blif$42)
   39: \n426 (via $auto$blifparse.cc:371:parse_blif$43)
   40: \n427 (via $auto$blifparse.cc:371:parse_blif$44)
   41: \n428 (via $auto$blifparse.cc:371:parse_blif$45)
   42: \n429 (via $auto$blifparse.cc:371:parse_blif$46)
   43: \n430 (via $auto$blifparse.cc:371:parse_blif$47)
   44: \n431 (via $auto$blifparse.cc:371:parse_blif$48)
   45: \n432 (via $auto$blifparse.cc:371:parse_blif$49)
   46: \n433 (via $auto$blifparse.cc:371:parse_blif$50)
   47: \n434 (via $auto$blifparse.cc:371:parse_blif$51)
   48: \n435 (via $auto$blifparse.cc:371:parse_blif$52)
   49: \n436 (via $auto$blifparse.cc:371:parse_blif$53)
   50: \n437 (via $auto$blifparse.cc:371:parse_blif$54)
   51: \n438 (via $auto$blifparse.cc:371:parse_blif$55)
   52: \n439 (via $auto$blifparse.cc:371:parse_blif$56)
   53: \n440 (via $auto$blifparse.cc:371:parse_blif$57)
   54: \n441 (via $auto$blifparse.cc:371:parse_blif$58)
   55: \n442 (via $auto$blifparse.cc:371:parse_blif$59)
   56: \n443 (via $auto$blifparse.cc:371:parse_blif$60)
   57: \n444 (via $auto$blifparse.cc:371:parse_blif$61)
   58: \n445 (via $auto$blifparse.cc:371:parse_blif$62)
   59: \n446 (via $auto$blifparse.cc:371:parse_blif$63)
   60: \n447 (via $auto$blifparse.cc:371:parse_blif$64)
   61: \n448 (via $auto$blifparse.cc:371:parse_blif$65)
   62: \n449 (via $auto$blifparse.cc:371:parse_blif$66)
   63: \n450 (via $auto$blifparse.cc:371:parse_blif$67)
   64: \n451 (via $auto$blifparse.cc:371:parse_blif$68)
   65: \n452 (via $auto$blifparse.cc:371:parse_blif$69)
   66: \n453 (via $auto$blifparse.cc:371:parse_blif$70)
   67: \n454 (via $auto$blifparse.cc:371:parse_blif$71)
   68: \n455 (via $auto$blifparse.cc:371:parse_blif$72)
   69: \n456 (via $auto$blifparse.cc:371:parse_blif$73)
   70: \n457 (via $auto$blifparse.cc:371:parse_blif$74)
   71: \n458 (via $auto$blifparse.cc:371:parse_blif$75)
   72: \n459 (via $auto$blifparse.cc:371:parse_blif$76)
   73: \n460 (via $auto$blifparse.cc:371:parse_blif$77)
   74: \n461 (via $auto$blifparse.cc:371:parse_blif$78)
   75: \n462 (via $auto$blifparse.cc:371:parse_blif$79)
   76: \n463 (via $auto$blifparse.cc:371:parse_blif$80)
   77: \n464 (via $auto$blifparse.cc:371:parse_blif$81)
   78: \n465 (via $auto$blifparse.cc:371:parse_blif$82)
   79: \n466 (via $auto$blifparse.cc:371:parse_blif$83)
   80: \n467 (via $auto$blifparse.cc:371:parse_blif$84)
   81: \n468 (via $auto$blifparse.cc:371:parse_blif$85)
   82: \n469 (via $auto$blifparse.cc:371:parse_blif$86)
   83: \n470 (via $auto$blifparse.cc:371:parse_blif$87)
   84: \n471 (via $auto$blifparse.cc:371:parse_blif$88)
   85: \n472 (via $auto$blifparse.cc:371:parse_blif$89)
   86: \n473 (via $auto$blifparse.cc:371:parse_blif$90)
   87: \n474 (via $auto$blifparse.cc:371:parse_blif$91)
   88: \n475 (via $auto$blifparse.cc:371:parse_blif$92)
   89: \n476 (via $auto$blifparse.cc:371:parse_blif$93)
   90: \n477 (via $auto$blifparse.cc:371:parse_blif$94)
   91: \n478 (via $auto$blifparse.cc:371:parse_blif$95)
   92: \n479 (via $auto$blifparse.cc:371:parse_blif$96)
   93: \n480 (via $auto$blifparse.cc:371:parse_blif$97)
   94: \n481 (via $auto$blifparse.cc:371:parse_blif$98)
   95: \n482 (via $auto$blifparse.cc:371:parse_blif$99)
   96: \n483 (via $auto$blifparse.cc:371:parse_blif$100)
   97: \n484 (via $auto$blifparse.cc:371:parse_blif$101)
   98: \n485 (via $auto$blifparse.cc:371:parse_blif$102)
   99: \n486 (via $auto$blifparse.cc:371:parse_blif$103)
  100: \n487 (via $auto$blifparse.cc:371:parse_blif$104)
  101: \n488 (via $auto$blifparse.cc:371:parse_blif$105)
  102: \n489 (via $auto$blifparse.cc:371:parse_blif$106)
  103: \n490 (via $auto$blifparse.cc:371:parse_blif$107)
  104: \n491 (via $auto$blifparse.cc:371:parse_blif$108)
  105: \n492 (via $auto$blifparse.cc:371:parse_blif$109)
  106: \n493 (via $auto$blifparse.cc:371:parse_blif$110)
  107: \n494 (via $auto$blifparse.cc:371:parse_blif$111)
  108: \n495 (via $auto$blifparse.cc:371:parse_blif$112)
  109: \n496 (via $auto$blifparse.cc:371:parse_blif$113)
  110: \n497 (via $auto$blifparse.cc:371:parse_blif$114)
  111: \n498 (via $auto$blifparse.cc:371:parse_blif$115)
  112: \n499 (via $auto$blifparse.cc:371:parse_blif$116)
  113: \n500 (via $auto$blifparse.cc:371:parse_blif$117)
  114: \n501 (via $auto$blifparse.cc:371:parse_blif$118)
  115: \n502 (via $auto$blifparse.cc:371:parse_blif$119)
  116: \n503 (via $auto$blifparse.cc:371:parse_blif$120)
  117: \n504 (via $auto$blifparse.cc:371:parse_blif$121)
  118: \n505 (via $auto$blifparse.cc:371:parse_blif$122)
  119: \n506 (via $auto$blifparse.cc:371:parse_blif$123)
  120: \n507 (via $auto$blifparse.cc:371:parse_blif$124)
  121: \n508 (via $auto$blifparse.cc:371:parse_blif$125)
  122: \n509 (via $auto$blifparse.cc:371:parse_blif$126)
  123: \n510 (via $auto$blifparse.cc:371:parse_blif$127)
  124: \n511 (via $auto$blifparse.cc:371:parse_blif$128)
  125: \n512 (via $auto$blifparse.cc:371:parse_blif$129)
  126: \n513 (via $auto$blifparse.cc:371:parse_blif$130)
  127: \n514 (via $auto$blifparse.cc:371:parse_blif$131)
  128: \n515 (via $auto$blifparse.cc:371:parse_blif$132)
  129: \y0 (via $auto$blifparse.cc:371:parse_blif$133)

End of script. Logfile hash: 193ead1056
CPU: user 0.03s system 0.00s, MEM: 16.85 MB total, 10.50 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 34% 1x stat (0 sec), 33% 2x read_liberty (0 sec), ...
>>> Temacle mapping succeed with area = 76.50125816091895
full_adder_128 initial mapping area = 94.1722214743495
full_adder_128 Temacle mapping area = 76.50125816091895
full_adder_128 Temacle saveArea = (94.1722214743495 - 76.50125816091895) / 94.1722214743495 = 18.76451785545246 %

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_verilog /home/flynn/workplace/CEMapping/benchmark/adder/full_adder_256.v; hierarchy -top full_adder_256; flatten; synth -top full_adder_256; aigmap; write_aiger /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_256//full_adder_256.aig;' --

1. Executing Verilog-2005 frontend: /home/flynn/workplace/CEMapping/benchmark/adder/full_adder_256.v
Parsing Verilog input from `/home/flynn/workplace/CEMapping/benchmark/adder/full_adder_256.v' to AST representation.
Generating RTLIL representation for module `\full_adder_256'.
Generating RTLIL representation for module `\fullAdder'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \full_adder_256
Used module:     \fullAdder

2.2. Analyzing design hierarchy..
Top module:  \full_adder_256
Used module:     \fullAdder
Removed 0 unused modules.
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[255].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[254].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[253].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[252].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[251].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[250].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[249].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[248].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[247].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[246].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[245].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[244].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[243].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[242].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[241].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[240].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[239].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[238].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[237].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[236].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[235].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[234].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[233].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[232].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[231].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[230].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[229].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[228].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[227].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[226].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[225].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[224].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[223].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[222].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[221].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[220].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[219].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[218].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[217].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[216].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[215].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[214].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[213].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[212].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[211].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[210].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[209].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[208].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[207].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[206].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[205].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[204].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[203].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[202].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[201].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[200].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[199].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[198].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[197].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[196].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[195].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[194].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[193].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[192].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[191].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[190].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[189].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[188].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[187].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[186].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[185].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[184].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[183].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[182].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[181].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[180].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[179].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[178].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[177].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[176].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[175].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[174].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[173].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[172].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[171].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[170].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[169].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[168].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[167].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[166].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[165].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[164].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[163].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[162].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[161].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[160].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[159].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[158].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[157].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[156].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[155].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[154].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[153].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[152].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[151].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[150].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[149].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[148].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[147].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[146].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[145].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[144].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[143].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[142].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[141].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[140].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[139].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[138].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[137].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[136].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[135].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[134].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[133].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[132].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[131].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[130].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[129].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[128].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[127].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[126].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[125].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[124].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[123].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[122].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[121].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[120].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[119].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[118].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[117].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[116].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[115].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[114].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[113].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[112].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[111].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[110].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[109].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[108].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[107].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[106].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[105].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[104].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[103].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[102].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[101].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[100].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[99].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[98].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[97].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[96].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[95].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[94].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[93].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[92].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[91].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[90].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[89].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[88].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[87].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[86].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[85].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[84].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[83].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[82].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[81].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[80].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[79].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[78].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[77].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[76].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[75].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[74].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[73].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[72].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[71].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[70].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[69].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[68].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[67].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[66].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[65].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[64].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[63].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[62].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[61].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[60].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[59].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[58].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[57].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[56].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[55].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[54].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[53].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[52].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[51].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[50].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[49].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[48].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[47].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[46].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[45].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[44].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[43].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[42].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[41].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[40].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[39].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[38].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[37].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[36].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[35].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[34].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[33].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[32].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[31].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[30].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[29].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[28].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[27].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[26].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[25].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[24].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[23].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[22].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[21].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[20].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[19].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[18].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[17].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[16].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[15].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[14].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[13].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[12].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[11].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[10].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[9].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[8].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[7].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[6].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[5].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[4].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[3].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[2].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[1].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[0].f (fullAdder).

3. Executing FLATTEN pass (flatten design).
Using template fullAdder for cells of type fullAdder.
<suppressed ~256 debug messages>
No more expansions possible.
Deleting now unused module fullAdder.

4. Executing SYNTH pass.

4.1. Executing HIERARCHY pass (managing design hierarchy).

4.1.1. Analyzing design hierarchy..
Top module:  \full_adder_256

4.1.2. Analyzing design hierarchy..
Top module:  \full_adder_256
Removed 0 unused modules.

4.2. Executing PROC pass (convert processes to netlists).

4.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.2.3. Executing PROC_INIT pass (extract init attributes).

4.2.4. Executing PROC_ARST pass (detect async resets in processes).

4.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

4.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

4.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_256.

4.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..
Removed 0 unused cells and 512 unused wires.
<suppressed ~1 debug messages>

4.5. Executing CHECK pass (checking for obvious problems).
checking module full_adder_256..
found and reported 0 problems.

4.6. Executing OPT pass (performing simple optimizations).

4.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_256.

4.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_256'.
Removed a total of 0 cells.

4.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_256.
Performed a total of 0 changes.

4.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_256'.
Removed a total of 0 cells.

4.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..

4.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_256.

4.6.9. Finished OPT passes. (There is nothing left to do.)

4.7. Executing WREDUCE pass (reducing word size of cells).

4.8. Executing PEEPOPT pass (run peephole optimizers).

4.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..

4.10. Executing TECHMAP pass (map to technology primitives).

4.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

4.10.2. Continuing TECHMAP pass.
No more expansions possible.

4.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module full_adder_256:
  created 0 $alu and 0 $macc cells.

4.12. Executing SHARE pass (SAT-based resource sharing).

4.13. Executing OPT pass (performing simple optimizations).

4.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_256.

4.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_256'.
Removed a total of 0 cells.

4.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_256.
Performed a total of 0 changes.

4.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_256'.
Removed a total of 0 cells.

4.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..

4.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_256.

4.13.9. Finished OPT passes. (There is nothing left to do.)

4.14. Executing FSM pass (extract and optimize FSM).

4.14.1. Executing FSM_DETECT pass (finding FSMs in design).

4.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..

4.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.15. Executing OPT pass (performing simple optimizations).

4.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_256.

4.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_256'.
Removed a total of 0 cells.

4.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..

4.15.5. Finished fast OPT passes.

4.16. Executing MEMORY pass.

4.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

4.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..

4.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..

4.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

4.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..

4.18. Executing OPT pass (performing simple optimizations).

4.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_256.

4.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_256'.
Removed a total of 0 cells.

4.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..

4.18.5. Finished fast OPT passes.

4.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

4.20. Executing OPT pass (performing simple optimizations).

4.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_256.

4.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_256'.
Removed a total of 0 cells.

4.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_256.
Performed a total of 0 changes.

4.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_256'.
Removed a total of 0 cells.

4.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..

4.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_256.

4.20.9. Finished OPT passes. (There is nothing left to do.)

4.21. Executing TECHMAP pass (map to technology primitives).

4.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
No more expansions possible.
<suppressed ~1792 debug messages>

4.22. Executing OPT pass (performing simple optimizations).

4.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_256.

4.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_256'.
Removed a total of 0 cells.

4.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..

4.22.5. Finished fast OPT passes.

4.23. Executing ABC pass (technology mapping using ABC).

4.23.1. Extracting gate netlist of module `\full_adder_256' to `<abc-temp-dir>/input.blif'..
Extracted 1792 gates and 2305 wires to a netlist network with 513 inputs and 257 outputs.

4.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:      254
ABC RESULTS:              AOI3 cells:      254
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:      253
ABC RESULTS:               NOT cells:      508
ABC RESULTS:              OAI3 cells:        2
ABC RESULTS:                OR cells:        1
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:      254
ABC RESULTS:               XOR cells:      258
ABC RESULTS:        internal signals:     1535
ABC RESULTS:           input signals:      513
ABC RESULTS:          output signals:      257
Removing temp directory.

4.24. Executing OPT pass (performing simple optimizations).

4.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_256.

4.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_256'.
Removed a total of 0 cells.

4.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..
Removed 0 unused cells and 2050 unused wires.
<suppressed ~1 debug messages>

4.24.5. Finished fast OPT passes.

4.25. Executing HIERARCHY pass (managing design hierarchy).

4.25.1. Analyzing design hierarchy..
Top module:  \full_adder_256

4.25.2. Analyzing design hierarchy..
Top module:  \full_adder_256
Removed 0 unused modules.

4.26. Printing statistics.

=== full_adder_256 ===

   Number of wires:               2817
   Number of wire bits:           3838
   Number of public wires:        1286
   Number of public wire bits:    2307
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1788
     $_ANDNOT_                     254
     $_AND_                          2
     $_AOI3_                       254
     $_NAND_                         1
     $_NOR_                        253
     $_NOT_                        508
     $_OAI3_                         2
     $_ORNOT_                        1
     $_OR_                           1
     $_XNOR_                       254
     $_XOR_                        258

4.27. Executing CHECK pass (checking for obvious problems).
checking module full_adder_256..
found and reported 0 problems.

5. Executing AIGMAP pass (map logic to AIG).
Module full_adder_256: replaced 1278 cells with 6142 new cells, skipped 510 cells.
  replaced 9 cell types:
       1 $_NAND_
       1 $_OR_
     253 $_NOR_
     258 $_XOR_
     254 $_XNOR_
     254 $_ANDNOT_
       1 $_ORNOT_
     254 $_AOI3_
       2 $_OAI3_
  not replaced 2 cell types:
     508 $_NOT_
       2 $_AND_

6. Executing AIGER backend.

End of script. Logfile hash: d77eb44b93
CPU: user 3.41s system 0.03s, MEM: 30.90 MB total, 24.48 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 28% 13x opt_clean (0 sec), 13% 11x opt_expr (0 sec), ...
>>> aig writing succeed!
[i] processing /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_256//full_adder_256.aig
resyn runtime: 0
[i] area: 188.41734295338392, gates: 1537, depth: 385
mapping runtime: 0

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib outputs/iCell/K3/adder/adder.lib; read_verilog /tmp/Y2CKEAFFSI.v; write_blif -impltf /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_256//full_adder_256_init.blif;' --

1. Executing Liberty frontend.
Imported 14 cell types from liberty file.

2. Executing Verilog-2005 frontend: /tmp/Y2CKEAFFSI.v
Parsing Verilog input from `/tmp/Y2CKEAFFSI.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

3. Executing BLIF backend.

End of script. Logfile hash: 24aec2c30a
CPU: user 0.16s system 0.01s, MEM: 28.56 MB total, 22.00 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 83% 2x read_verilog (0 sec), 8% 2x write_blif (0 sec), ...

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib stdCellLib/asap7/asap7_75t_L.lib; read_blif /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_256//full_adder_256_init.blif; stat -liberty outputs/iCell/K3/adder/adder.lib; ltp;' --

1. Executing Liberty frontend.
Imported 148 cell types from liberty file.

2. Executing BLIF frontend.

3. Printing statistics.

=== top ===

   Number of wires:               2050
   Number of wire bits:           2050
   Number of public wires:        2050
   Number of public wire bits:    2050
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1537
     AND2x2                          1
     AOI21x1                       193
     INVx1                         258
     NAND2x1                       126
     NAND3x1                        63
     NOR2x1                         65
     NOR3x1                         64
     OAI21x1                       191
     OR2x2                          64
     XNOR2x1                       509
     XOR2x1                          3

   Chip area for module '\top': 188.417340

4. Executing LTP pass (find longest path).

Longest topological path in top (length=0):
    0: \x0

End of script. Logfile hash: f9c353eac0
CPU: user 0.24s system 0.01s, MEM: 47.66 MB total, 41.00 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 78% 2x read_liberty (0 sec), 17% 2x read_blif (0 sec), ...
>>> initial mapping succeed with area = 188.41734295338392
[i] processing /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_256//full_adder_256.aig
resyn runtime: 0
[i] area: 153.01709630712867, gates: 770, depth: 257
mapping runtime: 0

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib outputs/iCell/K3/adder/ADDER_G2_69_70_420.lib; read_verilog /tmp/94EMOAZCBO.v; write_blif -impltf /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_256//full_adder_256_temacle.blif;' --

1. Executing Liberty frontend.
Imported 17 cell types from liberty file.

2. Executing Verilog-2005 frontend: /tmp/94EMOAZCBO.v
Parsing Verilog input from `/tmp/94EMOAZCBO.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

3. Executing BLIF backend.

End of script. Logfile hash: 7717f68501
CPU: user 0.09s system 0.01s, MEM: 22.69 MB total, 16.00 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 77% 2x read_verilog (0 sec), 12% 2x read_liberty (0 sec), ...

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib outputs/iCell/K3/adder/ADDER_G2_69_70_420.lib; read_blif /home/flynn/workplace/CEMapping/outputs/iCell/adder/full_adder_256//full_adder_256_temacle.blif; stat -liberty outputs/iCell/K3/adder/ADDER_G2_69_70_420.lib; ltp;' --

1. Executing Liberty frontend.
Imported 17 cell types from liberty file.

2. Executing BLIF frontend.

3. Printing statistics.

=== top ===

   Number of wires:               1283
   Number of wire bits:           1283
   Number of public wires:        1283
   Number of public wire bits:    1283
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                770
     ADDER_G0_455_456              256
     ADDER_G2_69_70_420            255
     AOI21x1                         2
     INVx1                         257

   Chip area for module '\top': 153.017100

4. Executing LTP pass (find longest path).

Longest topological path in top (length=257):
    0: \x0
    1: \n515 (via $auto$blifparse.cc:371:parse_blif$3)
    2: \n773 (via $auto$blifparse.cc:371:parse_blif$6)
    3: \n774 (via $auto$blifparse.cc:371:parse_blif$7)
    4: \n775 (via $auto$blifparse.cc:371:parse_blif$8)
    5: \n776 (via $auto$blifparse.cc:371:parse_blif$9)
    6: \n777 (via $auto$blifparse.cc:371:parse_blif$10)
    7: \n778 (via $auto$blifparse.cc:371:parse_blif$11)
    8: \n779 (via $auto$blifparse.cc:371:parse_blif$12)
    9: \n780 (via $auto$blifparse.cc:371:parse_blif$13)
   10: \n781 (via $auto$blifparse.cc:371:parse_blif$14)
   11: \n782 (via $auto$blifparse.cc:371:parse_blif$15)
   12: \n783 (via $auto$blifparse.cc:371:parse_blif$16)
   13: \n784 (via $auto$blifparse.cc:371:parse_blif$17)
   14: \n785 (via $auto$blifparse.cc:371:parse_blif$18)
   15: \n786 (via $auto$blifparse.cc:371:parse_blif$19)
   16: \n787 (via $auto$blifparse.cc:371:parse_blif$20)
   17: \n788 (via $auto$blifparse.cc:371:parse_blif$21)
   18: \n789 (via $auto$blifparse.cc:371:parse_blif$22)
   19: \n790 (via $auto$blifparse.cc:371:parse_blif$23)
   20: \n791 (via $auto$blifparse.cc:371:parse_blif$24)
   21: \n792 (via $auto$blifparse.cc:371:parse_blif$25)
   22: \n793 (via $auto$blifparse.cc:371:parse_blif$26)
   23: \n794 (via $auto$blifparse.cc:371:parse_blif$27)
   24: \n795 (via $auto$blifparse.cc:371:parse_blif$28)
   25: \n796 (via $auto$blifparse.cc:371:parse_blif$29)
   26: \n797 (via $auto$blifparse.cc:371:parse_blif$30)
   27: \n798 (via $auto$blifparse.cc:371:parse_blif$31)
   28: \n799 (via $auto$blifparse.cc:371:parse_blif$32)
   29: \n800 (via $auto$blifparse.cc:371:parse_blif$33)
   30: \n801 (via $auto$blifparse.cc:371:parse_blif$34)
   31: \n802 (via $auto$blifparse.cc:371:parse_blif$35)
   32: \n803 (via $auto$blifparse.cc:371:parse_blif$36)
   33: \n804 (via $auto$blifparse.cc:371:parse_blif$37)
   34: \n805 (via $auto$blifparse.cc:371:parse_blif$38)
   35: \n806 (via $auto$blifparse.cc:371:parse_blif$39)
   36: \n807 (via $auto$blifparse.cc:371:parse_blif$40)
   37: \n808 (via $auto$blifparse.cc:371:parse_blif$41)
   38: \n809 (via $auto$blifparse.cc:371:parse_blif$42)
   39: \n810 (via $auto$blifparse.cc:371:parse_blif$43)
   40: \n811 (via $auto$blifparse.cc:371:parse_blif$44)
   41: \n812 (via $auto$blifparse.cc:371:parse_blif$45)
   42: \n813 (via $auto$blifparse.cc:371:parse_blif$46)
   43: \n814 (via $auto$blifparse.cc:371:parse_blif$47)
   44: \n815 (via $auto$blifparse.cc:371:parse_blif$48)
   45: \n816 (via $auto$blifparse.cc:371:parse_blif$49)
   46: \n817 (via $auto$blifparse.cc:371:parse_blif$50)
   47: \n818 (via $auto$blifparse.cc:371:parse_blif$51)
   48: \n819 (via $auto$blifparse.cc:371:parse_blif$52)
   49: \n820 (via $auto$blifparse.cc:371:parse_blif$53)
   50: \n821 (via $auto$blifparse.cc:371:parse_blif$54)
   51: \n822 (via $auto$blifparse.cc:371:parse_blif$55)
   52: \n823 (via $auto$blifparse.cc:371:parse_blif$56)
   53: \n824 (via $auto$blifparse.cc:371:parse_blif$57)
   54: \n825 (via $auto$blifparse.cc:371:parse_blif$58)
   55: \n826 (via $auto$blifparse.cc:371:parse_blif$59)
   56: \n827 (via $auto$blifparse.cc:371:parse_blif$60)
   57: \n828 (via $auto$blifparse.cc:371:parse_blif$61)
   58: \n829 (via $auto$blifparse.cc:371:parse_blif$62)
   59: \n830 (via $auto$blifparse.cc:371:parse_blif$63)
   60: \n831 (via $auto$blifparse.cc:371:parse_blif$64)
   61: \n832 (via $auto$blifparse.cc:371:parse_blif$65)
   62: \n833 (via $auto$blifparse.cc:371:parse_blif$66)
   63: \n834 (via $auto$blifparse.cc:371:parse_blif$67)
   64: \n835 (via $auto$blifparse.cc:371:parse_blif$68)
   65: \n836 (via $auto$blifparse.cc:371:parse_blif$69)
   66: \n837 (via $auto$blifparse.cc:371:parse_blif$70)
   67: \n838 (via $auto$blifparse.cc:371:parse_blif$71)
   68: \n839 (via $auto$blifparse.cc:371:parse_blif$72)
   69: \n840 (via $auto$blifparse.cc:371:parse_blif$73)
   70: \n841 (via $auto$blifparse.cc:371:parse_blif$74)
   71: \n842 (via $auto$blifparse.cc:371:parse_blif$75)
   72: \n843 (via $auto$blifparse.cc:371:parse_blif$76)
   73: \n844 (via $auto$blifparse.cc:371:parse_blif$77)
   74: \n845 (via $auto$blifparse.cc:371:parse_blif$78)
   75: \n846 (via $auto$blifparse.cc:371:parse_blif$79)
   76: \n847 (via $auto$blifparse.cc:371:parse_blif$80)
   77: \n848 (via $auto$blifparse.cc:371:parse_blif$81)
   78: \n849 (via $auto$blifparse.cc:371:parse_blif$82)
   79: \n850 (via $auto$blifparse.cc:371:parse_blif$83)
   80: \n851 (via $auto$blifparse.cc:371:parse_blif$84)
   81: \n852 (via $auto$blifparse.cc:371:parse_blif$85)
   82: \n853 (via $auto$blifparse.cc:371:parse_blif$86)
   83: \n854 (via $auto$blifparse.cc:371:parse_blif$87)
   84: \n855 (via $auto$blifparse.cc:371:parse_blif$88)
   85: \n856 (via $auto$blifparse.cc:371:parse_blif$89)
   86: \n857 (via $auto$blifparse.cc:371:parse_blif$90)
   87: \n858 (via $auto$blifparse.cc:371:parse_blif$91)
   88: \n859 (via $auto$blifparse.cc:371:parse_blif$92)
   89: \n860 (via $auto$blifparse.cc:371:parse_blif$93)
   90: \n861 (via $auto$blifparse.cc:371:parse_blif$94)
   91: \n862 (via $auto$blifparse.cc:371:parse_blif$95)
   92: \n863 (via $auto$blifparse.cc:371:parse_blif$96)
   93: \n864 (via $auto$blifparse.cc:371:parse_blif$97)
   94: \n865 (via $auto$blifparse.cc:371:parse_blif$98)
   95: \n866 (via $auto$blifparse.cc:371:parse_blif$99)
   96: \n867 (via $auto$blifparse.cc:371:parse_blif$100)
   97: \n868 (via $auto$blifparse.cc:371:parse_blif$101)
   98: \n869 (via $auto$blifparse.cc:371:parse_blif$102)
   99: \n870 (via $auto$blifparse.cc:371:parse_blif$103)
  100: \n871 (via $auto$blifparse.cc:371:parse_blif$104)
  101: \n872 (via $auto$blifparse.cc:371:parse_blif$105)
  102: \n873 (via $auto$blifparse.cc:371:parse_blif$106)
  103: \n874 (via $auto$blifparse.cc:371:parse_blif$107)
  104: \n875 (via $auto$blifparse.cc:371:parse_blif$108)
  105: \n876 (via $auto$blifparse.cc:371:parse_blif$109)
  106: \n877 (via $auto$blifparse.cc:371:parse_blif$110)
  107: \n878 (via $auto$blifparse.cc:371:parse_blif$111)
  108: \n879 (via $auto$blifparse.cc:371:parse_blif$112)
  109: \n880 (via $auto$blifparse.cc:371:parse_blif$113)
  110: \n881 (via $auto$blifparse.cc:371:parse_blif$114)
  111: \n882 (via $auto$blifparse.cc:371:parse_blif$115)
  112: \n883 (via $auto$blifparse.cc:371:parse_blif$116)
  113: \n884 (via $auto$blifparse.cc:371:parse_blif$117)
  114: \n885 (via $auto$blifparse.cc:371:parse_blif$118)
  115: \n886 (via $auto$blifparse.cc:371:parse_blif$119)
  116: \n887 (via $auto$blifparse.cc:371:parse_blif$120)
  117: \n888 (via $auto$blifparse.cc:371:parse_blif$121)
  118: \n889 (via $auto$blifparse.cc:371:parse_blif$122)
  119: \n890 (via $auto$blifparse.cc:371:parse_blif$123)
  120: \n891 (via $auto$blifparse.cc:371:parse_blif$124)
  121: \n892 (via $auto$blifparse.cc:371:parse_blif$125)
  122: \n893 (via $auto$blifparse.cc:371:parse_blif$126)
  123: \n894 (via $auto$blifparse.cc:371:parse_blif$127)
  124: \n895 (via $auto$blifparse.cc:371:parse_blif$128)
  125: \n896 (via $auto$blifparse.cc:371:parse_blif$129)
  126: \n897 (via $auto$blifparse.cc:371:parse_blif$130)
  127: \n898 (via $auto$blifparse.cc:371:parse_blif$131)
  128: \n899 (via $auto$blifparse.cc:371:parse_blif$132)
  129: \n900 (via $auto$blifparse.cc:371:parse_blif$133)
  130: \n901 (via $auto$blifparse.cc:371:parse_blif$134)
  131: \n902 (via $auto$blifparse.cc:371:parse_blif$135)
  132: \n903 (via $auto$blifparse.cc:371:parse_blif$136)
  133: \n904 (via $auto$blifparse.cc:371:parse_blif$137)
  134: \n905 (via $auto$blifparse.cc:371:parse_blif$138)
  135: \n906 (via $auto$blifparse.cc:371:parse_blif$139)
  136: \n907 (via $auto$blifparse.cc:371:parse_blif$140)
  137: \n908 (via $auto$blifparse.cc:371:parse_blif$141)
  138: \n909 (via $auto$blifparse.cc:371:parse_blif$142)
  139: \n910 (via $auto$blifparse.cc:371:parse_blif$143)
  140: \n911 (via $auto$blifparse.cc:371:parse_blif$144)
  141: \n912 (via $auto$blifparse.cc:371:parse_blif$145)
  142: \n913 (via $auto$blifparse.cc:371:parse_blif$146)
  143: \n914 (via $auto$blifparse.cc:371:parse_blif$147)
  144: \n915 (via $auto$blifparse.cc:371:parse_blif$148)
  145: \n916 (via $auto$blifparse.cc:371:parse_blif$149)
  146: \n917 (via $auto$blifparse.cc:371:parse_blif$150)
  147: \n918 (via $auto$blifparse.cc:371:parse_blif$151)
  148: \n919 (via $auto$blifparse.cc:371:parse_blif$152)
  149: \n920 (via $auto$blifparse.cc:371:parse_blif$153)
  150: \n921 (via $auto$blifparse.cc:371:parse_blif$154)
  151: \n922 (via $auto$blifparse.cc:371:parse_blif$155)
  152: \n923 (via $auto$blifparse.cc:371:parse_blif$156)
  153: \n924 (via $auto$blifparse.cc:371:parse_blif$157)
  154: \n925 (via $auto$blifparse.cc:371:parse_blif$158)
  155: \n926 (via $auto$blifparse.cc:371:parse_blif$159)
  156: \n927 (via $auto$blifparse.cc:371:parse_blif$160)
  157: \n928 (via $auto$blifparse.cc:371:parse_blif$161)
  158: \n929 (via $auto$blifparse.cc:371:parse_blif$162)
  159: \n930 (via $auto$blifparse.cc:371:parse_blif$163)
  160: \n931 (via $auto$blifparse.cc:371:parse_blif$164)
  161: \n932 (via $auto$blifparse.cc:371:parse_blif$165)
  162: \n933 (via $auto$blifparse.cc:371:parse_blif$166)
  163: \n934 (via $auto$blifparse.cc:371:parse_blif$167)
  164: \n935 (via $auto$blifparse.cc:371:parse_blif$168)
  165: \n936 (via $auto$blifparse.cc:371:parse_blif$169)
  166: \n937 (via $auto$blifparse.cc:371:parse_blif$170)
  167: \n938 (via $auto$blifparse.cc:371:parse_blif$171)
  168: \n939 (via $auto$blifparse.cc:371:parse_blif$172)
  169: \n940 (via $auto$blifparse.cc:371:parse_blif$173)
  170: \n941 (via $auto$blifparse.cc:371:parse_blif$174)
  171: \n942 (via $auto$blifparse.cc:371:parse_blif$175)
  172: \n943 (via $auto$blifparse.cc:371:parse_blif$176)
  173: \n944 (via $auto$blifparse.cc:371:parse_blif$177)
  174: \n945 (via $auto$blifparse.cc:371:parse_blif$178)
  175: \n946 (via $auto$blifparse.cc:371:parse_blif$179)
  176: \n947 (via $auto$blifparse.cc:371:parse_blif$180)
  177: \n948 (via $auto$blifparse.cc:371:parse_blif$181)
  178: \n949 (via $auto$blifparse.cc:371:parse_blif$182)
  179: \n950 (via $auto$blifparse.cc:371:parse_blif$183)
  180: \n951 (via $auto$blifparse.cc:371:parse_blif$184)
  181: \n952 (via $auto$blifparse.cc:371:parse_blif$185)
  182: \n953 (via $auto$blifparse.cc:371:parse_blif$186)
  183: \n954 (via $auto$blifparse.cc:371:parse_blif$187)
  184: \n955 (via $auto$blifparse.cc:371:parse_blif$188)
  185: \n956 (via $auto$blifparse.cc:371:parse_blif$189)
  186: \n957 (via $auto$blifparse.cc:371:parse_blif$190)
  187: \n958 (via $auto$blifparse.cc:371:parse_blif$191)
  188: \n959 (via $auto$blifparse.cc:371:parse_blif$192)
  189: \n960 (via $auto$blifparse.cc:371:parse_blif$193)
  190: \n961 (via $auto$blifparse.cc:371:parse_blif$194)
  191: \n962 (via $auto$blifparse.cc:371:parse_blif$195)
  192: \n963 (via $auto$blifparse.cc:371:parse_blif$196)
  193: \n964 (via $auto$blifparse.cc:371:parse_blif$197)
  194: \n965 (via $auto$blifparse.cc:371:parse_blif$198)
  195: \n966 (via $auto$blifparse.cc:371:parse_blif$199)
  196: \n967 (via $auto$blifparse.cc:371:parse_blif$200)
  197: \n968 (via $auto$blifparse.cc:371:parse_blif$201)
  198: \n969 (via $auto$blifparse.cc:371:parse_blif$202)
  199: \n970 (via $auto$blifparse.cc:371:parse_blif$203)
  200: \n971 (via $auto$blifparse.cc:371:parse_blif$204)
  201: \n972 (via $auto$blifparse.cc:371:parse_blif$205)
  202: \n973 (via $auto$blifparse.cc:371:parse_blif$206)
  203: \n974 (via $auto$blifparse.cc:371:parse_blif$207)
  204: \n975 (via $auto$blifparse.cc:371:parse_blif$208)
  205: \n976 (via $auto$blifparse.cc:371:parse_blif$209)
  206: \n977 (via $auto$blifparse.cc:371:parse_blif$210)
  207: \n978 (via $auto$blifparse.cc:371:parse_blif$211)
  208: \n979 (via $auto$blifparse.cc:371:parse_blif$212)
  209: \n980 (via $auto$blifparse.cc:371:parse_blif$213)
  210: \n981 (via $auto$blifparse.cc:371:parse_blif$214)
  211: \n982 (via $auto$blifparse.cc:371:parse_blif$215)
  212: \n983 (via $auto$blifparse.cc:371:parse_blif$216)
  213: \n984 (via $auto$blifparse.cc:371:parse_blif$217)
  214: \n985 (via $auto$blifparse.cc:371:parse_blif$218)
  215: \n986 (via $auto$blifparse.cc:371:parse_blif$219)
  216: \n987 (via $auto$blifparse.cc:371:parse_blif$220)
  217: \n988 (via $auto$blifparse.cc:371:parse_blif$221)
  218: \n989 (via $auto$blifparse.cc:371:parse_blif$222)
  219: \n990 (via $auto$blifparse.cc:371:parse_blif$223)
  220: \n991 (via $auto$blifparse.cc:371:parse_blif$224)
  221: \n992 (via $auto$blifparse.cc:371:parse_blif$225)
  222: \n993 (via $auto$blifparse.cc:371:parse_blif$226)
  223: \n994 (via $auto$blifparse.cc:371:parse_blif$227)
  224: \n995 (via $auto$blifparse.cc:371:parse_blif$228)
  225: \n996 (via $auto$blifparse.cc:371:parse_blif$229)
  226: \n997 (via $auto$blifparse.cc:371:parse_blif$230)
  227: \n998 (via $auto$blifparse.cc:371:parse_blif$231)
  228: \n999 (via $auto$blifparse.cc:371:parse_blif$232)
  229: \n1000 (via $auto$blifparse.cc:371:parse_blif$233)
  230: \n1001 (via $auto$blifparse.cc:371:parse_blif$234)
  231: \n1002 (via $auto$blifparse.cc:371:parse_blif$235)
  232: \n1003 (via $auto$blifparse.cc:371:parse_blif$236)
  233: \n1004 (via $auto$blifparse.cc:371:parse_blif$237)
  234: \n1005 (via $auto$blifparse.cc:371:parse_blif$238)
  235: \n1006 (via $auto$blifparse.cc:371:parse_blif$239)
  236: \n1007 (via $auto$blifparse.cc:371:parse_blif$240)
  237: \n1008 (via $auto$blifparse.cc:371:parse_blif$241)
  238: \n1009 (via $auto$blifparse.cc:371:parse_blif$242)
  239: \n1010 (via $auto$blifparse.cc:371:parse_blif$243)
  240: \n1011 (via $auto$blifparse.cc:371:parse_blif$244)
  241: \n1012 (via $auto$blifparse.cc:371:parse_blif$245)
  242: \n1013 (via $auto$blifparse.cc:371:parse_blif$246)
  243: \n1014 (via $auto$blifparse.cc:371:parse_blif$247)
  244: \n1015 (via $auto$blifparse.cc:371:parse_blif$248)
  245: \n1016 (via $auto$blifparse.cc:371:parse_blif$249)
  246: \n1017 (via $auto$blifparse.cc:371:parse_blif$250)
  247: \n1018 (via $auto$blifparse.cc:371:parse_blif$251)
  248: \n1019 (via $auto$blifparse.cc:371:parse_blif$252)
  249: \n1020 (via $auto$blifparse.cc:371:parse_blif$253)
  250: \n1021 (via $auto$blifparse.cc:371:parse_blif$254)
  251: \n1022 (via $auto$blifparse.cc:371:parse_blif$255)
  252: \n1023 (via $auto$blifparse.cc:371:parse_blif$256)
  253: \n1024 (via $auto$blifparse.cc:371:parse_blif$257)
  254: \n1025 (via $auto$blifparse.cc:371:parse_blif$258)
  255: \n1026 (via $auto$blifparse.cc:371:parse_blif$259)
  256: \n1027 (via $auto$blifparse.cc:371:parse_blif$260)
  257: \y0 (via $auto$blifparse.cc:371:parse_blif$261)

End of script. Logfile hash: dc9345690d
CPU: user 0.03s system 0.01s, MEM: 17.32 MB total, 11.00 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 26% 2x read_liberty (0 sec), 26% 1x stat (0 sec), ...
>>> Temacle mapping succeed with area = 153.01709630712867
full_adder_256 initial mapping area = 188.41734295338392
full_adder_256 Temacle mapping area = 153.01709630712867
full_adder_256 Temacle saveArea = (188.41734295338392 - 153.01709630712867) / 188.41734295338392 = 18.7882103055734 %
