
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_verilog /home/flynn/workplace/CEMapping/benchmark/adder/full_adder_16.v; hierarchy -top full_adder_16; flatten; synth -top full_adder_16; aigmap; write_aiger /home/flynn/workplace/CEMapping/outputs/Astran/adder/full_adder_16//full_adder_16.aig;' --

1. Executing Verilog-2005 frontend: /home/flynn/workplace/CEMapping/benchmark/adder/full_adder_16.v
Parsing Verilog input from `/home/flynn/workplace/CEMapping/benchmark/adder/full_adder_16.v' to AST representation.
Generating RTLIL representation for module `\full_adder_16'.
Generating RTLIL representation for module `\fullAdder'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \full_adder_16
Used module:     \fullAdder

2.2. Analyzing design hierarchy..
Top module:  \full_adder_16
Used module:     \fullAdder
Removed 0 unused modules.
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[15].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[14].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[13].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[12].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[11].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[10].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[9].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[8].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[7].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[6].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[5].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[4].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[3].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[2].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[1].f (fullAdder).
Mapping positional arguments of cell full_adder_16.generate_N_bit_Adder[0].f (fullAdder).

3. Executing FLATTEN pass (flatten design).
Using template fullAdder for cells of type fullAdder.
<suppressed ~16 debug messages>
No more expansions possible.
Deleting now unused module fullAdder.

4. Executing SYNTH pass.

4.1. Executing HIERARCHY pass (managing design hierarchy).

4.1.1. Analyzing design hierarchy..
Top module:  \full_adder_16

4.1.2. Analyzing design hierarchy..
Top module:  \full_adder_16
Removed 0 unused modules.

4.2. Executing PROC pass (convert processes to netlists).

4.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.2.3. Executing PROC_INIT pass (extract init attributes).

4.2.4. Executing PROC_ARST pass (detect async resets in processes).

4.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

4.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

4.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_16.

4.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..
Removed 0 unused cells and 32 unused wires.
<suppressed ~1 debug messages>

4.5. Executing CHECK pass (checking for obvious problems).
checking module full_adder_16..
found and reported 0 problems.

4.6. Executing OPT pass (performing simple optimizations).

4.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_16.

4.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_16'.
Removed a total of 0 cells.

4.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_16.
Performed a total of 0 changes.

4.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_16'.
Removed a total of 0 cells.

4.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..

4.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_16.

4.6.9. Finished OPT passes. (There is nothing left to do.)

4.7. Executing WREDUCE pass (reducing word size of cells).

4.8. Executing PEEPOPT pass (run peephole optimizers).

4.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..

4.10. Executing TECHMAP pass (map to technology primitives).

4.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

4.10.2. Continuing TECHMAP pass.
No more expansions possible.

4.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module full_adder_16:
  created 0 $alu and 0 $macc cells.

4.12. Executing SHARE pass (SAT-based resource sharing).

4.13. Executing OPT pass (performing simple optimizations).

4.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_16.

4.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_16'.
Removed a total of 0 cells.

4.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_16.
Performed a total of 0 changes.

4.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_16'.
Removed a total of 0 cells.

4.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..

4.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_16.

4.13.9. Finished OPT passes. (There is nothing left to do.)

4.14. Executing FSM pass (extract and optimize FSM).

4.14.1. Executing FSM_DETECT pass (finding FSMs in design).

4.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..

4.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.15. Executing OPT pass (performing simple optimizations).

4.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_16.

4.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_16'.
Removed a total of 0 cells.

4.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..

4.15.5. Finished fast OPT passes.

4.16. Executing MEMORY pass.

4.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

4.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..

4.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..

4.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

4.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..

4.18. Executing OPT pass (performing simple optimizations).

4.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_16.

4.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_16'.
Removed a total of 0 cells.

4.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..

4.18.5. Finished fast OPT passes.

4.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

4.20. Executing OPT pass (performing simple optimizations).

4.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_16.

4.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_16'.
Removed a total of 0 cells.

4.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_16.
Performed a total of 0 changes.

4.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_16'.
Removed a total of 0 cells.

4.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..

4.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_16.

4.20.9. Finished OPT passes. (There is nothing left to do.)

4.21. Executing TECHMAP pass (map to technology primitives).

4.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
No more expansions possible.
<suppressed ~112 debug messages>

4.22. Executing OPT pass (performing simple optimizations).

4.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_16.

4.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_16'.
Removed a total of 0 cells.

4.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..

4.22.5. Finished fast OPT passes.

4.23. Executing ABC pass (technology mapping using ABC).

4.23.1. Extracting gate netlist of module `\full_adder_16' to `<abc-temp-dir>/input.blif'..
Extracted 112 gates and 145 wires to a netlist network with 33 inputs and 17 outputs.

4.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:       14
ABC RESULTS:              AOI3 cells:       14
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:       13
ABC RESULTS:               NOT cells:       28
ABC RESULTS:              OAI3 cells:        2
ABC RESULTS:                OR cells:        1
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:       14
ABC RESULTS:               XOR cells:       18
ABC RESULTS:        internal signals:       95
ABC RESULTS:           input signals:       33
ABC RESULTS:          output signals:       17
Removing temp directory.

4.24. Executing OPT pass (performing simple optimizations).

4.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_16.

4.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_16'.
Removed a total of 0 cells.

4.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_16..
Removed 0 unused cells and 130 unused wires.
<suppressed ~1 debug messages>

4.24.5. Finished fast OPT passes.

4.25. Executing HIERARCHY pass (managing design hierarchy).

4.25.1. Analyzing design hierarchy..
Top module:  \full_adder_16

4.25.2. Analyzing design hierarchy..
Top module:  \full_adder_16
Removed 0 unused modules.

4.26. Printing statistics.

=== full_adder_16 ===

   Number of wires:                177
   Number of wire bits:            238
   Number of public wires:          86
   Number of public wire bits:     147
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                108
     $_ANDNOT_                      14
     $_AND_                          2
     $_AOI3_                        14
     $_NAND_                         1
     $_NOR_                         13
     $_NOT_                         28
     $_OAI3_                         2
     $_ORNOT_                        1
     $_OR_                           1
     $_XNOR_                        14
     $_XOR_                         18

4.27. Executing CHECK pass (checking for obvious problems).
checking module full_adder_16..
found and reported 0 problems.

5. Executing AIGMAP pass (map logic to AIG).
Module full_adder_16: replaced 78 cells with 382 new cells, skipped 30 cells.
  replaced 9 cell types:
       1 $_NAND_
       1 $_OR_
      13 $_NOR_
      18 $_XOR_
      14 $_XNOR_
      14 $_ANDNOT_
       1 $_ORNOT_
      14 $_AOI3_
       2 $_OAI3_
  not replaced 2 cell types:
      28 $_NOT_
       2 $_AND_

6. Executing AIGER backend.

End of script. Logfile hash: 26e8e72a81
CPU: user 0.16s system 0.01s, MEM: 17.29 MB total, 11.50 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 22% 13x opt_clean (0 sec), 12% 11x opt_expr (0 sec), ...
>>> aig writing succeed!
[i] processing /home/flynn/workplace/CEMapping/outputs/Astran/adder/full_adder_16//full_adder_16.aig
resyn runtime: 0
[i] area: 297.0668922662735, gates: 96, depth: 25
mapping runtime: 0

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib outputs/Astran/K3/0.05_5/adder/adder.lib; read_verilog /tmp/UQZ7RNDROE.v; write_blif -impltf /home/flynn/workplace/CEMapping/outputs/Astran/adder/full_adder_16//full_adder_16_init.blif;' --

1. Executing Liberty frontend.
Imported 12 cell types from liberty file.

2. Executing Verilog-2005 frontend: /tmp/UQZ7RNDROE.v
Parsing Verilog input from `/tmp/UQZ7RNDROE.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

3. Executing BLIF backend.

End of script. Logfile hash: e996357163
CPU: user 0.02s system 0.00s, MEM: 16.34 MB total, 10.00 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 56% 2x read_verilog (0 sec), 33% 2x read_liberty (0 sec), ...

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib stdCellLib/gscl45nm/gscl45nm.lib; read_blif /home/flynn/workplace/CEMapping/outputs/Astran/adder/full_adder_16//full_adder_16_init.blif; stat -liberty outputs/Astran/K3/0.05_5/adder/adder.lib; ltp;' --

1. Executing Liberty frontend.
Imported 32 cell types from liberty file.

2. Executing BLIF frontend.

3. Printing statistics.

=== top ===

   Number of wires:                129
   Number of wire bits:            129
   Number of public wires:         129
   Number of public wire bits:     129
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 96
     AND2X2                          1
     AOI21X1                        12
     INVX1                          16
     NAND2X1                         7
     NAND3X1                         3
     NOR2X1                          6
     NOR3X1                          4
     OAI21X1                        11
     OR2X2                           4
     XNOR2X1                        28
     XOR2X1                          4

   Chip area for module '\top': 297.066900

4. Executing LTP pass (find longest path).

Longest topological path in top (length=25):
    0: \x0
    1: \n51 (via $auto$blifparse.cc:371:parse_blif$9)
    2: \n55 (via $auto$blifparse.cc:371:parse_blif$12)
    3: \n56 (via $auto$blifparse.cc:371:parse_blif$14)
    4: \n57 (via $auto$blifparse.cc:371:parse_blif$15)
    5: \n61 (via $auto$blifparse.cc:371:parse_blif$18)
    6: \n62 (via $auto$blifparse.cc:371:parse_blif$21)
    7: \n63 (via $auto$blifparse.cc:371:parse_blif$22)
    8: \n67 (via $auto$blifparse.cc:371:parse_blif$24)
    9: \n68 (via $auto$blifparse.cc:371:parse_blif$26)
   10: \n69 (via $auto$blifparse.cc:371:parse_blif$27)
   11: \n73 (via $auto$blifparse.cc:371:parse_blif$30)
   12: \n74 (via $auto$blifparse.cc:371:parse_blif$33)
   13: \n75 (via $auto$blifparse.cc:371:parse_blif$34)
   14: \n79 (via $auto$blifparse.cc:371:parse_blif$36)
   15: \n80 (via $auto$blifparse.cc:371:parse_blif$38)
   16: \n81 (via $auto$blifparse.cc:371:parse_blif$39)
   17: \n85 (via $auto$blifparse.cc:371:parse_blif$42)
   18: \n86 (via $auto$blifparse.cc:371:parse_blif$45)
   19: \n87 (via $auto$blifparse.cc:371:parse_blif$46)
   20: \n91 (via $auto$blifparse.cc:371:parse_blif$48)
   21: \n92 (via $auto$blifparse.cc:371:parse_blif$50)
   22: \n94 (via $auto$blifparse.cc:371:parse_blif$51)
   23: \n95 (via $auto$blifparse.cc:371:parse_blif$53)
   24: \n97 (via $auto$blifparse.cc:371:parse_blif$54)
   25: \y0 (via $auto$blifparse.cc:371:parse_blif$57)

End of script. Logfile hash: 12e4dc90c0
CPU: user 0.02s system 0.00s, MEM: 16.34 MB total, 10.00 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 71% 2x read_liberty (0 sec), 17% 1x stat (0 sec), ...
>>> initial mapping succeed with area = 297.0668922662735
[i] processing /home/flynn/workplace/CEMapping/outputs/Astran/adder/full_adder_16//full_adder_16.aig
resyn runtime: 0
[i] area: 235.518404006958, gates: 48, depth: 17
mapping runtime: 0

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib outputs/Astran/K3/0.05_5/adder/ADDER_G3_2_399_400_600.lib; read_verilog /tmp/NKYFRE5YBF.v; write_blif -impltf /home/flynn/workplace/CEMapping/outputs/Astran/adder/full_adder_16//full_adder_16_temacle.blif;' --

1. Executing Liberty frontend.
Imported 16 cell types from liberty file.

2. Executing Verilog-2005 frontend: /tmp/NKYFRE5YBF.v
Parsing Verilog input from `/tmp/NKYFRE5YBF.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

3. Executing BLIF backend.

End of script. Logfile hash: feab6c86ab
CPU: user 0.01s system 0.00s, MEM: 15.95 MB total, 9.50 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 47% 2x read_verilog (0 sec), 41% 2x read_liberty (0 sec), ...

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib outputs/Astran/K3/0.05_5/adder/ADDER_G3_2_399_400_600.lib; read_blif /home/flynn/workplace/CEMapping/outputs/Astran/adder/full_adder_16//full_adder_16_temacle.blif; stat -liberty outputs/Astran/K3/0.05_5/adder/ADDER_G3_2_399_400_600.lib; ltp;' --

1. Executing Liberty frontend.
Imported 16 cell types from liberty file.

2. Executing BLIF frontend.

3. Printing statistics.

=== top ===

   Number of wires:                 81
   Number of wire bits:             81
   Number of public wires:          81
   Number of public wire bits:      81
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 48
     ADDER_G2_0_605                 16
     ADDER_G3_2_399_400_600         16
     INVX1                          16

   Chip area for module '\top': 235.518400

4. Executing LTP pass (find longest path).

Longest topological path in top (length=17):
    0: \x32
    1: \n50 (via $auto$blifparse.cc:371:parse_blif$16)
    2: \n51 (via $auto$blifparse.cc:371:parse_blif$17)
    3: \n52 (via $auto$blifparse.cc:371:parse_blif$18)
    4: \n53 (via $auto$blifparse.cc:371:parse_blif$19)
    5: \n54 (via $auto$blifparse.cc:371:parse_blif$20)
    6: \n55 (via $auto$blifparse.cc:371:parse_blif$21)
    7: \n56 (via $auto$blifparse.cc:371:parse_blif$22)
    8: \n57 (via $auto$blifparse.cc:371:parse_blif$23)
    9: \n58 (via $auto$blifparse.cc:371:parse_blif$24)
   10: \n59 (via $auto$blifparse.cc:371:parse_blif$25)
   11: \n60 (via $auto$blifparse.cc:371:parse_blif$26)
   12: \n61 (via $auto$blifparse.cc:371:parse_blif$27)
   13: \n62 (via $auto$blifparse.cc:371:parse_blif$28)
   14: \n63 (via $auto$blifparse.cc:371:parse_blif$29)
   15: \n64 (via $auto$blifparse.cc:371:parse_blif$30)
   16: \n65 (via $auto$blifparse.cc:371:parse_blif$31)
   17: \y0 (via $auto$blifparse.cc:371:parse_blif$32)

End of script. Logfile hash: 2a5f4de1db
CPU: user 0.01s system 0.00s, MEM: 15.82 MB total, 9.50 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 44% 2x read_liberty (0 sec), 41% 1x stat (0 sec), ...
>>> Temacle mapping succeed with area = 235.518404006958
full_adder_16 initial mapping area = 297.0668922662735
full_adder_16 Temacle mapping area = 235.518404006958
full_adder_16 Temacle saveArea = (297.0668922662735 - 235.518404006958) / 297.0668922662735 = 20.718730313490134 %

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_verilog /home/flynn/workplace/CEMapping/benchmark/adder/full_adder_32.v; hierarchy -top full_adder_32; flatten; synth -top full_adder_32; aigmap; write_aiger /home/flynn/workplace/CEMapping/outputs/Astran/adder/full_adder_32//full_adder_32.aig;' --

1. Executing Verilog-2005 frontend: /home/flynn/workplace/CEMapping/benchmark/adder/full_adder_32.v
Parsing Verilog input from `/home/flynn/workplace/CEMapping/benchmark/adder/full_adder_32.v' to AST representation.
Generating RTLIL representation for module `\full_adder_32'.
Generating RTLIL representation for module `\fullAdder'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \full_adder_32
Used module:     \fullAdder

2.2. Analyzing design hierarchy..
Top module:  \full_adder_32
Used module:     \fullAdder
Removed 0 unused modules.
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[31].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[30].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[29].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[28].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[27].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[26].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[25].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[24].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[23].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[22].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[21].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[20].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[19].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[18].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[17].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[16].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[15].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[14].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[13].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[12].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[11].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[10].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[9].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[8].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[7].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[6].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[5].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[4].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[3].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[2].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[1].f (fullAdder).
Mapping positional arguments of cell full_adder_32.generate_N_bit_Adder[0].f (fullAdder).

3. Executing FLATTEN pass (flatten design).
Using template fullAdder for cells of type fullAdder.
<suppressed ~32 debug messages>
No more expansions possible.
Deleting now unused module fullAdder.

4. Executing SYNTH pass.

4.1. Executing HIERARCHY pass (managing design hierarchy).

4.1.1. Analyzing design hierarchy..
Top module:  \full_adder_32

4.1.2. Analyzing design hierarchy..
Top module:  \full_adder_32
Removed 0 unused modules.

4.2. Executing PROC pass (convert processes to netlists).

4.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.2.3. Executing PROC_INIT pass (extract init attributes).

4.2.4. Executing PROC_ARST pass (detect async resets in processes).

4.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

4.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

4.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_32.

4.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..
Removed 0 unused cells and 64 unused wires.
<suppressed ~1 debug messages>

4.5. Executing CHECK pass (checking for obvious problems).
checking module full_adder_32..
found and reported 0 problems.

4.6. Executing OPT pass (performing simple optimizations).

4.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_32.

4.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_32'.
Removed a total of 0 cells.

4.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_32.
Performed a total of 0 changes.

4.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_32'.
Removed a total of 0 cells.

4.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..

4.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_32.

4.6.9. Finished OPT passes. (There is nothing left to do.)

4.7. Executing WREDUCE pass (reducing word size of cells).

4.8. Executing PEEPOPT pass (run peephole optimizers).

4.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..

4.10. Executing TECHMAP pass (map to technology primitives).

4.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

4.10.2. Continuing TECHMAP pass.
No more expansions possible.

4.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module full_adder_32:
  created 0 $alu and 0 $macc cells.

4.12. Executing SHARE pass (SAT-based resource sharing).

4.13. Executing OPT pass (performing simple optimizations).

4.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_32.

4.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_32'.
Removed a total of 0 cells.

4.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_32.
Performed a total of 0 changes.

4.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_32'.
Removed a total of 0 cells.

4.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..

4.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_32.

4.13.9. Finished OPT passes. (There is nothing left to do.)

4.14. Executing FSM pass (extract and optimize FSM).

4.14.1. Executing FSM_DETECT pass (finding FSMs in design).

4.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..

4.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.15. Executing OPT pass (performing simple optimizations).

4.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_32.

4.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_32'.
Removed a total of 0 cells.

4.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..

4.15.5. Finished fast OPT passes.

4.16. Executing MEMORY pass.

4.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

4.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..

4.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..

4.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

4.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..

4.18. Executing OPT pass (performing simple optimizations).

4.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_32.

4.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_32'.
Removed a total of 0 cells.

4.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..

4.18.5. Finished fast OPT passes.

4.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

4.20. Executing OPT pass (performing simple optimizations).

4.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_32.

4.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_32'.
Removed a total of 0 cells.

4.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_32.
Performed a total of 0 changes.

4.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_32'.
Removed a total of 0 cells.

4.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..

4.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_32.

4.20.9. Finished OPT passes. (There is nothing left to do.)

4.21. Executing TECHMAP pass (map to technology primitives).

4.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
No more expansions possible.
<suppressed ~224 debug messages>

4.22. Executing OPT pass (performing simple optimizations).

4.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_32.

4.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_32'.
Removed a total of 0 cells.

4.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..

4.22.5. Finished fast OPT passes.

4.23. Executing ABC pass (technology mapping using ABC).

4.23.1. Extracting gate netlist of module `\full_adder_32' to `<abc-temp-dir>/input.blif'..
Extracted 224 gates and 289 wires to a netlist network with 65 inputs and 33 outputs.

4.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:       30
ABC RESULTS:              AOI3 cells:       30
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:       29
ABC RESULTS:               NOT cells:       60
ABC RESULTS:              OAI3 cells:        2
ABC RESULTS:                OR cells:        1
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:       30
ABC RESULTS:               XOR cells:       34
ABC RESULTS:        internal signals:      191
ABC RESULTS:           input signals:       65
ABC RESULTS:          output signals:       33
Removing temp directory.

4.24. Executing OPT pass (performing simple optimizations).

4.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_32.

4.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_32'.
Removed a total of 0 cells.

4.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_32..
Removed 0 unused cells and 258 unused wires.
<suppressed ~1 debug messages>

4.24.5. Finished fast OPT passes.

4.25. Executing HIERARCHY pass (managing design hierarchy).

4.25.1. Analyzing design hierarchy..
Top module:  \full_adder_32

4.25.2. Analyzing design hierarchy..
Top module:  \full_adder_32
Removed 0 unused modules.

4.26. Printing statistics.

=== full_adder_32 ===

   Number of wires:                353
   Number of wire bits:            478
   Number of public wires:         166
   Number of public wire bits:     291
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                220
     $_ANDNOT_                      30
     $_AND_                          2
     $_AOI3_                        30
     $_NAND_                         1
     $_NOR_                         29
     $_NOT_                         60
     $_OAI3_                         2
     $_ORNOT_                        1
     $_OR_                           1
     $_XNOR_                        30
     $_XOR_                         34

4.27. Executing CHECK pass (checking for obvious problems).
checking module full_adder_32..
found and reported 0 problems.

5. Executing AIGMAP pass (map logic to AIG).
Module full_adder_32: replaced 158 cells with 766 new cells, skipped 62 cells.
  replaced 9 cell types:
       1 $_NAND_
       1 $_OR_
      29 $_NOR_
      34 $_XOR_
      30 $_XNOR_
      30 $_ANDNOT_
       1 $_ORNOT_
      30 $_AOI3_
       2 $_OAI3_
  not replaced 2 cell types:
      60 $_NOT_
       2 $_AND_

6. Executing AIGER backend.

End of script. Logfile hash: 2b698bdb42
CPU: user 0.30s system 0.00s, MEM: 17.93 MB total, 12.00 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 21% 13x opt_clean (0 sec), 13% 7x opt (0 sec), ...
>>> aig writing succeed!
[i] processing /home/flynn/workplace/CEMapping/outputs/Astran/adder/full_adder_32//full_adder_32.aig
resyn runtime: 0
[i] area: 593.6644846200943, gates: 192, depth: 49
mapping runtime: 0

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib outputs/Astran/K3/0.05_5/adder/adder.lib; read_verilog /tmp/UTB8SZ7JTJ.v; write_blif -impltf /home/flynn/workplace/CEMapping/outputs/Astran/adder/full_adder_32//full_adder_32_init.blif;' --

1. Executing Liberty frontend.
Imported 12 cell types from liberty file.

2. Executing Verilog-2005 frontend: /tmp/UTB8SZ7JTJ.v
Parsing Verilog input from `/tmp/UTB8SZ7JTJ.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

3. Executing BLIF backend.

End of script. Logfile hash: f25293d8b0
CPU: user 0.03s system 0.00s, MEM: 17.11 MB total, 10.50 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 76% 2x read_verilog (0 sec), 17% 2x read_liberty (0 sec), ...

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib stdCellLib/gscl45nm/gscl45nm.lib; read_blif /home/flynn/workplace/CEMapping/outputs/Astran/adder/full_adder_32//full_adder_32_init.blif; stat -liberty outputs/Astran/K3/0.05_5/adder/adder.lib; ltp;' --

1. Executing Liberty frontend.
Imported 32 cell types from liberty file.

2. Executing BLIF frontend.

3. Printing statistics.

=== top ===

   Number of wires:                257
   Number of wire bits:            257
   Number of public wires:         257
   Number of public wire bits:     257
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                192
     AND2X2                          1
     AOI21X1                        24
     INVX1                          32
     NAND2X1                        15
     NAND3X1                         7
     NOR2X1                         10
     NOR3X1                          8
     OAI21X1                        23
     OR2X2                           8
     XNOR2X1                        60
     XOR2X1                          4

   Chip area for module '\top': 593.664500

4. Executing LTP pass (find longest path).

Longest topological path in top (length=49):
    0: \x0
    1: \n99 (via $auto$blifparse.cc:371:parse_blif$17)
    2: \n103 (via $auto$blifparse.cc:371:parse_blif$20)
    3: \n104 (via $auto$blifparse.cc:371:parse_blif$22)
    4: \n105 (via $auto$blifparse.cc:371:parse_blif$23)
    5: \n109 (via $auto$blifparse.cc:371:parse_blif$26)
    6: \n110 (via $auto$blifparse.cc:371:parse_blif$29)
    7: \n111 (via $auto$blifparse.cc:371:parse_blif$30)
    8: \n115 (via $auto$blifparse.cc:371:parse_blif$32)
    9: \n116 (via $auto$blifparse.cc:371:parse_blif$34)
   10: \n117 (via $auto$blifparse.cc:371:parse_blif$35)
   11: \n121 (via $auto$blifparse.cc:371:parse_blif$38)
   12: \n122 (via $auto$blifparse.cc:371:parse_blif$41)
   13: \n123 (via $auto$blifparse.cc:371:parse_blif$42)
   14: \n127 (via $auto$blifparse.cc:371:parse_blif$44)
   15: \n128 (via $auto$blifparse.cc:371:parse_blif$46)
   16: \n129 (via $auto$blifparse.cc:371:parse_blif$47)
   17: \n133 (via $auto$blifparse.cc:371:parse_blif$50)
   18: \n134 (via $auto$blifparse.cc:371:parse_blif$53)
   19: \n135 (via $auto$blifparse.cc:371:parse_blif$54)
   20: \n139 (via $auto$blifparse.cc:371:parse_blif$56)
   21: \n140 (via $auto$blifparse.cc:371:parse_blif$58)
   22: \n141 (via $auto$blifparse.cc:371:parse_blif$59)
   23: \n145 (via $auto$blifparse.cc:371:parse_blif$62)
   24: \n146 (via $auto$blifparse.cc:371:parse_blif$65)
   25: \n147 (via $auto$blifparse.cc:371:parse_blif$66)
   26: \n151 (via $auto$blifparse.cc:371:parse_blif$68)
   27: \n152 (via $auto$blifparse.cc:371:parse_blif$70)
   28: \n153 (via $auto$blifparse.cc:371:parse_blif$71)
   29: \n157 (via $auto$blifparse.cc:371:parse_blif$74)
   30: \n158 (via $auto$blifparse.cc:371:parse_blif$77)
   31: \n159 (via $auto$blifparse.cc:371:parse_blif$78)
   32: \n163 (via $auto$blifparse.cc:371:parse_blif$80)
   33: \n164 (via $auto$blifparse.cc:371:parse_blif$82)
   34: \n165 (via $auto$blifparse.cc:371:parse_blif$83)
   35: \n169 (via $auto$blifparse.cc:371:parse_blif$86)
   36: \n170 (via $auto$blifparse.cc:371:parse_blif$89)
   37: \n171 (via $auto$blifparse.cc:371:parse_blif$90)
   38: \n175 (via $auto$blifparse.cc:371:parse_blif$92)
   39: \n176 (via $auto$blifparse.cc:371:parse_blif$94)
   40: \n177 (via $auto$blifparse.cc:371:parse_blif$95)
   41: \n181 (via $auto$blifparse.cc:371:parse_blif$98)
   42: \n182 (via $auto$blifparse.cc:371:parse_blif$101)
   43: \n183 (via $auto$blifparse.cc:371:parse_blif$102)
   44: \n187 (via $auto$blifparse.cc:371:parse_blif$104)
   45: \n188 (via $auto$blifparse.cc:371:parse_blif$106)
   46: \n190 (via $auto$blifparse.cc:371:parse_blif$107)
   47: \n191 (via $auto$blifparse.cc:371:parse_blif$109)
   48: \n193 (via $auto$blifparse.cc:371:parse_blif$110)
   49: \y0 (via $auto$blifparse.cc:371:parse_blif$113)

End of script. Logfile hash: bf6ba2ba52
CPU: user 0.02s system 0.01s, MEM: 16.34 MB total, 10.00 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 64% 2x read_liberty (0 sec), 17% 1x stat (0 sec), ...
>>> initial mapping succeed with area = 593.6644846200943
[i] processing /home/flynn/workplace/CEMapping/outputs/Astran/adder/full_adder_32//full_adder_32.aig
resyn runtime: 0
[i] area: 471.036808013916, gates: 96, depth: 33
mapping runtime: 0

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib outputs/Astran/K3/0.05_5/adder/ADDER_G3_2_399_400_600.lib; read_verilog /tmp/U49T2I44LD.v; write_blif -impltf /home/flynn/workplace/CEMapping/outputs/Astran/adder/full_adder_32//full_adder_32_temacle.blif;' --

1. Executing Liberty frontend.
Imported 16 cell types from liberty file.

2. Executing Verilog-2005 frontend: /tmp/U49T2I44LD.v
Parsing Verilog input from `/tmp/U49T2I44LD.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

3. Executing BLIF backend.

End of script. Logfile hash: 4ed3dc7d65
CPU: user 0.02s system 0.00s, MEM: 16.46 MB total, 10.00 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 63% 2x read_verilog (0 sec), 27% 2x read_liberty (0 sec), ...

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib outputs/Astran/K3/0.05_5/adder/ADDER_G3_2_399_400_600.lib; read_blif /home/flynn/workplace/CEMapping/outputs/Astran/adder/full_adder_32//full_adder_32_temacle.blif; stat -liberty outputs/Astran/K3/0.05_5/adder/ADDER_G3_2_399_400_600.lib; ltp;' --

1. Executing Liberty frontend.
Imported 16 cell types from liberty file.

2. Executing BLIF frontend.

3. Printing statistics.

=== top ===

   Number of wires:                161
   Number of wire bits:            161
   Number of public wires:         161
   Number of public wire bits:     161
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 96
     ADDER_G2_0_605                 32
     ADDER_G3_2_399_400_600         32
     INVX1                          32

   Chip area for module '\top': 471.036800

4. Executing LTP pass (find longest path).

Longest topological path in top (length=33):
    0: \x64
    1: \n98 (via $auto$blifparse.cc:371:parse_blif$32)
    2: \n99 (via $auto$blifparse.cc:371:parse_blif$33)
    3: \n100 (via $auto$blifparse.cc:371:parse_blif$34)
    4: \n101 (via $auto$blifparse.cc:371:parse_blif$35)
    5: \n102 (via $auto$blifparse.cc:371:parse_blif$36)
    6: \n103 (via $auto$blifparse.cc:371:parse_blif$37)
    7: \n104 (via $auto$blifparse.cc:371:parse_blif$38)
    8: \n105 (via $auto$blifparse.cc:371:parse_blif$39)
    9: \n106 (via $auto$blifparse.cc:371:parse_blif$40)
   10: \n107 (via $auto$blifparse.cc:371:parse_blif$41)
   11: \n108 (via $auto$blifparse.cc:371:parse_blif$42)
   12: \n109 (via $auto$blifparse.cc:371:parse_blif$43)
   13: \n110 (via $auto$blifparse.cc:371:parse_blif$44)
   14: \n111 (via $auto$blifparse.cc:371:parse_blif$45)
   15: \n112 (via $auto$blifparse.cc:371:parse_blif$46)
   16: \n113 (via $auto$blifparse.cc:371:parse_blif$47)
   17: \n114 (via $auto$blifparse.cc:371:parse_blif$48)
   18: \n115 (via $auto$blifparse.cc:371:parse_blif$49)
   19: \n116 (via $auto$blifparse.cc:371:parse_blif$50)
   20: \n117 (via $auto$blifparse.cc:371:parse_blif$51)
   21: \n118 (via $auto$blifparse.cc:371:parse_blif$52)
   22: \n119 (via $auto$blifparse.cc:371:parse_blif$53)
   23: \n120 (via $auto$blifparse.cc:371:parse_blif$54)
   24: \n121 (via $auto$blifparse.cc:371:parse_blif$55)
   25: \n122 (via $auto$blifparse.cc:371:parse_blif$56)
   26: \n123 (via $auto$blifparse.cc:371:parse_blif$57)
   27: \n124 (via $auto$blifparse.cc:371:parse_blif$58)
   28: \n125 (via $auto$blifparse.cc:371:parse_blif$59)
   29: \n126 (via $auto$blifparse.cc:371:parse_blif$60)
   30: \n127 (via $auto$blifparse.cc:371:parse_blif$61)
   31: \n128 (via $auto$blifparse.cc:371:parse_blif$62)
   32: \n129 (via $auto$blifparse.cc:371:parse_blif$63)
   33: \y0 (via $auto$blifparse.cc:371:parse_blif$64)

End of script. Logfile hash: b1cb735ca1
CPU: user 0.01s system 0.00s, MEM: 15.95 MB total, 10.00 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 45% 2x read_liberty (0 sec), 33% 1x stat (0 sec), ...
>>> Temacle mapping succeed with area = 471.036808013916
full_adder_32 initial mapping area = 593.6644846200943
full_adder_32 Temacle mapping area = 471.036808013916
full_adder_32 Temacle saveArea = (593.6644846200943 - 471.036808013916) / 593.6644846200943 = 20.656057383094396 %

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_verilog /home/flynn/workplace/CEMapping/benchmark/adder/full_adder_64.v; hierarchy -top full_adder_64; flatten; synth -top full_adder_64; aigmap; write_aiger /home/flynn/workplace/CEMapping/outputs/Astran/adder/full_adder_64//full_adder_64.aig;' --

1. Executing Verilog-2005 frontend: /home/flynn/workplace/CEMapping/benchmark/adder/full_adder_64.v
Parsing Verilog input from `/home/flynn/workplace/CEMapping/benchmark/adder/full_adder_64.v' to AST representation.
Generating RTLIL representation for module `\full_adder_64'.
Generating RTLIL representation for module `\fullAdder'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \full_adder_64
Used module:     \fullAdder

2.2. Analyzing design hierarchy..
Top module:  \full_adder_64
Used module:     \fullAdder
Removed 0 unused modules.
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[63].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[62].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[61].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[60].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[59].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[58].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[57].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[56].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[55].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[54].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[53].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[52].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[51].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[50].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[49].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[48].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[47].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[46].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[45].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[44].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[43].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[42].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[41].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[40].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[39].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[38].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[37].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[36].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[35].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[34].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[33].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[32].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[31].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[30].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[29].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[28].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[27].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[26].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[25].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[24].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[23].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[22].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[21].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[20].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[19].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[18].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[17].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[16].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[15].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[14].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[13].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[12].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[11].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[10].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[9].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[8].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[7].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[6].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[5].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[4].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[3].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[2].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[1].f (fullAdder).
Mapping positional arguments of cell full_adder_64.generate_N_bit_Adder[0].f (fullAdder).

3. Executing FLATTEN pass (flatten design).
Using template fullAdder for cells of type fullAdder.
<suppressed ~64 debug messages>
No more expansions possible.
Deleting now unused module fullAdder.

4. Executing SYNTH pass.

4.1. Executing HIERARCHY pass (managing design hierarchy).

4.1.1. Analyzing design hierarchy..
Top module:  \full_adder_64

4.1.2. Analyzing design hierarchy..
Top module:  \full_adder_64
Removed 0 unused modules.

4.2. Executing PROC pass (convert processes to netlists).

4.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.2.3. Executing PROC_INIT pass (extract init attributes).

4.2.4. Executing PROC_ARST pass (detect async resets in processes).

4.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

4.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

4.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_64.

4.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..
Removed 0 unused cells and 128 unused wires.
<suppressed ~1 debug messages>

4.5. Executing CHECK pass (checking for obvious problems).
checking module full_adder_64..
found and reported 0 problems.

4.6. Executing OPT pass (performing simple optimizations).

4.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_64.

4.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_64'.
Removed a total of 0 cells.

4.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_64..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_64.
Performed a total of 0 changes.

4.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_64'.
Removed a total of 0 cells.

4.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..

4.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_64.

4.6.9. Finished OPT passes. (There is nothing left to do.)

4.7. Executing WREDUCE pass (reducing word size of cells).

4.8. Executing PEEPOPT pass (run peephole optimizers).

4.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..

4.10. Executing TECHMAP pass (map to technology primitives).

4.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

4.10.2. Continuing TECHMAP pass.
No more expansions possible.

4.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module full_adder_64:
  created 0 $alu and 0 $macc cells.

4.12. Executing SHARE pass (SAT-based resource sharing).

4.13. Executing OPT pass (performing simple optimizations).

4.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_64.

4.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_64'.
Removed a total of 0 cells.

4.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_64..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_64.
Performed a total of 0 changes.

4.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_64'.
Removed a total of 0 cells.

4.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..

4.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_64.

4.13.9. Finished OPT passes. (There is nothing left to do.)

4.14. Executing FSM pass (extract and optimize FSM).

4.14.1. Executing FSM_DETECT pass (finding FSMs in design).

4.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..

4.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.15. Executing OPT pass (performing simple optimizations).

4.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_64.

4.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_64'.
Removed a total of 0 cells.

4.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..

4.15.5. Finished fast OPT passes.

4.16. Executing MEMORY pass.

4.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

4.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..

4.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..

4.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

4.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..

4.18. Executing OPT pass (performing simple optimizations).

4.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_64.

4.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_64'.
Removed a total of 0 cells.

4.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..

4.18.5. Finished fast OPT passes.

4.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

4.20. Executing OPT pass (performing simple optimizations).

4.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_64.

4.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_64'.
Removed a total of 0 cells.

4.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_64..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_64.
Performed a total of 0 changes.

4.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_64'.
Removed a total of 0 cells.

4.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..

4.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_64.

4.20.9. Finished OPT passes. (There is nothing left to do.)

4.21. Executing TECHMAP pass (map to technology primitives).

4.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
No more expansions possible.
<suppressed ~448 debug messages>

4.22. Executing OPT pass (performing simple optimizations).

4.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_64.

4.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_64'.
Removed a total of 0 cells.

4.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..

4.22.5. Finished fast OPT passes.

4.23. Executing ABC pass (technology mapping using ABC).

4.23.1. Extracting gate netlist of module `\full_adder_64' to `<abc-temp-dir>/input.blif'..
Extracted 448 gates and 577 wires to a netlist network with 129 inputs and 65 outputs.

4.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:       62
ABC RESULTS:              AOI3 cells:       62
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:       61
ABC RESULTS:               NOT cells:      124
ABC RESULTS:              OAI3 cells:        2
ABC RESULTS:                OR cells:        1
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:       62
ABC RESULTS:               XOR cells:       66
ABC RESULTS:        internal signals:      383
ABC RESULTS:           input signals:      129
ABC RESULTS:          output signals:       65
Removing temp directory.

4.24. Executing OPT pass (performing simple optimizations).

4.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_64.

4.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_64'.
Removed a total of 0 cells.

4.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_64..
Removed 0 unused cells and 514 unused wires.
<suppressed ~1 debug messages>

4.24.5. Finished fast OPT passes.

4.25. Executing HIERARCHY pass (managing design hierarchy).

4.25.1. Analyzing design hierarchy..
Top module:  \full_adder_64

4.25.2. Analyzing design hierarchy..
Top module:  \full_adder_64
Removed 0 unused modules.

4.26. Printing statistics.

=== full_adder_64 ===

   Number of wires:                705
   Number of wire bits:            958
   Number of public wires:         326
   Number of public wire bits:     579
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                444
     $_ANDNOT_                      62
     $_AND_                          2
     $_AOI3_                        62
     $_NAND_                         1
     $_NOR_                         61
     $_NOT_                        124
     $_OAI3_                         2
     $_ORNOT_                        1
     $_OR_                           1
     $_XNOR_                        62
     $_XOR_                         66

4.27. Executing CHECK pass (checking for obvious problems).
checking module full_adder_64..
found and reported 0 problems.

5. Executing AIGMAP pass (map logic to AIG).
Module full_adder_64: replaced 318 cells with 1534 new cells, skipped 126 cells.
  replaced 9 cell types:
       1 $_NAND_
       1 $_OR_
      61 $_NOR_
      66 $_XOR_
      62 $_XNOR_
      62 $_ANDNOT_
       1 $_ORNOT_
      62 $_AOI3_
       2 $_OAI3_
  not replaced 2 cell types:
     124 $_NOT_
       2 $_AND_

6. Executing AIGER backend.

End of script. Logfile hash: dabcc4df70
CPU: user 0.51s system 0.01s, MEM: 19.78 MB total, 13.50 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 23% 13x opt_clean (0 sec), 15% 7x opt (0 sec), ...
>>> aig writing succeed!
[i] processing /home/flynn/workplace/CEMapping/outputs/Astran/adder/full_adder_64//full_adder_64.aig
resyn runtime: 0
[i] area: 1186.859669327736, gates: 384, depth: 97
mapping runtime: 0

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib outputs/Astran/K3/0.05_5/adder/adder.lib; read_verilog /tmp/75BNELULAY.v; write_blif -impltf /home/flynn/workplace/CEMapping/outputs/Astran/adder/full_adder_64//full_adder_64_init.blif;' --

1. Executing Liberty frontend.
Imported 12 cell types from liberty file.

2. Executing Verilog-2005 frontend: /tmp/75BNELULAY.v
Parsing Verilog input from `/tmp/75BNELULAY.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

3. Executing BLIF backend.

End of script. Logfile hash: 8e9d1a2905
CPU: user 0.04s system 0.01s, MEM: 18.80 MB total, 12.50 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 80% 2x read_verilog (0 sec), 12% 2x read_liberty (0 sec), ...

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib stdCellLib/gscl45nm/gscl45nm.lib; read_blif /home/flynn/workplace/CEMapping/outputs/Astran/adder/full_adder_64//full_adder_64_init.blif; stat -liberty outputs/Astran/K3/0.05_5/adder/adder.lib; ltp;' --

1. Executing Liberty frontend.
Imported 32 cell types from liberty file.

2. Executing BLIF frontend.

3. Printing statistics.

=== top ===

   Number of wires:                513
   Number of wire bits:            513
   Number of public wires:         513
   Number of public wire bits:     513
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                384
     AND2X2                          1
     AOI21X1                        48
     INVX1                          64
     NAND2X1                        31
     NAND3X1                        15
     NOR2X1                         18
     NOR3X1                         16
     OAI21X1                        47
     OR2X2                          16
     XNOR2X1                       124
     XOR2X1                          4

   Chip area for module '\top': 1186.859700

4. Executing LTP pass (find longest path).

Longest topological path in top (length=97):
    0: \x0
    1: \n195 (via $auto$blifparse.cc:371:parse_blif$33)
    2: \n199 (via $auto$blifparse.cc:371:parse_blif$36)
    3: \n200 (via $auto$blifparse.cc:371:parse_blif$38)
    4: \n201 (via $auto$blifparse.cc:371:parse_blif$39)
    5: \n205 (via $auto$blifparse.cc:371:parse_blif$42)
    6: \n206 (via $auto$blifparse.cc:371:parse_blif$45)
    7: \n207 (via $auto$blifparse.cc:371:parse_blif$46)
    8: \n211 (via $auto$blifparse.cc:371:parse_blif$48)
    9: \n212 (via $auto$blifparse.cc:371:parse_blif$50)
   10: \n213 (via $auto$blifparse.cc:371:parse_blif$51)
   11: \n217 (via $auto$blifparse.cc:371:parse_blif$54)
   12: \n218 (via $auto$blifparse.cc:371:parse_blif$57)
   13: \n219 (via $auto$blifparse.cc:371:parse_blif$58)
   14: \n223 (via $auto$blifparse.cc:371:parse_blif$60)
   15: \n224 (via $auto$blifparse.cc:371:parse_blif$62)
   16: \n225 (via $auto$blifparse.cc:371:parse_blif$63)
   17: \n229 (via $auto$blifparse.cc:371:parse_blif$66)
   18: \n230 (via $auto$blifparse.cc:371:parse_blif$69)
   19: \n231 (via $auto$blifparse.cc:371:parse_blif$70)
   20: \n235 (via $auto$blifparse.cc:371:parse_blif$72)
   21: \n236 (via $auto$blifparse.cc:371:parse_blif$74)
   22: \n237 (via $auto$blifparse.cc:371:parse_blif$75)
   23: \n241 (via $auto$blifparse.cc:371:parse_blif$78)
   24: \n242 (via $auto$blifparse.cc:371:parse_blif$81)
   25: \n243 (via $auto$blifparse.cc:371:parse_blif$82)
   26: \n247 (via $auto$blifparse.cc:371:parse_blif$84)
   27: \n248 (via $auto$blifparse.cc:371:parse_blif$86)
   28: \n249 (via $auto$blifparse.cc:371:parse_blif$87)
   29: \n253 (via $auto$blifparse.cc:371:parse_blif$90)
   30: \n254 (via $auto$blifparse.cc:371:parse_blif$93)
   31: \n255 (via $auto$blifparse.cc:371:parse_blif$94)
   32: \n259 (via $auto$blifparse.cc:371:parse_blif$96)
   33: \n260 (via $auto$blifparse.cc:371:parse_blif$98)
   34: \n261 (via $auto$blifparse.cc:371:parse_blif$99)
   35: \n265 (via $auto$blifparse.cc:371:parse_blif$102)
   36: \n266 (via $auto$blifparse.cc:371:parse_blif$105)
   37: \n267 (via $auto$blifparse.cc:371:parse_blif$106)
   38: \n271 (via $auto$blifparse.cc:371:parse_blif$108)
   39: \n272 (via $auto$blifparse.cc:371:parse_blif$110)
   40: \n273 (via $auto$blifparse.cc:371:parse_blif$111)
   41: \n277 (via $auto$blifparse.cc:371:parse_blif$114)
   42: \n278 (via $auto$blifparse.cc:371:parse_blif$117)
   43: \n279 (via $auto$blifparse.cc:371:parse_blif$118)
   44: \n283 (via $auto$blifparse.cc:371:parse_blif$120)
   45: \n284 (via $auto$blifparse.cc:371:parse_blif$122)
   46: \n285 (via $auto$blifparse.cc:371:parse_blif$123)
   47: \n289 (via $auto$blifparse.cc:371:parse_blif$126)
   48: \n290 (via $auto$blifparse.cc:371:parse_blif$129)
   49: \n291 (via $auto$blifparse.cc:371:parse_blif$130)
   50: \n295 (via $auto$blifparse.cc:371:parse_blif$132)
   51: \n296 (via $auto$blifparse.cc:371:parse_blif$134)
   52: \n297 (via $auto$blifparse.cc:371:parse_blif$135)
   53: \n301 (via $auto$blifparse.cc:371:parse_blif$138)
   54: \n302 (via $auto$blifparse.cc:371:parse_blif$141)
   55: \n303 (via $auto$blifparse.cc:371:parse_blif$142)
   56: \n307 (via $auto$blifparse.cc:371:parse_blif$144)
   57: \n308 (via $auto$blifparse.cc:371:parse_blif$146)
   58: \n309 (via $auto$blifparse.cc:371:parse_blif$147)
   59: \n313 (via $auto$blifparse.cc:371:parse_blif$150)
   60: \n314 (via $auto$blifparse.cc:371:parse_blif$153)
   61: \n315 (via $auto$blifparse.cc:371:parse_blif$154)
   62: \n319 (via $auto$blifparse.cc:371:parse_blif$156)
   63: \n320 (via $auto$blifparse.cc:371:parse_blif$158)
   64: \n321 (via $auto$blifparse.cc:371:parse_blif$159)
   65: \n325 (via $auto$blifparse.cc:371:parse_blif$162)
   66: \n326 (via $auto$blifparse.cc:371:parse_blif$165)
   67: \n327 (via $auto$blifparse.cc:371:parse_blif$166)
   68: \n331 (via $auto$blifparse.cc:371:parse_blif$168)
   69: \n332 (via $auto$blifparse.cc:371:parse_blif$170)
   70: \n333 (via $auto$blifparse.cc:371:parse_blif$171)
   71: \n337 (via $auto$blifparse.cc:371:parse_blif$174)
   72: \n338 (via $auto$blifparse.cc:371:parse_blif$177)
   73: \n339 (via $auto$blifparse.cc:371:parse_blif$178)
   74: \n343 (via $auto$blifparse.cc:371:parse_blif$180)
   75: \n344 (via $auto$blifparse.cc:371:parse_blif$182)
   76: \n345 (via $auto$blifparse.cc:371:parse_blif$183)
   77: \n349 (via $auto$blifparse.cc:371:parse_blif$186)
   78: \n350 (via $auto$blifparse.cc:371:parse_blif$189)
   79: \n351 (via $auto$blifparse.cc:371:parse_blif$190)
   80: \n355 (via $auto$blifparse.cc:371:parse_blif$192)
   81: \n356 (via $auto$blifparse.cc:371:parse_blif$194)
   82: \n357 (via $auto$blifparse.cc:371:parse_blif$195)
   83: \n361 (via $auto$blifparse.cc:371:parse_blif$198)
   84: \n362 (via $auto$blifparse.cc:371:parse_blif$201)
   85: \n363 (via $auto$blifparse.cc:371:parse_blif$202)
   86: \n367 (via $auto$blifparse.cc:371:parse_blif$204)
   87: \n368 (via $auto$blifparse.cc:371:parse_blif$206)
   88: \n369 (via $auto$blifparse.cc:371:parse_blif$207)
   89: \n373 (via $auto$blifparse.cc:371:parse_blif$210)
   90: \n374 (via $auto$blifparse.cc:371:parse_blif$213)
   91: \n375 (via $auto$blifparse.cc:371:parse_blif$214)
   92: \n379 (via $auto$blifparse.cc:371:parse_blif$216)
   93: \n380 (via $auto$blifparse.cc:371:parse_blif$218)
   94: \n382 (via $auto$blifparse.cc:371:parse_blif$219)
   95: \n383 (via $auto$blifparse.cc:371:parse_blif$221)
   96: \n385 (via $auto$blifparse.cc:371:parse_blif$222)
   97: \y0 (via $auto$blifparse.cc:371:parse_blif$225)

End of script. Logfile hash: 5cce226fec
CPU: user 0.02s system 0.01s, MEM: 16.34 MB total, 10.00 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 58% 2x read_liberty (0 sec), 15% 2x read_blif (0 sec), ...
>>> initial mapping succeed with area = 1186.859669327736
[i] processing /home/flynn/workplace/CEMapping/outputs/Astran/adder/full_adder_64//full_adder_64.aig
resyn runtime: 0
[i] area: 942.073616027832, gates: 192, depth: 65
mapping runtime: 0

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib outputs/Astran/K3/0.05_5/adder/ADDER_G3_2_399_400_600.lib; read_verilog /tmp/563HU0HYI0.v; write_blif -impltf /home/flynn/workplace/CEMapping/outputs/Astran/adder/full_adder_64//full_adder_64_temacle.blif;' --

1. Executing Liberty frontend.
Imported 16 cell types from liberty file.

2. Executing Verilog-2005 frontend: /tmp/563HU0HYI0.v
Parsing Verilog input from `/tmp/563HU0HYI0.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

3. Executing BLIF backend.

End of script. Logfile hash: 025525273d
CPU: user 0.03s system 0.00s, MEM: 17.25 MB total, 11.00 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 74% 2x read_verilog (0 sec), 18% 2x read_liberty (0 sec), ...

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib outputs/Astran/K3/0.05_5/adder/ADDER_G3_2_399_400_600.lib; read_blif /home/flynn/workplace/CEMapping/outputs/Astran/adder/full_adder_64//full_adder_64_temacle.blif; stat -liberty outputs/Astran/K3/0.05_5/adder/ADDER_G3_2_399_400_600.lib; ltp;' --

1. Executing Liberty frontend.
Imported 16 cell types from liberty file.

2. Executing BLIF frontend.

3. Printing statistics.

=== top ===

   Number of wires:                321
   Number of wire bits:            321
   Number of public wires:         321
   Number of public wire bits:     321
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                192
     ADDER_G2_0_605                 64
     ADDER_G3_2_399_400_600         64
     INVX1                          64

   Chip area for module '\top': 942.073600

4. Executing LTP pass (find longest path).

Longest topological path in top (length=65):
    0: \x128
    1: \n194 (via $auto$blifparse.cc:371:parse_blif$64)
    2: \n195 (via $auto$blifparse.cc:371:parse_blif$65)
    3: \n196 (via $auto$blifparse.cc:371:parse_blif$66)
    4: \n197 (via $auto$blifparse.cc:371:parse_blif$67)
    5: \n198 (via $auto$blifparse.cc:371:parse_blif$68)
    6: \n199 (via $auto$blifparse.cc:371:parse_blif$69)
    7: \n200 (via $auto$blifparse.cc:371:parse_blif$70)
    8: \n201 (via $auto$blifparse.cc:371:parse_blif$71)
    9: \n202 (via $auto$blifparse.cc:371:parse_blif$72)
   10: \n203 (via $auto$blifparse.cc:371:parse_blif$73)
   11: \n204 (via $auto$blifparse.cc:371:parse_blif$74)
   12: \n205 (via $auto$blifparse.cc:371:parse_blif$75)
   13: \n206 (via $auto$blifparse.cc:371:parse_blif$76)
   14: \n207 (via $auto$blifparse.cc:371:parse_blif$77)
   15: \n208 (via $auto$blifparse.cc:371:parse_blif$78)
   16: \n209 (via $auto$blifparse.cc:371:parse_blif$79)
   17: \n210 (via $auto$blifparse.cc:371:parse_blif$80)
   18: \n211 (via $auto$blifparse.cc:371:parse_blif$81)
   19: \n212 (via $auto$blifparse.cc:371:parse_blif$82)
   20: \n213 (via $auto$blifparse.cc:371:parse_blif$83)
   21: \n214 (via $auto$blifparse.cc:371:parse_blif$84)
   22: \n215 (via $auto$blifparse.cc:371:parse_blif$85)
   23: \n216 (via $auto$blifparse.cc:371:parse_blif$86)
   24: \n217 (via $auto$blifparse.cc:371:parse_blif$87)
   25: \n218 (via $auto$blifparse.cc:371:parse_blif$88)
   26: \n219 (via $auto$blifparse.cc:371:parse_blif$89)
   27: \n220 (via $auto$blifparse.cc:371:parse_blif$90)
   28: \n221 (via $auto$blifparse.cc:371:parse_blif$91)
   29: \n222 (via $auto$blifparse.cc:371:parse_blif$92)
   30: \n223 (via $auto$blifparse.cc:371:parse_blif$93)
   31: \n224 (via $auto$blifparse.cc:371:parse_blif$94)
   32: \n225 (via $auto$blifparse.cc:371:parse_blif$95)
   33: \n226 (via $auto$blifparse.cc:371:parse_blif$96)
   34: \n227 (via $auto$blifparse.cc:371:parse_blif$97)
   35: \n228 (via $auto$blifparse.cc:371:parse_blif$98)
   36: \n229 (via $auto$blifparse.cc:371:parse_blif$99)
   37: \n230 (via $auto$blifparse.cc:371:parse_blif$100)
   38: \n231 (via $auto$blifparse.cc:371:parse_blif$101)
   39: \n232 (via $auto$blifparse.cc:371:parse_blif$102)
   40: \n233 (via $auto$blifparse.cc:371:parse_blif$103)
   41: \n234 (via $auto$blifparse.cc:371:parse_blif$104)
   42: \n235 (via $auto$blifparse.cc:371:parse_blif$105)
   43: \n236 (via $auto$blifparse.cc:371:parse_blif$106)
   44: \n237 (via $auto$blifparse.cc:371:parse_blif$107)
   45: \n238 (via $auto$blifparse.cc:371:parse_blif$108)
   46: \n239 (via $auto$blifparse.cc:371:parse_blif$109)
   47: \n240 (via $auto$blifparse.cc:371:parse_blif$110)
   48: \n241 (via $auto$blifparse.cc:371:parse_blif$111)
   49: \n242 (via $auto$blifparse.cc:371:parse_blif$112)
   50: \n243 (via $auto$blifparse.cc:371:parse_blif$113)
   51: \n244 (via $auto$blifparse.cc:371:parse_blif$114)
   52: \n245 (via $auto$blifparse.cc:371:parse_blif$115)
   53: \n246 (via $auto$blifparse.cc:371:parse_blif$116)
   54: \n247 (via $auto$blifparse.cc:371:parse_blif$117)
   55: \n248 (via $auto$blifparse.cc:371:parse_blif$118)
   56: \n249 (via $auto$blifparse.cc:371:parse_blif$119)
   57: \n250 (via $auto$blifparse.cc:371:parse_blif$120)
   58: \n251 (via $auto$blifparse.cc:371:parse_blif$121)
   59: \n252 (via $auto$blifparse.cc:371:parse_blif$122)
   60: \n253 (via $auto$blifparse.cc:371:parse_blif$123)
   61: \n254 (via $auto$blifparse.cc:371:parse_blif$124)
   62: \n255 (via $auto$blifparse.cc:371:parse_blif$125)
   63: \n256 (via $auto$blifparse.cc:371:parse_blif$126)
   64: \n257 (via $auto$blifparse.cc:371:parse_blif$127)
   65: \y0 (via $auto$blifparse.cc:371:parse_blif$128)

End of script. Logfile hash: 0724cf5d2c
CPU: user 0.02s system 0.00s, MEM: 16.08 MB total, 9.50 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 36% 2x read_liberty (0 sec), 34% 1x stat (0 sec), ...
>>> Temacle mapping succeed with area = 942.073616027832
full_adder_64 initial mapping area = 1186.859669327736
full_adder_64 Temacle mapping area = 942.073616027832
full_adder_64 Temacle saveArea = (1186.859669327736 - 942.073616027832) / 1186.859669327736 = 20.62468374534592 %

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_verilog /home/flynn/workplace/CEMapping/benchmark/adder/full_adder_128.v; hierarchy -top full_adder_128; flatten; synth -top full_adder_128; aigmap; write_aiger /home/flynn/workplace/CEMapping/outputs/Astran/adder/full_adder_128//full_adder_128.aig;' --

1. Executing Verilog-2005 frontend: /home/flynn/workplace/CEMapping/benchmark/adder/full_adder_128.v
Parsing Verilog input from `/home/flynn/workplace/CEMapping/benchmark/adder/full_adder_128.v' to AST representation.
Generating RTLIL representation for module `\full_adder_128'.
Generating RTLIL representation for module `\fullAdder'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \full_adder_128
Used module:     \fullAdder

2.2. Analyzing design hierarchy..
Top module:  \full_adder_128
Used module:     \fullAdder
Removed 0 unused modules.
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[127].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[126].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[125].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[124].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[123].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[122].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[121].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[120].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[119].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[118].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[117].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[116].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[115].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[114].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[113].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[112].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[111].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[110].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[109].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[108].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[107].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[106].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[105].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[104].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[103].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[102].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[101].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[100].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[99].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[98].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[97].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[96].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[95].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[94].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[93].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[92].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[91].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[90].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[89].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[88].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[87].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[86].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[85].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[84].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[83].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[82].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[81].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[80].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[79].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[78].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[77].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[76].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[75].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[74].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[73].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[72].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[71].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[70].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[69].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[68].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[67].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[66].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[65].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[64].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[63].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[62].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[61].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[60].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[59].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[58].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[57].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[56].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[55].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[54].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[53].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[52].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[51].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[50].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[49].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[48].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[47].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[46].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[45].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[44].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[43].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[42].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[41].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[40].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[39].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[38].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[37].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[36].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[35].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[34].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[33].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[32].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[31].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[30].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[29].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[28].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[27].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[26].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[25].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[24].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[23].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[22].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[21].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[20].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[19].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[18].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[17].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[16].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[15].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[14].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[13].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[12].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[11].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[10].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[9].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[8].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[7].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[6].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[5].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[4].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[3].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[2].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[1].f (fullAdder).
Mapping positional arguments of cell full_adder_128.generate_N_bit_Adder[0].f (fullAdder).

3. Executing FLATTEN pass (flatten design).
Using template fullAdder for cells of type fullAdder.
<suppressed ~128 debug messages>
No more expansions possible.
Deleting now unused module fullAdder.

4. Executing SYNTH pass.

4.1. Executing HIERARCHY pass (managing design hierarchy).

4.1.1. Analyzing design hierarchy..
Top module:  \full_adder_128

4.1.2. Analyzing design hierarchy..
Top module:  \full_adder_128
Removed 0 unused modules.

4.2. Executing PROC pass (convert processes to netlists).

4.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.2.3. Executing PROC_INIT pass (extract init attributes).

4.2.4. Executing PROC_ARST pass (detect async resets in processes).

4.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

4.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

4.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_128.

4.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..
Removed 0 unused cells and 256 unused wires.
<suppressed ~1 debug messages>

4.5. Executing CHECK pass (checking for obvious problems).
checking module full_adder_128..
found and reported 0 problems.

4.6. Executing OPT pass (performing simple optimizations).

4.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_128.

4.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_128'.
Removed a total of 0 cells.

4.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_128..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_128.
Performed a total of 0 changes.

4.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_128'.
Removed a total of 0 cells.

4.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..

4.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_128.

4.6.9. Finished OPT passes. (There is nothing left to do.)

4.7. Executing WREDUCE pass (reducing word size of cells).

4.8. Executing PEEPOPT pass (run peephole optimizers).

4.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..

4.10. Executing TECHMAP pass (map to technology primitives).

4.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

4.10.2. Continuing TECHMAP pass.
No more expansions possible.

4.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module full_adder_128:
  created 0 $alu and 0 $macc cells.

4.12. Executing SHARE pass (SAT-based resource sharing).

4.13. Executing OPT pass (performing simple optimizations).

4.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_128.

4.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_128'.
Removed a total of 0 cells.

4.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_128..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_128.
Performed a total of 0 changes.

4.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_128'.
Removed a total of 0 cells.

4.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..

4.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_128.

4.13.9. Finished OPT passes. (There is nothing left to do.)

4.14. Executing FSM pass (extract and optimize FSM).

4.14.1. Executing FSM_DETECT pass (finding FSMs in design).

4.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..

4.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.15. Executing OPT pass (performing simple optimizations).

4.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_128.

4.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_128'.
Removed a total of 0 cells.

4.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..

4.15.5. Finished fast OPT passes.

4.16. Executing MEMORY pass.

4.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

4.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..

4.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..

4.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

4.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..

4.18. Executing OPT pass (performing simple optimizations).

4.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_128.

4.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_128'.
Removed a total of 0 cells.

4.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..

4.18.5. Finished fast OPT passes.

4.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

4.20. Executing OPT pass (performing simple optimizations).

4.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_128.

4.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_128'.
Removed a total of 0 cells.

4.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_128..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_128.
Performed a total of 0 changes.

4.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_128'.
Removed a total of 0 cells.

4.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..

4.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_128.

4.20.9. Finished OPT passes. (There is nothing left to do.)

4.21. Executing TECHMAP pass (map to technology primitives).

4.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
No more expansions possible.
<suppressed ~896 debug messages>

4.22. Executing OPT pass (performing simple optimizations).

4.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_128.

4.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_128'.
Removed a total of 0 cells.

4.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..

4.22.5. Finished fast OPT passes.

4.23. Executing ABC pass (technology mapping using ABC).

4.23.1. Extracting gate netlist of module `\full_adder_128' to `<abc-temp-dir>/input.blif'..
Extracted 896 gates and 1153 wires to a netlist network with 257 inputs and 129 outputs.

4.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:      126
ABC RESULTS:              AOI3 cells:      126
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:      125
ABC RESULTS:               NOT cells:      252
ABC RESULTS:              OAI3 cells:        2
ABC RESULTS:                OR cells:        1
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:      126
ABC RESULTS:               XOR cells:      130
ABC RESULTS:        internal signals:      767
ABC RESULTS:           input signals:      257
ABC RESULTS:          output signals:      129
Removing temp directory.

4.24. Executing OPT pass (performing simple optimizations).

4.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_128.

4.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_128'.
Removed a total of 0 cells.

4.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_128..
Removed 0 unused cells and 1026 unused wires.
<suppressed ~1 debug messages>

4.24.5. Finished fast OPT passes.

4.25. Executing HIERARCHY pass (managing design hierarchy).

4.25.1. Analyzing design hierarchy..
Top module:  \full_adder_128

4.25.2. Analyzing design hierarchy..
Top module:  \full_adder_128
Removed 0 unused modules.

4.26. Printing statistics.

=== full_adder_128 ===

   Number of wires:               1409
   Number of wire bits:           1918
   Number of public wires:         646
   Number of public wire bits:    1155
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                892
     $_ANDNOT_                     126
     $_AND_                          2
     $_AOI3_                       126
     $_NAND_                         1
     $_NOR_                        125
     $_NOT_                        252
     $_OAI3_                         2
     $_ORNOT_                        1
     $_OR_                           1
     $_XNOR_                       126
     $_XOR_                        130

4.27. Executing CHECK pass (checking for obvious problems).
checking module full_adder_128..
found and reported 0 problems.

5. Executing AIGMAP pass (map logic to AIG).
Module full_adder_128: replaced 638 cells with 3070 new cells, skipped 254 cells.
  replaced 9 cell types:
       1 $_NAND_
       1 $_OR_
     125 $_NOR_
     130 $_XOR_
     126 $_XNOR_
     126 $_ANDNOT_
       1 $_ORNOT_
     126 $_AOI3_
       2 $_OAI3_
  not replaced 2 cell types:
     252 $_NOT_
       2 $_AND_

6. Executing AIGER backend.

End of script. Logfile hash: e91cc6a92a
CPU: user 0.97s system 0.01s, MEM: 23.38 MB total, 17.50 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 24% 13x opt_clean (0 sec), 15% 7x opt (0 sec), ...
>>> aig writing succeed!
[i] processing /home/flynn/workplace/CEMapping/outputs/Astran/adder/full_adder_128//full_adder_128.aig
resyn runtime: 0
[i] area: 2373.250038743019, gates: 768, depth: 193
mapping runtime: 0

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib outputs/Astran/K3/0.05_5/adder/adder.lib; read_verilog /tmp/P347ZV3JMH.v; write_blif -impltf /home/flynn/workplace/CEMapping/outputs/Astran/adder/full_adder_128//full_adder_128_init.blif;' --

1. Executing Liberty frontend.
Imported 12 cell types from liberty file.

2. Executing Verilog-2005 frontend: /tmp/P347ZV3JMH.v
Parsing Verilog input from `/tmp/P347ZV3JMH.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

3. Executing BLIF backend.

End of script. Logfile hash: 3d6b187e9b
CPU: user 0.06s system 0.01s, MEM: 22.01 MB total, 15.50 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 85% 2x read_verilog (0 sec), 7% 2x write_blif (0 sec), ...

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib stdCellLib/gscl45nm/gscl45nm.lib; read_blif /home/flynn/workplace/CEMapping/outputs/Astran/adder/full_adder_128//full_adder_128_init.blif; stat -liberty outputs/Astran/K3/0.05_5/adder/adder.lib; ltp;' --

1. Executing Liberty frontend.
Imported 32 cell types from liberty file.

2. Executing BLIF frontend.

3. Printing statistics.

=== top ===

   Number of wires:               1025
   Number of wire bits:           1025
   Number of public wires:        1025
   Number of public wire bits:    1025
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                768
     AND2X2                          1
     AOI21X1                        96
     INVX1                         128
     NAND2X1                        63
     NAND3X1                        31
     NOR2X1                         34
     NOR3X1                         32
     OAI21X1                        95
     OR2X2                          32
     XNOR2X1                       252
     XOR2X1                          4

   Chip area for module '\top': 2373.250100

4. Executing LTP pass (find longest path).

Longest topological path in top (length=193):
    0: \x0
    1: \n387 (via $auto$blifparse.cc:371:parse_blif$65)
    2: \n391 (via $auto$blifparse.cc:371:parse_blif$68)
    3: \n392 (via $auto$blifparse.cc:371:parse_blif$70)
    4: \n393 (via $auto$blifparse.cc:371:parse_blif$71)
    5: \n397 (via $auto$blifparse.cc:371:parse_blif$74)
    6: \n398 (via $auto$blifparse.cc:371:parse_blif$77)
    7: \n399 (via $auto$blifparse.cc:371:parse_blif$78)
    8: \n403 (via $auto$blifparse.cc:371:parse_blif$80)
    9: \n404 (via $auto$blifparse.cc:371:parse_blif$82)
   10: \n405 (via $auto$blifparse.cc:371:parse_blif$83)
   11: \n409 (via $auto$blifparse.cc:371:parse_blif$86)
   12: \n410 (via $auto$blifparse.cc:371:parse_blif$89)
   13: \n411 (via $auto$blifparse.cc:371:parse_blif$90)
   14: \n415 (via $auto$blifparse.cc:371:parse_blif$92)
   15: \n416 (via $auto$blifparse.cc:371:parse_blif$94)
   16: \n417 (via $auto$blifparse.cc:371:parse_blif$95)
   17: \n421 (via $auto$blifparse.cc:371:parse_blif$98)
   18: \n422 (via $auto$blifparse.cc:371:parse_blif$101)
   19: \n423 (via $auto$blifparse.cc:371:parse_blif$102)
   20: \n427 (via $auto$blifparse.cc:371:parse_blif$104)
   21: \n428 (via $auto$blifparse.cc:371:parse_blif$106)
   22: \n429 (via $auto$blifparse.cc:371:parse_blif$107)
   23: \n433 (via $auto$blifparse.cc:371:parse_blif$110)
   24: \n434 (via $auto$blifparse.cc:371:parse_blif$113)
   25: \n435 (via $auto$blifparse.cc:371:parse_blif$114)
   26: \n439 (via $auto$blifparse.cc:371:parse_blif$116)
   27: \n440 (via $auto$blifparse.cc:371:parse_blif$118)
   28: \n441 (via $auto$blifparse.cc:371:parse_blif$119)
   29: \n445 (via $auto$blifparse.cc:371:parse_blif$122)
   30: \n446 (via $auto$blifparse.cc:371:parse_blif$125)
   31: \n447 (via $auto$blifparse.cc:371:parse_blif$126)
   32: \n451 (via $auto$blifparse.cc:371:parse_blif$128)
   33: \n452 (via $auto$blifparse.cc:371:parse_blif$130)
   34: \n453 (via $auto$blifparse.cc:371:parse_blif$131)
   35: \n457 (via $auto$blifparse.cc:371:parse_blif$134)
   36: \n458 (via $auto$blifparse.cc:371:parse_blif$137)
   37: \n459 (via $auto$blifparse.cc:371:parse_blif$138)
   38: \n463 (via $auto$blifparse.cc:371:parse_blif$140)
   39: \n464 (via $auto$blifparse.cc:371:parse_blif$142)
   40: \n465 (via $auto$blifparse.cc:371:parse_blif$143)
   41: \n469 (via $auto$blifparse.cc:371:parse_blif$146)
   42: \n470 (via $auto$blifparse.cc:371:parse_blif$149)
   43: \n471 (via $auto$blifparse.cc:371:parse_blif$150)
   44: \n475 (via $auto$blifparse.cc:371:parse_blif$152)
   45: \n476 (via $auto$blifparse.cc:371:parse_blif$154)
   46: \n477 (via $auto$blifparse.cc:371:parse_blif$155)
   47: \n481 (via $auto$blifparse.cc:371:parse_blif$158)
   48: \n482 (via $auto$blifparse.cc:371:parse_blif$161)
   49: \n483 (via $auto$blifparse.cc:371:parse_blif$162)
   50: \n487 (via $auto$blifparse.cc:371:parse_blif$164)
   51: \n488 (via $auto$blifparse.cc:371:parse_blif$166)
   52: \n489 (via $auto$blifparse.cc:371:parse_blif$167)
   53: \n493 (via $auto$blifparse.cc:371:parse_blif$170)
   54: \n494 (via $auto$blifparse.cc:371:parse_blif$173)
   55: \n495 (via $auto$blifparse.cc:371:parse_blif$174)
   56: \n499 (via $auto$blifparse.cc:371:parse_blif$176)
   57: \n500 (via $auto$blifparse.cc:371:parse_blif$178)
   58: \n501 (via $auto$blifparse.cc:371:parse_blif$179)
   59: \n505 (via $auto$blifparse.cc:371:parse_blif$182)
   60: \n506 (via $auto$blifparse.cc:371:parse_blif$185)
   61: \n507 (via $auto$blifparse.cc:371:parse_blif$186)
   62: \n511 (via $auto$blifparse.cc:371:parse_blif$188)
   63: \n512 (via $auto$blifparse.cc:371:parse_blif$190)
   64: \n513 (via $auto$blifparse.cc:371:parse_blif$191)
   65: \n517 (via $auto$blifparse.cc:371:parse_blif$194)
   66: \n518 (via $auto$blifparse.cc:371:parse_blif$197)
   67: \n519 (via $auto$blifparse.cc:371:parse_blif$198)
   68: \n523 (via $auto$blifparse.cc:371:parse_blif$200)
   69: \n524 (via $auto$blifparse.cc:371:parse_blif$202)
   70: \n525 (via $auto$blifparse.cc:371:parse_blif$203)
   71: \n529 (via $auto$blifparse.cc:371:parse_blif$206)
   72: \n530 (via $auto$blifparse.cc:371:parse_blif$209)
   73: \n531 (via $auto$blifparse.cc:371:parse_blif$210)
   74: \n535 (via $auto$blifparse.cc:371:parse_blif$212)
   75: \n536 (via $auto$blifparse.cc:371:parse_blif$214)
   76: \n537 (via $auto$blifparse.cc:371:parse_blif$215)
   77: \n541 (via $auto$blifparse.cc:371:parse_blif$218)
   78: \n542 (via $auto$blifparse.cc:371:parse_blif$221)
   79: \n543 (via $auto$blifparse.cc:371:parse_blif$222)
   80: \n547 (via $auto$blifparse.cc:371:parse_blif$224)
   81: \n548 (via $auto$blifparse.cc:371:parse_blif$226)
   82: \n549 (via $auto$blifparse.cc:371:parse_blif$227)
   83: \n553 (via $auto$blifparse.cc:371:parse_blif$230)
   84: \n554 (via $auto$blifparse.cc:371:parse_blif$233)
   85: \n555 (via $auto$blifparse.cc:371:parse_blif$234)
   86: \n559 (via $auto$blifparse.cc:371:parse_blif$236)
   87: \n560 (via $auto$blifparse.cc:371:parse_blif$238)
   88: \n561 (via $auto$blifparse.cc:371:parse_blif$239)
   89: \n565 (via $auto$blifparse.cc:371:parse_blif$242)
   90: \n566 (via $auto$blifparse.cc:371:parse_blif$245)
   91: \n567 (via $auto$blifparse.cc:371:parse_blif$246)
   92: \n571 (via $auto$blifparse.cc:371:parse_blif$248)
   93: \n572 (via $auto$blifparse.cc:371:parse_blif$250)
   94: \n573 (via $auto$blifparse.cc:371:parse_blif$251)
   95: \n577 (via $auto$blifparse.cc:371:parse_blif$254)
   96: \n578 (via $auto$blifparse.cc:371:parse_blif$257)
   97: \n579 (via $auto$blifparse.cc:371:parse_blif$258)
   98: \n583 (via $auto$blifparse.cc:371:parse_blif$260)
   99: \n584 (via $auto$blifparse.cc:371:parse_blif$262)
  100: \n585 (via $auto$blifparse.cc:371:parse_blif$263)
  101: \n589 (via $auto$blifparse.cc:371:parse_blif$266)
  102: \n590 (via $auto$blifparse.cc:371:parse_blif$269)
  103: \n591 (via $auto$blifparse.cc:371:parse_blif$270)
  104: \n595 (via $auto$blifparse.cc:371:parse_blif$272)
  105: \n596 (via $auto$blifparse.cc:371:parse_blif$274)
  106: \n597 (via $auto$blifparse.cc:371:parse_blif$275)
  107: \n601 (via $auto$blifparse.cc:371:parse_blif$278)
  108: \n602 (via $auto$blifparse.cc:371:parse_blif$281)
  109: \n603 (via $auto$blifparse.cc:371:parse_blif$282)
  110: \n607 (via $auto$blifparse.cc:371:parse_blif$284)
  111: \n608 (via $auto$blifparse.cc:371:parse_blif$286)
  112: \n609 (via $auto$blifparse.cc:371:parse_blif$287)
  113: \n613 (via $auto$blifparse.cc:371:parse_blif$290)
  114: \n614 (via $auto$blifparse.cc:371:parse_blif$293)
  115: \n615 (via $auto$blifparse.cc:371:parse_blif$294)
  116: \n619 (via $auto$blifparse.cc:371:parse_blif$296)
  117: \n620 (via $auto$blifparse.cc:371:parse_blif$298)
  118: \n621 (via $auto$blifparse.cc:371:parse_blif$299)
  119: \n625 (via $auto$blifparse.cc:371:parse_blif$302)
  120: \n626 (via $auto$blifparse.cc:371:parse_blif$305)
  121: \n627 (via $auto$blifparse.cc:371:parse_blif$306)
  122: \n631 (via $auto$blifparse.cc:371:parse_blif$308)
  123: \n632 (via $auto$blifparse.cc:371:parse_blif$310)
  124: \n633 (via $auto$blifparse.cc:371:parse_blif$311)
  125: \n637 (via $auto$blifparse.cc:371:parse_blif$314)
  126: \n638 (via $auto$blifparse.cc:371:parse_blif$317)
  127: \n639 (via $auto$blifparse.cc:371:parse_blif$318)
  128: \n643 (via $auto$blifparse.cc:371:parse_blif$320)
  129: \n644 (via $auto$blifparse.cc:371:parse_blif$322)
  130: \n645 (via $auto$blifparse.cc:371:parse_blif$323)
  131: \n649 (via $auto$blifparse.cc:371:parse_blif$326)
  132: \n650 (via $auto$blifparse.cc:371:parse_blif$329)
  133: \n651 (via $auto$blifparse.cc:371:parse_blif$330)
  134: \n655 (via $auto$blifparse.cc:371:parse_blif$332)
  135: \n656 (via $auto$blifparse.cc:371:parse_blif$334)
  136: \n657 (via $auto$blifparse.cc:371:parse_blif$335)
  137: \n661 (via $auto$blifparse.cc:371:parse_blif$338)
  138: \n662 (via $auto$blifparse.cc:371:parse_blif$341)
  139: \n663 (via $auto$blifparse.cc:371:parse_blif$342)
  140: \n667 (via $auto$blifparse.cc:371:parse_blif$344)
  141: \n668 (via $auto$blifparse.cc:371:parse_blif$346)
  142: \n669 (via $auto$blifparse.cc:371:parse_blif$347)
  143: \n673 (via $auto$blifparse.cc:371:parse_blif$350)
  144: \n674 (via $auto$blifparse.cc:371:parse_blif$353)
  145: \n675 (via $auto$blifparse.cc:371:parse_blif$354)
  146: \n679 (via $auto$blifparse.cc:371:parse_blif$356)
  147: \n680 (via $auto$blifparse.cc:371:parse_blif$358)
  148: \n681 (via $auto$blifparse.cc:371:parse_blif$359)
  149: \n685 (via $auto$blifparse.cc:371:parse_blif$362)
  150: \n686 (via $auto$blifparse.cc:371:parse_blif$365)
  151: \n687 (via $auto$blifparse.cc:371:parse_blif$366)
  152: \n691 (via $auto$blifparse.cc:371:parse_blif$368)
  153: \n692 (via $auto$blifparse.cc:371:parse_blif$370)
  154: \n693 (via $auto$blifparse.cc:371:parse_blif$371)
  155: \n697 (via $auto$blifparse.cc:371:parse_blif$374)
  156: \n698 (via $auto$blifparse.cc:371:parse_blif$377)
  157: \n699 (via $auto$blifparse.cc:371:parse_blif$378)
  158: \n703 (via $auto$blifparse.cc:371:parse_blif$380)
  159: \n704 (via $auto$blifparse.cc:371:parse_blif$382)
  160: \n705 (via $auto$blifparse.cc:371:parse_blif$383)
  161: \n709 (via $auto$blifparse.cc:371:parse_blif$386)
  162: \n710 (via $auto$blifparse.cc:371:parse_blif$389)
  163: \n711 (via $auto$blifparse.cc:371:parse_blif$390)
  164: \n715 (via $auto$blifparse.cc:371:parse_blif$392)
  165: \n716 (via $auto$blifparse.cc:371:parse_blif$394)
  166: \n717 (via $auto$blifparse.cc:371:parse_blif$395)
  167: \n721 (via $auto$blifparse.cc:371:parse_blif$398)
  168: \n722 (via $auto$blifparse.cc:371:parse_blif$401)
  169: \n723 (via $auto$blifparse.cc:371:parse_blif$402)
  170: \n727 (via $auto$blifparse.cc:371:parse_blif$404)
  171: \n728 (via $auto$blifparse.cc:371:parse_blif$406)
  172: \n729 (via $auto$blifparse.cc:371:parse_blif$407)
  173: \n733 (via $auto$blifparse.cc:371:parse_blif$410)
  174: \n734 (via $auto$blifparse.cc:371:parse_blif$413)
  175: \n735 (via $auto$blifparse.cc:371:parse_blif$414)
  176: \n739 (via $auto$blifparse.cc:371:parse_blif$416)
  177: \n740 (via $auto$blifparse.cc:371:parse_blif$418)
  178: \n741 (via $auto$blifparse.cc:371:parse_blif$419)
  179: \n745 (via $auto$blifparse.cc:371:parse_blif$422)
  180: \n746 (via $auto$blifparse.cc:371:parse_blif$425)
  181: \n747 (via $auto$blifparse.cc:371:parse_blif$426)
  182: \n751 (via $auto$blifparse.cc:371:parse_blif$428)
  183: \n752 (via $auto$blifparse.cc:371:parse_blif$430)
  184: \n753 (via $auto$blifparse.cc:371:parse_blif$431)
  185: \n757 (via $auto$blifparse.cc:371:parse_blif$434)
  186: \n758 (via $auto$blifparse.cc:371:parse_blif$437)
  187: \n759 (via $auto$blifparse.cc:371:parse_blif$438)
  188: \n763 (via $auto$blifparse.cc:371:parse_blif$440)
  189: \n764 (via $auto$blifparse.cc:371:parse_blif$442)
  190: \n766 (via $auto$blifparse.cc:371:parse_blif$443)
  191: \n767 (via $auto$blifparse.cc:371:parse_blif$445)
  192: \n769 (via $auto$blifparse.cc:371:parse_blif$446)
  193: \y0 (via $auto$blifparse.cc:371:parse_blif$449)

End of script. Logfile hash: e09bfcf321
CPU: user 0.02s system 0.01s, MEM: 16.88 MB total, 10.50 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 47% 2x read_liberty (0 sec), 26% 2x read_blif (0 sec), ...
>>> initial mapping succeed with area = 2373.250038743019
[i] processing /home/flynn/workplace/CEMapping/outputs/Astran/adder/full_adder_128//full_adder_128.aig
resyn runtime: 0
[i] area: 1884.147232055664, gates: 384, depth: 129
mapping runtime: 0

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib outputs/Astran/K3/0.05_5/adder/ADDER_G3_2_399_400_600.lib; read_verilog /tmp/3RVX1B9870.v; write_blif -impltf /home/flynn/workplace/CEMapping/outputs/Astran/adder/full_adder_128//full_adder_128_temacle.blif;' --

1. Executing Liberty frontend.
Imported 16 cell types from liberty file.

2. Executing Verilog-2005 frontend: /tmp/3RVX1B9870.v
Parsing Verilog input from `/tmp/3RVX1B9870.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

3. Executing BLIF backend.

End of script. Logfile hash: 839e672bda
CPU: user 0.04s system 0.01s, MEM: 19.09 MB total, 12.50 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 81% 2x read_verilog (0 sec), 11% 2x read_liberty (0 sec), ...

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib outputs/Astran/K3/0.05_5/adder/ADDER_G3_2_399_400_600.lib; read_blif /home/flynn/workplace/CEMapping/outputs/Astran/adder/full_adder_128//full_adder_128_temacle.blif; stat -liberty outputs/Astran/K3/0.05_5/adder/ADDER_G3_2_399_400_600.lib; ltp;' --

1. Executing Liberty frontend.
Imported 16 cell types from liberty file.

2. Executing BLIF frontend.

3. Printing statistics.

=== top ===

   Number of wires:                641
   Number of wire bits:            641
   Number of public wires:         641
   Number of public wire bits:     641
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                384
     ADDER_G2_0_605                128
     ADDER_G3_2_399_400_600        128
     INVX1                         128

   Chip area for module '\top': 1884.147200

4. Executing LTP pass (find longest path).

Longest topological path in top (length=129):
    0: \x256
    1: \n386 (via $auto$blifparse.cc:371:parse_blif$128)
    2: \n387 (via $auto$blifparse.cc:371:parse_blif$129)
    3: \n388 (via $auto$blifparse.cc:371:parse_blif$130)
    4: \n389 (via $auto$blifparse.cc:371:parse_blif$131)
    5: \n390 (via $auto$blifparse.cc:371:parse_blif$132)
    6: \n391 (via $auto$blifparse.cc:371:parse_blif$133)
    7: \n392 (via $auto$blifparse.cc:371:parse_blif$134)
    8: \n393 (via $auto$blifparse.cc:371:parse_blif$135)
    9: \n394 (via $auto$blifparse.cc:371:parse_blif$136)
   10: \n395 (via $auto$blifparse.cc:371:parse_blif$137)
   11: \n396 (via $auto$blifparse.cc:371:parse_blif$138)
   12: \n397 (via $auto$blifparse.cc:371:parse_blif$139)
   13: \n398 (via $auto$blifparse.cc:371:parse_blif$140)
   14: \n399 (via $auto$blifparse.cc:371:parse_blif$141)
   15: \n400 (via $auto$blifparse.cc:371:parse_blif$142)
   16: \n401 (via $auto$blifparse.cc:371:parse_blif$143)
   17: \n402 (via $auto$blifparse.cc:371:parse_blif$144)
   18: \n403 (via $auto$blifparse.cc:371:parse_blif$145)
   19: \n404 (via $auto$blifparse.cc:371:parse_blif$146)
   20: \n405 (via $auto$blifparse.cc:371:parse_blif$147)
   21: \n406 (via $auto$blifparse.cc:371:parse_blif$148)
   22: \n407 (via $auto$blifparse.cc:371:parse_blif$149)
   23: \n408 (via $auto$blifparse.cc:371:parse_blif$150)
   24: \n409 (via $auto$blifparse.cc:371:parse_blif$151)
   25: \n410 (via $auto$blifparse.cc:371:parse_blif$152)
   26: \n411 (via $auto$blifparse.cc:371:parse_blif$153)
   27: \n412 (via $auto$blifparse.cc:371:parse_blif$154)
   28: \n413 (via $auto$blifparse.cc:371:parse_blif$155)
   29: \n414 (via $auto$blifparse.cc:371:parse_blif$156)
   30: \n415 (via $auto$blifparse.cc:371:parse_blif$157)
   31: \n416 (via $auto$blifparse.cc:371:parse_blif$158)
   32: \n417 (via $auto$blifparse.cc:371:parse_blif$159)
   33: \n418 (via $auto$blifparse.cc:371:parse_blif$160)
   34: \n419 (via $auto$blifparse.cc:371:parse_blif$161)
   35: \n420 (via $auto$blifparse.cc:371:parse_blif$162)
   36: \n421 (via $auto$blifparse.cc:371:parse_blif$163)
   37: \n422 (via $auto$blifparse.cc:371:parse_blif$164)
   38: \n423 (via $auto$blifparse.cc:371:parse_blif$165)
   39: \n424 (via $auto$blifparse.cc:371:parse_blif$166)
   40: \n425 (via $auto$blifparse.cc:371:parse_blif$167)
   41: \n426 (via $auto$blifparse.cc:371:parse_blif$168)
   42: \n427 (via $auto$blifparse.cc:371:parse_blif$169)
   43: \n428 (via $auto$blifparse.cc:371:parse_blif$170)
   44: \n429 (via $auto$blifparse.cc:371:parse_blif$171)
   45: \n430 (via $auto$blifparse.cc:371:parse_blif$172)
   46: \n431 (via $auto$blifparse.cc:371:parse_blif$173)
   47: \n432 (via $auto$blifparse.cc:371:parse_blif$174)
   48: \n433 (via $auto$blifparse.cc:371:parse_blif$175)
   49: \n434 (via $auto$blifparse.cc:371:parse_blif$176)
   50: \n435 (via $auto$blifparse.cc:371:parse_blif$177)
   51: \n436 (via $auto$blifparse.cc:371:parse_blif$178)
   52: \n437 (via $auto$blifparse.cc:371:parse_blif$179)
   53: \n438 (via $auto$blifparse.cc:371:parse_blif$180)
   54: \n439 (via $auto$blifparse.cc:371:parse_blif$181)
   55: \n440 (via $auto$blifparse.cc:371:parse_blif$182)
   56: \n441 (via $auto$blifparse.cc:371:parse_blif$183)
   57: \n442 (via $auto$blifparse.cc:371:parse_blif$184)
   58: \n443 (via $auto$blifparse.cc:371:parse_blif$185)
   59: \n444 (via $auto$blifparse.cc:371:parse_blif$186)
   60: \n445 (via $auto$blifparse.cc:371:parse_blif$187)
   61: \n446 (via $auto$blifparse.cc:371:parse_blif$188)
   62: \n447 (via $auto$blifparse.cc:371:parse_blif$189)
   63: \n448 (via $auto$blifparse.cc:371:parse_blif$190)
   64: \n449 (via $auto$blifparse.cc:371:parse_blif$191)
   65: \n450 (via $auto$blifparse.cc:371:parse_blif$192)
   66: \n451 (via $auto$blifparse.cc:371:parse_blif$193)
   67: \n452 (via $auto$blifparse.cc:371:parse_blif$194)
   68: \n453 (via $auto$blifparse.cc:371:parse_blif$195)
   69: \n454 (via $auto$blifparse.cc:371:parse_blif$196)
   70: \n455 (via $auto$blifparse.cc:371:parse_blif$197)
   71: \n456 (via $auto$blifparse.cc:371:parse_blif$198)
   72: \n457 (via $auto$blifparse.cc:371:parse_blif$199)
   73: \n458 (via $auto$blifparse.cc:371:parse_blif$200)
   74: \n459 (via $auto$blifparse.cc:371:parse_blif$201)
   75: \n460 (via $auto$blifparse.cc:371:parse_blif$202)
   76: \n461 (via $auto$blifparse.cc:371:parse_blif$203)
   77: \n462 (via $auto$blifparse.cc:371:parse_blif$204)
   78: \n463 (via $auto$blifparse.cc:371:parse_blif$205)
   79: \n464 (via $auto$blifparse.cc:371:parse_blif$206)
   80: \n465 (via $auto$blifparse.cc:371:parse_blif$207)
   81: \n466 (via $auto$blifparse.cc:371:parse_blif$208)
   82: \n467 (via $auto$blifparse.cc:371:parse_blif$209)
   83: \n468 (via $auto$blifparse.cc:371:parse_blif$210)
   84: \n469 (via $auto$blifparse.cc:371:parse_blif$211)
   85: \n470 (via $auto$blifparse.cc:371:parse_blif$212)
   86: \n471 (via $auto$blifparse.cc:371:parse_blif$213)
   87: \n472 (via $auto$blifparse.cc:371:parse_blif$214)
   88: \n473 (via $auto$blifparse.cc:371:parse_blif$215)
   89: \n474 (via $auto$blifparse.cc:371:parse_blif$216)
   90: \n475 (via $auto$blifparse.cc:371:parse_blif$217)
   91: \n476 (via $auto$blifparse.cc:371:parse_blif$218)
   92: \n477 (via $auto$blifparse.cc:371:parse_blif$219)
   93: \n478 (via $auto$blifparse.cc:371:parse_blif$220)
   94: \n479 (via $auto$blifparse.cc:371:parse_blif$221)
   95: \n480 (via $auto$blifparse.cc:371:parse_blif$222)
   96: \n481 (via $auto$blifparse.cc:371:parse_blif$223)
   97: \n482 (via $auto$blifparse.cc:371:parse_blif$224)
   98: \n483 (via $auto$blifparse.cc:371:parse_blif$225)
   99: \n484 (via $auto$blifparse.cc:371:parse_blif$226)
  100: \n485 (via $auto$blifparse.cc:371:parse_blif$227)
  101: \n486 (via $auto$blifparse.cc:371:parse_blif$228)
  102: \n487 (via $auto$blifparse.cc:371:parse_blif$229)
  103: \n488 (via $auto$blifparse.cc:371:parse_blif$230)
  104: \n489 (via $auto$blifparse.cc:371:parse_blif$231)
  105: \n490 (via $auto$blifparse.cc:371:parse_blif$232)
  106: \n491 (via $auto$blifparse.cc:371:parse_blif$233)
  107: \n492 (via $auto$blifparse.cc:371:parse_blif$234)
  108: \n493 (via $auto$blifparse.cc:371:parse_blif$235)
  109: \n494 (via $auto$blifparse.cc:371:parse_blif$236)
  110: \n495 (via $auto$blifparse.cc:371:parse_blif$237)
  111: \n496 (via $auto$blifparse.cc:371:parse_blif$238)
  112: \n497 (via $auto$blifparse.cc:371:parse_blif$239)
  113: \n498 (via $auto$blifparse.cc:371:parse_blif$240)
  114: \n499 (via $auto$blifparse.cc:371:parse_blif$241)
  115: \n500 (via $auto$blifparse.cc:371:parse_blif$242)
  116: \n501 (via $auto$blifparse.cc:371:parse_blif$243)
  117: \n502 (via $auto$blifparse.cc:371:parse_blif$244)
  118: \n503 (via $auto$blifparse.cc:371:parse_blif$245)
  119: \n504 (via $auto$blifparse.cc:371:parse_blif$246)
  120: \n505 (via $auto$blifparse.cc:371:parse_blif$247)
  121: \n506 (via $auto$blifparse.cc:371:parse_blif$248)
  122: \n507 (via $auto$blifparse.cc:371:parse_blif$249)
  123: \n508 (via $auto$blifparse.cc:371:parse_blif$250)
  124: \n509 (via $auto$blifparse.cc:371:parse_blif$251)
  125: \n510 (via $auto$blifparse.cc:371:parse_blif$252)
  126: \n511 (via $auto$blifparse.cc:371:parse_blif$253)
  127: \n512 (via $auto$blifparse.cc:371:parse_blif$254)
  128: \n513 (via $auto$blifparse.cc:371:parse_blif$255)
  129: \y0 (via $auto$blifparse.cc:371:parse_blif$256)

End of script. Logfile hash: e7fb67d1b1
CPU: user 0.01s system 0.01s, MEM: 16.35 MB total, 10.00 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 32% 2x read_liberty (0 sec), 28% 2x read_blif (0 sec), ...
>>> Temacle mapping succeed with area = 1884.147232055664
full_adder_128 initial mapping area = 2373.250038743019
full_adder_128 Temacle mapping area = 1884.147232055664
full_adder_128 Temacle saveArea = (2373.250038743019 - 1884.147232055664) / 2373.250038743019 = 20.608987620470284 %

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_verilog /home/flynn/workplace/CEMapping/benchmark/adder/full_adder_256.v; hierarchy -top full_adder_256; flatten; synth -top full_adder_256; aigmap; write_aiger /home/flynn/workplace/CEMapping/outputs/Astran/adder/full_adder_256//full_adder_256.aig;' --

1. Executing Verilog-2005 frontend: /home/flynn/workplace/CEMapping/benchmark/adder/full_adder_256.v
Parsing Verilog input from `/home/flynn/workplace/CEMapping/benchmark/adder/full_adder_256.v' to AST representation.
Generating RTLIL representation for module `\full_adder_256'.
Generating RTLIL representation for module `\fullAdder'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \full_adder_256
Used module:     \fullAdder

2.2. Analyzing design hierarchy..
Top module:  \full_adder_256
Used module:     \fullAdder
Removed 0 unused modules.
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[255].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[254].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[253].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[252].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[251].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[250].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[249].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[248].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[247].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[246].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[245].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[244].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[243].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[242].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[241].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[240].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[239].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[238].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[237].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[236].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[235].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[234].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[233].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[232].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[231].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[230].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[229].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[228].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[227].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[226].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[225].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[224].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[223].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[222].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[221].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[220].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[219].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[218].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[217].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[216].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[215].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[214].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[213].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[212].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[211].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[210].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[209].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[208].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[207].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[206].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[205].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[204].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[203].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[202].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[201].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[200].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[199].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[198].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[197].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[196].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[195].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[194].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[193].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[192].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[191].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[190].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[189].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[188].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[187].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[186].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[185].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[184].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[183].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[182].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[181].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[180].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[179].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[178].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[177].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[176].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[175].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[174].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[173].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[172].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[171].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[170].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[169].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[168].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[167].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[166].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[165].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[164].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[163].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[162].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[161].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[160].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[159].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[158].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[157].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[156].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[155].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[154].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[153].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[152].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[151].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[150].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[149].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[148].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[147].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[146].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[145].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[144].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[143].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[142].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[141].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[140].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[139].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[138].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[137].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[136].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[135].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[134].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[133].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[132].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[131].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[130].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[129].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[128].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[127].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[126].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[125].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[124].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[123].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[122].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[121].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[120].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[119].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[118].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[117].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[116].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[115].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[114].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[113].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[112].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[111].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[110].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[109].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[108].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[107].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[106].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[105].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[104].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[103].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[102].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[101].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[100].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[99].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[98].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[97].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[96].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[95].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[94].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[93].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[92].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[91].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[90].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[89].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[88].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[87].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[86].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[85].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[84].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[83].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[82].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[81].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[80].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[79].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[78].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[77].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[76].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[75].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[74].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[73].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[72].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[71].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[70].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[69].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[68].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[67].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[66].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[65].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[64].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[63].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[62].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[61].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[60].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[59].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[58].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[57].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[56].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[55].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[54].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[53].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[52].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[51].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[50].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[49].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[48].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[47].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[46].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[45].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[44].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[43].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[42].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[41].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[40].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[39].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[38].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[37].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[36].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[35].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[34].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[33].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[32].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[31].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[30].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[29].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[28].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[27].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[26].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[25].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[24].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[23].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[22].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[21].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[20].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[19].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[18].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[17].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[16].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[15].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[14].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[13].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[12].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[11].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[10].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[9].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[8].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[7].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[6].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[5].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[4].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[3].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[2].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[1].f (fullAdder).
Mapping positional arguments of cell full_adder_256.generate_N_bit_Adder[0].f (fullAdder).

3. Executing FLATTEN pass (flatten design).
Using template fullAdder for cells of type fullAdder.
<suppressed ~256 debug messages>
No more expansions possible.
Deleting now unused module fullAdder.

4. Executing SYNTH pass.

4.1. Executing HIERARCHY pass (managing design hierarchy).

4.1.1. Analyzing design hierarchy..
Top module:  \full_adder_256

4.1.2. Analyzing design hierarchy..
Top module:  \full_adder_256
Removed 0 unused modules.

4.2. Executing PROC pass (convert processes to netlists).

4.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.2.3. Executing PROC_INIT pass (extract init attributes).

4.2.4. Executing PROC_ARST pass (detect async resets in processes).

4.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

4.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

4.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_256.

4.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..
Removed 0 unused cells and 512 unused wires.
<suppressed ~1 debug messages>

4.5. Executing CHECK pass (checking for obvious problems).
checking module full_adder_256..
found and reported 0 problems.

4.6. Executing OPT pass (performing simple optimizations).

4.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_256.

4.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_256'.
Removed a total of 0 cells.

4.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_256.
Performed a total of 0 changes.

4.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_256'.
Removed a total of 0 cells.

4.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..

4.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_256.

4.6.9. Finished OPT passes. (There is nothing left to do.)

4.7. Executing WREDUCE pass (reducing word size of cells).

4.8. Executing PEEPOPT pass (run peephole optimizers).

4.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..

4.10. Executing TECHMAP pass (map to technology primitives).

4.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

4.10.2. Continuing TECHMAP pass.
No more expansions possible.

4.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module full_adder_256:
  created 0 $alu and 0 $macc cells.

4.12. Executing SHARE pass (SAT-based resource sharing).

4.13. Executing OPT pass (performing simple optimizations).

4.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_256.

4.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_256'.
Removed a total of 0 cells.

4.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_256.
Performed a total of 0 changes.

4.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_256'.
Removed a total of 0 cells.

4.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..

4.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_256.

4.13.9. Finished OPT passes. (There is nothing left to do.)

4.14. Executing FSM pass (extract and optimize FSM).

4.14.1. Executing FSM_DETECT pass (finding FSMs in design).

4.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..

4.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.15. Executing OPT pass (performing simple optimizations).

4.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_256.

4.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_256'.
Removed a total of 0 cells.

4.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..

4.15.5. Finished fast OPT passes.

4.16. Executing MEMORY pass.

4.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

4.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..

4.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..

4.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

4.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..

4.18. Executing OPT pass (performing simple optimizations).

4.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_256.

4.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_256'.
Removed a total of 0 cells.

4.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..

4.18.5. Finished fast OPT passes.

4.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

4.20. Executing OPT pass (performing simple optimizations).

4.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_256.

4.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_256'.
Removed a total of 0 cells.

4.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder_256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder_256.
Performed a total of 0 changes.

4.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_256'.
Removed a total of 0 cells.

4.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..

4.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_256.

4.20.9. Finished OPT passes. (There is nothing left to do.)

4.21. Executing TECHMAP pass (map to technology primitives).

4.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
No more expansions possible.
<suppressed ~1792 debug messages>

4.22. Executing OPT pass (performing simple optimizations).

4.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_256.

4.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_256'.
Removed a total of 0 cells.

4.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..

4.22.5. Finished fast OPT passes.

4.23. Executing ABC pass (technology mapping using ABC).

4.23.1. Extracting gate netlist of module `\full_adder_256' to `<abc-temp-dir>/input.blif'..
Extracted 1792 gates and 2305 wires to a netlist network with 513 inputs and 257 outputs.

4.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:      254
ABC RESULTS:              AOI3 cells:      254
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:      253
ABC RESULTS:               NOT cells:      508
ABC RESULTS:              OAI3 cells:        2
ABC RESULTS:                OR cells:        1
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:      254
ABC RESULTS:               XOR cells:      258
ABC RESULTS:        internal signals:     1535
ABC RESULTS:           input signals:      513
ABC RESULTS:          output signals:      257
Removing temp directory.

4.24. Executing OPT pass (performing simple optimizations).

4.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder_256.

4.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder_256'.
Removed a total of 0 cells.

4.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder_256..
Removed 0 unused cells and 2050 unused wires.
<suppressed ~1 debug messages>

4.24.5. Finished fast OPT passes.

4.25. Executing HIERARCHY pass (managing design hierarchy).

4.25.1. Analyzing design hierarchy..
Top module:  \full_adder_256

4.25.2. Analyzing design hierarchy..
Top module:  \full_adder_256
Removed 0 unused modules.

4.26. Printing statistics.

=== full_adder_256 ===

   Number of wires:               2817
   Number of wire bits:           3838
   Number of public wires:        1286
   Number of public wire bits:    2307
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1788
     $_ANDNOT_                     254
     $_AND_                          2
     $_AOI3_                       254
     $_NAND_                         1
     $_NOR_                        253
     $_NOT_                        508
     $_OAI3_                         2
     $_ORNOT_                        1
     $_OR_                           1
     $_XNOR_                       254
     $_XOR_                        258

4.27. Executing CHECK pass (checking for obvious problems).
checking module full_adder_256..
found and reported 0 problems.

5. Executing AIGMAP pass (map logic to AIG).
Module full_adder_256: replaced 1278 cells with 6142 new cells, skipped 510 cells.
  replaced 9 cell types:
       1 $_NAND_
       1 $_OR_
     253 $_NOR_
     258 $_XOR_
     254 $_XNOR_
     254 $_ANDNOT_
       1 $_ORNOT_
     254 $_AOI3_
       2 $_OAI3_
  not replaced 2 cell types:
     508 $_NOT_
       2 $_AND_

6. Executing AIGER backend.

End of script. Logfile hash: c7c43e4eed
CPU: user 1.89s system 0.01s, MEM: 30.72 MB total, 24.36 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 24% 13x opt_clean (0 sec), 15% 7x opt (0 sec), ...
>>> aig writing succeed!
[i] processing /home/flynn/workplace/CEMapping/outputs/Astran/adder/full_adder_256//full_adder_256.aig
resyn runtime: 0
[i] area: 4746.0307775735855, gates: 1536, depth: 385
mapping runtime: 0

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib outputs/Astran/K3/0.05_5/adder/adder.lib; read_verilog /tmp/GWQ8OH9HXE.v; write_blif -impltf /home/flynn/workplace/CEMapping/outputs/Astran/adder/full_adder_256//full_adder_256_init.blif;' --

1. Executing Liberty frontend.
Imported 12 cell types from liberty file.

2. Executing Verilog-2005 frontend: /tmp/GWQ8OH9HXE.v
Parsing Verilog input from `/tmp/GWQ8OH9HXE.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

3. Executing BLIF backend.

End of script. Logfile hash: 33d6943304
CPU: user 0.10s system 0.02s, MEM: 28.55 MB total, 22.00 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 87% 2x read_verilog (0 sec), 8% 2x write_blif (0 sec), ...

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib stdCellLib/gscl45nm/gscl45nm.lib; read_blif /home/flynn/workplace/CEMapping/outputs/Astran/adder/full_adder_256//full_adder_256_init.blif; stat -liberty outputs/Astran/K3/0.05_5/adder/adder.lib; ltp;' --

1. Executing Liberty frontend.
Imported 32 cell types from liberty file.

2. Executing BLIF frontend.

3. Printing statistics.

=== top ===

   Number of wires:               2049
   Number of wire bits:           2049
   Number of public wires:        2049
   Number of public wire bits:    2049
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1536
     AND2X2                          1
     AOI21X1                       192
     INVX1                         256
     NAND2X1                       127
     NAND3X1                        63
     NOR2X1                         66
     NOR3X1                         64
     OAI21X1                       191
     OR2X2                          64
     XNOR2X1                       508
     XOR2X1                          4

   Chip area for module '\top': 4746.030900

4. Executing LTP pass (find longest path).

Longest topological path in top (length=385):
    0: \x0
    1: \n771 (via $auto$blifparse.cc:371:parse_blif$129)
    2: \n775 (via $auto$blifparse.cc:371:parse_blif$132)
    3: \n776 (via $auto$blifparse.cc:371:parse_blif$134)
    4: \n777 (via $auto$blifparse.cc:371:parse_blif$135)
    5: \n781 (via $auto$blifparse.cc:371:parse_blif$138)
    6: \n782 (via $auto$blifparse.cc:371:parse_blif$141)
    7: \n783 (via $auto$blifparse.cc:371:parse_blif$142)
    8: \n787 (via $auto$blifparse.cc:371:parse_blif$144)
    9: \n788 (via $auto$blifparse.cc:371:parse_blif$146)
   10: \n789 (via $auto$blifparse.cc:371:parse_blif$147)
   11: \n793 (via $auto$blifparse.cc:371:parse_blif$150)
   12: \n794 (via $auto$blifparse.cc:371:parse_blif$153)
   13: \n795 (via $auto$blifparse.cc:371:parse_blif$154)
   14: \n799 (via $auto$blifparse.cc:371:parse_blif$156)
   15: \n800 (via $auto$blifparse.cc:371:parse_blif$158)
   16: \n801 (via $auto$blifparse.cc:371:parse_blif$159)
   17: \n805 (via $auto$blifparse.cc:371:parse_blif$162)
   18: \n806 (via $auto$blifparse.cc:371:parse_blif$165)
   19: \n807 (via $auto$blifparse.cc:371:parse_blif$166)
   20: \n811 (via $auto$blifparse.cc:371:parse_blif$168)
   21: \n812 (via $auto$blifparse.cc:371:parse_blif$170)
   22: \n813 (via $auto$blifparse.cc:371:parse_blif$171)
   23: \n817 (via $auto$blifparse.cc:371:parse_blif$174)
   24: \n818 (via $auto$blifparse.cc:371:parse_blif$177)
   25: \n819 (via $auto$blifparse.cc:371:parse_blif$178)
   26: \n823 (via $auto$blifparse.cc:371:parse_blif$180)
   27: \n824 (via $auto$blifparse.cc:371:parse_blif$182)
   28: \n825 (via $auto$blifparse.cc:371:parse_blif$183)
   29: \n829 (via $auto$blifparse.cc:371:parse_blif$186)
   30: \n830 (via $auto$blifparse.cc:371:parse_blif$189)
   31: \n831 (via $auto$blifparse.cc:371:parse_blif$190)
   32: \n835 (via $auto$blifparse.cc:371:parse_blif$192)
   33: \n836 (via $auto$blifparse.cc:371:parse_blif$194)
   34: \n837 (via $auto$blifparse.cc:371:parse_blif$195)
   35: \n841 (via $auto$blifparse.cc:371:parse_blif$198)
   36: \n842 (via $auto$blifparse.cc:371:parse_blif$201)
   37: \n843 (via $auto$blifparse.cc:371:parse_blif$202)
   38: \n847 (via $auto$blifparse.cc:371:parse_blif$204)
   39: \n848 (via $auto$blifparse.cc:371:parse_blif$206)
   40: \n849 (via $auto$blifparse.cc:371:parse_blif$207)
   41: \n853 (via $auto$blifparse.cc:371:parse_blif$210)
   42: \n854 (via $auto$blifparse.cc:371:parse_blif$213)
   43: \n855 (via $auto$blifparse.cc:371:parse_blif$214)
   44: \n859 (via $auto$blifparse.cc:371:parse_blif$216)
   45: \n860 (via $auto$blifparse.cc:371:parse_blif$218)
   46: \n861 (via $auto$blifparse.cc:371:parse_blif$219)
   47: \n865 (via $auto$blifparse.cc:371:parse_blif$222)
   48: \n866 (via $auto$blifparse.cc:371:parse_blif$225)
   49: \n867 (via $auto$blifparse.cc:371:parse_blif$226)
   50: \n871 (via $auto$blifparse.cc:371:parse_blif$228)
   51: \n872 (via $auto$blifparse.cc:371:parse_blif$230)
   52: \n873 (via $auto$blifparse.cc:371:parse_blif$231)
   53: \n877 (via $auto$blifparse.cc:371:parse_blif$234)
   54: \n878 (via $auto$blifparse.cc:371:parse_blif$237)
   55: \n879 (via $auto$blifparse.cc:371:parse_blif$238)
   56: \n883 (via $auto$blifparse.cc:371:parse_blif$240)
   57: \n884 (via $auto$blifparse.cc:371:parse_blif$242)
   58: \n885 (via $auto$blifparse.cc:371:parse_blif$243)
   59: \n889 (via $auto$blifparse.cc:371:parse_blif$246)
   60: \n890 (via $auto$blifparse.cc:371:parse_blif$249)
   61: \n891 (via $auto$blifparse.cc:371:parse_blif$250)
   62: \n895 (via $auto$blifparse.cc:371:parse_blif$252)
   63: \n896 (via $auto$blifparse.cc:371:parse_blif$254)
   64: \n897 (via $auto$blifparse.cc:371:parse_blif$255)
   65: \n901 (via $auto$blifparse.cc:371:parse_blif$258)
   66: \n902 (via $auto$blifparse.cc:371:parse_blif$261)
   67: \n903 (via $auto$blifparse.cc:371:parse_blif$262)
   68: \n907 (via $auto$blifparse.cc:371:parse_blif$264)
   69: \n908 (via $auto$blifparse.cc:371:parse_blif$266)
   70: \n909 (via $auto$blifparse.cc:371:parse_blif$267)
   71: \n913 (via $auto$blifparse.cc:371:parse_blif$270)
   72: \n914 (via $auto$blifparse.cc:371:parse_blif$273)
   73: \n915 (via $auto$blifparse.cc:371:parse_blif$274)
   74: \n919 (via $auto$blifparse.cc:371:parse_blif$276)
   75: \n920 (via $auto$blifparse.cc:371:parse_blif$278)
   76: \n921 (via $auto$blifparse.cc:371:parse_blif$279)
   77: \n925 (via $auto$blifparse.cc:371:parse_blif$282)
   78: \n926 (via $auto$blifparse.cc:371:parse_blif$285)
   79: \n927 (via $auto$blifparse.cc:371:parse_blif$286)
   80: \n931 (via $auto$blifparse.cc:371:parse_blif$288)
   81: \n932 (via $auto$blifparse.cc:371:parse_blif$290)
   82: \n933 (via $auto$blifparse.cc:371:parse_blif$291)
   83: \n937 (via $auto$blifparse.cc:371:parse_blif$294)
   84: \n938 (via $auto$blifparse.cc:371:parse_blif$297)
   85: \n939 (via $auto$blifparse.cc:371:parse_blif$298)
   86: \n943 (via $auto$blifparse.cc:371:parse_blif$300)
   87: \n944 (via $auto$blifparse.cc:371:parse_blif$302)
   88: \n945 (via $auto$blifparse.cc:371:parse_blif$303)
   89: \n949 (via $auto$blifparse.cc:371:parse_blif$306)
   90: \n950 (via $auto$blifparse.cc:371:parse_blif$309)
   91: \n951 (via $auto$blifparse.cc:371:parse_blif$310)
   92: \n955 (via $auto$blifparse.cc:371:parse_blif$312)
   93: \n956 (via $auto$blifparse.cc:371:parse_blif$314)
   94: \n957 (via $auto$blifparse.cc:371:parse_blif$315)
   95: \n961 (via $auto$blifparse.cc:371:parse_blif$318)
   96: \n962 (via $auto$blifparse.cc:371:parse_blif$321)
   97: \n963 (via $auto$blifparse.cc:371:parse_blif$322)
   98: \n967 (via $auto$blifparse.cc:371:parse_blif$324)
   99: \n968 (via $auto$blifparse.cc:371:parse_blif$326)
  100: \n969 (via $auto$blifparse.cc:371:parse_blif$327)
  101: \n973 (via $auto$blifparse.cc:371:parse_blif$330)
  102: \n974 (via $auto$blifparse.cc:371:parse_blif$333)
  103: \n975 (via $auto$blifparse.cc:371:parse_blif$334)
  104: \n979 (via $auto$blifparse.cc:371:parse_blif$336)
  105: \n980 (via $auto$blifparse.cc:371:parse_blif$338)
  106: \n981 (via $auto$blifparse.cc:371:parse_blif$339)
  107: \n985 (via $auto$blifparse.cc:371:parse_blif$342)
  108: \n986 (via $auto$blifparse.cc:371:parse_blif$345)
  109: \n987 (via $auto$blifparse.cc:371:parse_blif$346)
  110: \n991 (via $auto$blifparse.cc:371:parse_blif$348)
  111: \n992 (via $auto$blifparse.cc:371:parse_blif$350)
  112: \n993 (via $auto$blifparse.cc:371:parse_blif$351)
  113: \n997 (via $auto$blifparse.cc:371:parse_blif$354)
  114: \n998 (via $auto$blifparse.cc:371:parse_blif$357)
  115: \n999 (via $auto$blifparse.cc:371:parse_blif$358)
  116: \n1003 (via $auto$blifparse.cc:371:parse_blif$360)
  117: \n1004 (via $auto$blifparse.cc:371:parse_blif$362)
  118: \n1005 (via $auto$blifparse.cc:371:parse_blif$363)
  119: \n1009 (via $auto$blifparse.cc:371:parse_blif$366)
  120: \n1010 (via $auto$blifparse.cc:371:parse_blif$369)
  121: \n1011 (via $auto$blifparse.cc:371:parse_blif$370)
  122: \n1015 (via $auto$blifparse.cc:371:parse_blif$372)
  123: \n1016 (via $auto$blifparse.cc:371:parse_blif$374)
  124: \n1017 (via $auto$blifparse.cc:371:parse_blif$375)
  125: \n1021 (via $auto$blifparse.cc:371:parse_blif$378)
  126: \n1022 (via $auto$blifparse.cc:371:parse_blif$381)
  127: \n1023 (via $auto$blifparse.cc:371:parse_blif$382)
  128: \n1027 (via $auto$blifparse.cc:371:parse_blif$384)
  129: \n1028 (via $auto$blifparse.cc:371:parse_blif$386)
  130: \n1029 (via $auto$blifparse.cc:371:parse_blif$387)
  131: \n1033 (via $auto$blifparse.cc:371:parse_blif$390)
  132: \n1034 (via $auto$blifparse.cc:371:parse_blif$393)
  133: \n1035 (via $auto$blifparse.cc:371:parse_blif$394)
  134: \n1039 (via $auto$blifparse.cc:371:parse_blif$396)
  135: \n1040 (via $auto$blifparse.cc:371:parse_blif$398)
  136: \n1041 (via $auto$blifparse.cc:371:parse_blif$399)
  137: \n1045 (via $auto$blifparse.cc:371:parse_blif$402)
  138: \n1046 (via $auto$blifparse.cc:371:parse_blif$405)
  139: \n1047 (via $auto$blifparse.cc:371:parse_blif$406)
  140: \n1051 (via $auto$blifparse.cc:371:parse_blif$408)
  141: \n1052 (via $auto$blifparse.cc:371:parse_blif$410)
  142: \n1053 (via $auto$blifparse.cc:371:parse_blif$411)
  143: \n1057 (via $auto$blifparse.cc:371:parse_blif$414)
  144: \n1058 (via $auto$blifparse.cc:371:parse_blif$417)
  145: \n1059 (via $auto$blifparse.cc:371:parse_blif$418)
  146: \n1063 (via $auto$blifparse.cc:371:parse_blif$420)
  147: \n1064 (via $auto$blifparse.cc:371:parse_blif$422)
  148: \n1065 (via $auto$blifparse.cc:371:parse_blif$423)
  149: \n1069 (via $auto$blifparse.cc:371:parse_blif$426)
  150: \n1070 (via $auto$blifparse.cc:371:parse_blif$429)
  151: \n1071 (via $auto$blifparse.cc:371:parse_blif$430)
  152: \n1075 (via $auto$blifparse.cc:371:parse_blif$432)
  153: \n1076 (via $auto$blifparse.cc:371:parse_blif$434)
  154: \n1077 (via $auto$blifparse.cc:371:parse_blif$435)
  155: \n1081 (via $auto$blifparse.cc:371:parse_blif$438)
  156: \n1082 (via $auto$blifparse.cc:371:parse_blif$441)
  157: \n1083 (via $auto$blifparse.cc:371:parse_blif$442)
  158: \n1087 (via $auto$blifparse.cc:371:parse_blif$444)
  159: \n1088 (via $auto$blifparse.cc:371:parse_blif$446)
  160: \n1089 (via $auto$blifparse.cc:371:parse_blif$447)
  161: \n1093 (via $auto$blifparse.cc:371:parse_blif$450)
  162: \n1094 (via $auto$blifparse.cc:371:parse_blif$453)
  163: \n1095 (via $auto$blifparse.cc:371:parse_blif$454)
  164: \n1099 (via $auto$blifparse.cc:371:parse_blif$456)
  165: \n1100 (via $auto$blifparse.cc:371:parse_blif$458)
  166: \n1101 (via $auto$blifparse.cc:371:parse_blif$459)
  167: \n1105 (via $auto$blifparse.cc:371:parse_blif$462)
  168: \n1106 (via $auto$blifparse.cc:371:parse_blif$465)
  169: \n1107 (via $auto$blifparse.cc:371:parse_blif$466)
  170: \n1111 (via $auto$blifparse.cc:371:parse_blif$468)
  171: \n1112 (via $auto$blifparse.cc:371:parse_blif$470)
  172: \n1113 (via $auto$blifparse.cc:371:parse_blif$471)
  173: \n1117 (via $auto$blifparse.cc:371:parse_blif$474)
  174: \n1118 (via $auto$blifparse.cc:371:parse_blif$477)
  175: \n1119 (via $auto$blifparse.cc:371:parse_blif$478)
  176: \n1123 (via $auto$blifparse.cc:371:parse_blif$480)
  177: \n1124 (via $auto$blifparse.cc:371:parse_blif$482)
  178: \n1125 (via $auto$blifparse.cc:371:parse_blif$483)
  179: \n1129 (via $auto$blifparse.cc:371:parse_blif$486)
  180: \n1130 (via $auto$blifparse.cc:371:parse_blif$489)
  181: \n1131 (via $auto$blifparse.cc:371:parse_blif$490)
  182: \n1135 (via $auto$blifparse.cc:371:parse_blif$492)
  183: \n1136 (via $auto$blifparse.cc:371:parse_blif$494)
  184: \n1137 (via $auto$blifparse.cc:371:parse_blif$495)
  185: \n1141 (via $auto$blifparse.cc:371:parse_blif$498)
  186: \n1142 (via $auto$blifparse.cc:371:parse_blif$501)
  187: \n1143 (via $auto$blifparse.cc:371:parse_blif$502)
  188: \n1147 (via $auto$blifparse.cc:371:parse_blif$504)
  189: \n1148 (via $auto$blifparse.cc:371:parse_blif$506)
  190: \n1149 (via $auto$blifparse.cc:371:parse_blif$507)
  191: \n1153 (via $auto$blifparse.cc:371:parse_blif$510)
  192: \n1154 (via $auto$blifparse.cc:371:parse_blif$513)
  193: \n1155 (via $auto$blifparse.cc:371:parse_blif$514)
  194: \n1159 (via $auto$blifparse.cc:371:parse_blif$516)
  195: \n1160 (via $auto$blifparse.cc:371:parse_blif$518)
  196: \n1161 (via $auto$blifparse.cc:371:parse_blif$519)
  197: \n1165 (via $auto$blifparse.cc:371:parse_blif$522)
  198: \n1166 (via $auto$blifparse.cc:371:parse_blif$525)
  199: \n1167 (via $auto$blifparse.cc:371:parse_blif$526)
  200: \n1171 (via $auto$blifparse.cc:371:parse_blif$528)
  201: \n1172 (via $auto$blifparse.cc:371:parse_blif$530)
  202: \n1173 (via $auto$blifparse.cc:371:parse_blif$531)
  203: \n1177 (via $auto$blifparse.cc:371:parse_blif$534)
  204: \n1178 (via $auto$blifparse.cc:371:parse_blif$537)
  205: \n1179 (via $auto$blifparse.cc:371:parse_blif$538)
  206: \n1183 (via $auto$blifparse.cc:371:parse_blif$540)
  207: \n1184 (via $auto$blifparse.cc:371:parse_blif$542)
  208: \n1185 (via $auto$blifparse.cc:371:parse_blif$543)
  209: \n1189 (via $auto$blifparse.cc:371:parse_blif$546)
  210: \n1190 (via $auto$blifparse.cc:371:parse_blif$549)
  211: \n1191 (via $auto$blifparse.cc:371:parse_blif$550)
  212: \n1195 (via $auto$blifparse.cc:371:parse_blif$552)
  213: \n1196 (via $auto$blifparse.cc:371:parse_blif$554)
  214: \n1197 (via $auto$blifparse.cc:371:parse_blif$555)
  215: \n1201 (via $auto$blifparse.cc:371:parse_blif$558)
  216: \n1202 (via $auto$blifparse.cc:371:parse_blif$561)
  217: \n1203 (via $auto$blifparse.cc:371:parse_blif$562)
  218: \n1207 (via $auto$blifparse.cc:371:parse_blif$564)
  219: \n1208 (via $auto$blifparse.cc:371:parse_blif$566)
  220: \n1209 (via $auto$blifparse.cc:371:parse_blif$567)
  221: \n1213 (via $auto$blifparse.cc:371:parse_blif$570)
  222: \n1214 (via $auto$blifparse.cc:371:parse_blif$573)
  223: \n1215 (via $auto$blifparse.cc:371:parse_blif$574)
  224: \n1219 (via $auto$blifparse.cc:371:parse_blif$576)
  225: \n1220 (via $auto$blifparse.cc:371:parse_blif$578)
  226: \n1221 (via $auto$blifparse.cc:371:parse_blif$579)
  227: \n1225 (via $auto$blifparse.cc:371:parse_blif$582)
  228: \n1226 (via $auto$blifparse.cc:371:parse_blif$585)
  229: \n1227 (via $auto$blifparse.cc:371:parse_blif$586)
  230: \n1231 (via $auto$blifparse.cc:371:parse_blif$588)
  231: \n1232 (via $auto$blifparse.cc:371:parse_blif$590)
  232: \n1233 (via $auto$blifparse.cc:371:parse_blif$591)
  233: \n1237 (via $auto$blifparse.cc:371:parse_blif$594)
  234: \n1238 (via $auto$blifparse.cc:371:parse_blif$597)
  235: \n1239 (via $auto$blifparse.cc:371:parse_blif$598)
  236: \n1243 (via $auto$blifparse.cc:371:parse_blif$600)
  237: \n1244 (via $auto$blifparse.cc:371:parse_blif$602)
  238: \n1245 (via $auto$blifparse.cc:371:parse_blif$603)
  239: \n1249 (via $auto$blifparse.cc:371:parse_blif$606)
  240: \n1250 (via $auto$blifparse.cc:371:parse_blif$609)
  241: \n1251 (via $auto$blifparse.cc:371:parse_blif$610)
  242: \n1255 (via $auto$blifparse.cc:371:parse_blif$612)
  243: \n1256 (via $auto$blifparse.cc:371:parse_blif$614)
  244: \n1257 (via $auto$blifparse.cc:371:parse_blif$615)
  245: \n1261 (via $auto$blifparse.cc:371:parse_blif$618)
  246: \n1262 (via $auto$blifparse.cc:371:parse_blif$621)
  247: \n1263 (via $auto$blifparse.cc:371:parse_blif$622)
  248: \n1267 (via $auto$blifparse.cc:371:parse_blif$624)
  249: \n1268 (via $auto$blifparse.cc:371:parse_blif$626)
  250: \n1269 (via $auto$blifparse.cc:371:parse_blif$627)
  251: \n1273 (via $auto$blifparse.cc:371:parse_blif$630)
  252: \n1274 (via $auto$blifparse.cc:371:parse_blif$633)
  253: \n1275 (via $auto$blifparse.cc:371:parse_blif$634)
  254: \n1279 (via $auto$blifparse.cc:371:parse_blif$636)
  255: \n1280 (via $auto$blifparse.cc:371:parse_blif$638)
  256: \n1281 (via $auto$blifparse.cc:371:parse_blif$639)
  257: \n1285 (via $auto$blifparse.cc:371:parse_blif$642)
  258: \n1286 (via $auto$blifparse.cc:371:parse_blif$645)
  259: \n1287 (via $auto$blifparse.cc:371:parse_blif$646)
  260: \n1291 (via $auto$blifparse.cc:371:parse_blif$648)
  261: \n1292 (via $auto$blifparse.cc:371:parse_blif$650)
  262: \n1293 (via $auto$blifparse.cc:371:parse_blif$651)
  263: \n1297 (via $auto$blifparse.cc:371:parse_blif$654)
  264: \n1298 (via $auto$blifparse.cc:371:parse_blif$657)
  265: \n1299 (via $auto$blifparse.cc:371:parse_blif$658)
  266: \n1303 (via $auto$blifparse.cc:371:parse_blif$660)
  267: \n1304 (via $auto$blifparse.cc:371:parse_blif$662)
  268: \n1305 (via $auto$blifparse.cc:371:parse_blif$663)
  269: \n1309 (via $auto$blifparse.cc:371:parse_blif$666)
  270: \n1310 (via $auto$blifparse.cc:371:parse_blif$669)
  271: \n1311 (via $auto$blifparse.cc:371:parse_blif$670)
  272: \n1315 (via $auto$blifparse.cc:371:parse_blif$672)
  273: \n1316 (via $auto$blifparse.cc:371:parse_blif$674)
  274: \n1317 (via $auto$blifparse.cc:371:parse_blif$675)
  275: \n1321 (via $auto$blifparse.cc:371:parse_blif$678)
  276: \n1322 (via $auto$blifparse.cc:371:parse_blif$681)
  277: \n1323 (via $auto$blifparse.cc:371:parse_blif$682)
  278: \n1327 (via $auto$blifparse.cc:371:parse_blif$684)
  279: \n1328 (via $auto$blifparse.cc:371:parse_blif$686)
  280: \n1329 (via $auto$blifparse.cc:371:parse_blif$687)
  281: \n1333 (via $auto$blifparse.cc:371:parse_blif$690)
  282: \n1334 (via $auto$blifparse.cc:371:parse_blif$693)
  283: \n1335 (via $auto$blifparse.cc:371:parse_blif$694)
  284: \n1339 (via $auto$blifparse.cc:371:parse_blif$696)
  285: \n1340 (via $auto$blifparse.cc:371:parse_blif$698)
  286: \n1341 (via $auto$blifparse.cc:371:parse_blif$699)
  287: \n1345 (via $auto$blifparse.cc:371:parse_blif$702)
  288: \n1346 (via $auto$blifparse.cc:371:parse_blif$705)
  289: \n1347 (via $auto$blifparse.cc:371:parse_blif$706)
  290: \n1351 (via $auto$blifparse.cc:371:parse_blif$708)
  291: \n1352 (via $auto$blifparse.cc:371:parse_blif$710)
  292: \n1353 (via $auto$blifparse.cc:371:parse_blif$711)
  293: \n1357 (via $auto$blifparse.cc:371:parse_blif$714)
  294: \n1358 (via $auto$blifparse.cc:371:parse_blif$717)
  295: \n1359 (via $auto$blifparse.cc:371:parse_blif$718)
  296: \n1363 (via $auto$blifparse.cc:371:parse_blif$720)
  297: \n1364 (via $auto$blifparse.cc:371:parse_blif$722)
  298: \n1365 (via $auto$blifparse.cc:371:parse_blif$723)
  299: \n1369 (via $auto$blifparse.cc:371:parse_blif$726)
  300: \n1370 (via $auto$blifparse.cc:371:parse_blif$729)
  301: \n1371 (via $auto$blifparse.cc:371:parse_blif$730)
  302: \n1375 (via $auto$blifparse.cc:371:parse_blif$732)
  303: \n1376 (via $auto$blifparse.cc:371:parse_blif$734)
  304: \n1377 (via $auto$blifparse.cc:371:parse_blif$735)
  305: \n1381 (via $auto$blifparse.cc:371:parse_blif$738)
  306: \n1382 (via $auto$blifparse.cc:371:parse_blif$741)
  307: \n1383 (via $auto$blifparse.cc:371:parse_blif$742)
  308: \n1387 (via $auto$blifparse.cc:371:parse_blif$744)
  309: \n1388 (via $auto$blifparse.cc:371:parse_blif$746)
  310: \n1389 (via $auto$blifparse.cc:371:parse_blif$747)
  311: \n1393 (via $auto$blifparse.cc:371:parse_blif$750)
  312: \n1394 (via $auto$blifparse.cc:371:parse_blif$753)
  313: \n1395 (via $auto$blifparse.cc:371:parse_blif$754)
  314: \n1399 (via $auto$blifparse.cc:371:parse_blif$756)
  315: \n1400 (via $auto$blifparse.cc:371:parse_blif$758)
  316: \n1401 (via $auto$blifparse.cc:371:parse_blif$759)
  317: \n1405 (via $auto$blifparse.cc:371:parse_blif$762)
  318: \n1406 (via $auto$blifparse.cc:371:parse_blif$765)
  319: \n1407 (via $auto$blifparse.cc:371:parse_blif$766)
  320: \n1411 (via $auto$blifparse.cc:371:parse_blif$768)
  321: \n1412 (via $auto$blifparse.cc:371:parse_blif$770)
  322: \n1413 (via $auto$blifparse.cc:371:parse_blif$771)
  323: \n1417 (via $auto$blifparse.cc:371:parse_blif$774)
  324: \n1418 (via $auto$blifparse.cc:371:parse_blif$777)
  325: \n1419 (via $auto$blifparse.cc:371:parse_blif$778)
  326: \n1423 (via $auto$blifparse.cc:371:parse_blif$780)
  327: \n1424 (via $auto$blifparse.cc:371:parse_blif$782)
  328: \n1425 (via $auto$blifparse.cc:371:parse_blif$783)
  329: \n1429 (via $auto$blifparse.cc:371:parse_blif$786)
  330: \n1430 (via $auto$blifparse.cc:371:parse_blif$789)
  331: \n1431 (via $auto$blifparse.cc:371:parse_blif$790)
  332: \n1435 (via $auto$blifparse.cc:371:parse_blif$792)
  333: \n1436 (via $auto$blifparse.cc:371:parse_blif$794)
  334: \n1437 (via $auto$blifparse.cc:371:parse_blif$795)
  335: \n1441 (via $auto$blifparse.cc:371:parse_blif$798)
  336: \n1442 (via $auto$blifparse.cc:371:parse_blif$801)
  337: \n1443 (via $auto$blifparse.cc:371:parse_blif$802)
  338: \n1447 (via $auto$blifparse.cc:371:parse_blif$804)
  339: \n1448 (via $auto$blifparse.cc:371:parse_blif$806)
  340: \n1449 (via $auto$blifparse.cc:371:parse_blif$807)
  341: \n1453 (via $auto$blifparse.cc:371:parse_blif$810)
  342: \n1454 (via $auto$blifparse.cc:371:parse_blif$813)
  343: \n1455 (via $auto$blifparse.cc:371:parse_blif$814)
  344: \n1459 (via $auto$blifparse.cc:371:parse_blif$816)
  345: \n1460 (via $auto$blifparse.cc:371:parse_blif$818)
  346: \n1461 (via $auto$blifparse.cc:371:parse_blif$819)
  347: \n1465 (via $auto$blifparse.cc:371:parse_blif$822)
  348: \n1466 (via $auto$blifparse.cc:371:parse_blif$825)
  349: \n1467 (via $auto$blifparse.cc:371:parse_blif$826)
  350: \n1471 (via $auto$blifparse.cc:371:parse_blif$828)
  351: \n1472 (via $auto$blifparse.cc:371:parse_blif$830)
  352: \n1473 (via $auto$blifparse.cc:371:parse_blif$831)
  353: \n1477 (via $auto$blifparse.cc:371:parse_blif$834)
  354: \n1478 (via $auto$blifparse.cc:371:parse_blif$837)
  355: \n1479 (via $auto$blifparse.cc:371:parse_blif$838)
  356: \n1483 (via $auto$blifparse.cc:371:parse_blif$840)
  357: \n1484 (via $auto$blifparse.cc:371:parse_blif$842)
  358: \n1485 (via $auto$blifparse.cc:371:parse_blif$843)
  359: \n1489 (via $auto$blifparse.cc:371:parse_blif$846)
  360: \n1490 (via $auto$blifparse.cc:371:parse_blif$849)
  361: \n1491 (via $auto$blifparse.cc:371:parse_blif$850)
  362: \n1495 (via $auto$blifparse.cc:371:parse_blif$852)
  363: \n1496 (via $auto$blifparse.cc:371:parse_blif$854)
  364: \n1497 (via $auto$blifparse.cc:371:parse_blif$855)
  365: \n1501 (via $auto$blifparse.cc:371:parse_blif$858)
  366: \n1502 (via $auto$blifparse.cc:371:parse_blif$861)
  367: \n1503 (via $auto$blifparse.cc:371:parse_blif$862)
  368: \n1507 (via $auto$blifparse.cc:371:parse_blif$864)
  369: \n1508 (via $auto$blifparse.cc:371:parse_blif$866)
  370: \n1509 (via $auto$blifparse.cc:371:parse_blif$867)
  371: \n1513 (via $auto$blifparse.cc:371:parse_blif$870)
  372: \n1514 (via $auto$blifparse.cc:371:parse_blif$873)
  373: \n1515 (via $auto$blifparse.cc:371:parse_blif$874)
  374: \n1519 (via $auto$blifparse.cc:371:parse_blif$876)
  375: \n1520 (via $auto$blifparse.cc:371:parse_blif$878)
  376: \n1521 (via $auto$blifparse.cc:371:parse_blif$879)
  377: \n1525 (via $auto$blifparse.cc:371:parse_blif$882)
  378: \n1526 (via $auto$blifparse.cc:371:parse_blif$885)
  379: \n1527 (via $auto$blifparse.cc:371:parse_blif$886)
  380: \n1531 (via $auto$blifparse.cc:371:parse_blif$888)
  381: \n1532 (via $auto$blifparse.cc:371:parse_blif$890)
  382: \n1534 (via $auto$blifparse.cc:371:parse_blif$891)
  383: \n1535 (via $auto$blifparse.cc:371:parse_blif$893)
  384: \n1537 (via $auto$blifparse.cc:371:parse_blif$894)
  385: \y0 (via $auto$blifparse.cc:371:parse_blif$897)

End of script. Logfile hash: 3559ebe252
CPU: user 0.03s system 0.00s, MEM: 17.80 MB total, 11.50 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 35% 2x read_liberty (0 sec), 35% 2x read_blif (0 sec), ...
>>> initial mapping succeed with area = 4746.0307775735855
[i] processing /home/flynn/workplace/CEMapping/outputs/Astran/adder/full_adder_256//full_adder_256.aig
resyn runtime: 0
[i] area: 3768.294464111328, gates: 768, depth: 257
mapping runtime: 0

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib outputs/Astran/K3/0.05_5/adder/ADDER_G3_2_399_400_600.lib; read_verilog /tmp/1Y1A210L7Y.v; write_blif -impltf /home/flynn/workplace/CEMapping/outputs/Astran/adder/full_adder_256//full_adder_256_temacle.blif;' --

1. Executing Liberty frontend.
Imported 16 cell types from liberty file.

2. Executing Verilog-2005 frontend: /tmp/1Y1A210L7Y.v
Parsing Verilog input from `/tmp/1Y1A210L7Y.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

3. Executing BLIF backend.

End of script. Logfile hash: cdfd073a62
CPU: user 0.06s system 0.02s, MEM: 22.64 MB total, 16.00 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 84% 2x read_verilog (0 sec), 8% 2x write_blif (0 sec), ...

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_liberty -lib outputs/Astran/K3/0.05_5/adder/ADDER_G3_2_399_400_600.lib; read_blif /home/flynn/workplace/CEMapping/outputs/Astran/adder/full_adder_256//full_adder_256_temacle.blif; stat -liberty outputs/Astran/K3/0.05_5/adder/ADDER_G3_2_399_400_600.lib; ltp;' --

1. Executing Liberty frontend.
Imported 16 cell types from liberty file.

2. Executing BLIF frontend.

3. Printing statistics.

=== top ===

   Number of wires:               1281
   Number of wire bits:           1281
   Number of public wires:        1281
   Number of public wire bits:    1281
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                768
     ADDER_G2_0_605                256
     ADDER_G3_2_399_400_600        256
     INVX1                         256

   Chip area for module '\top': 3768.294400

4. Executing LTP pass (find longest path).

Longest topological path in top (length=257):
    0: \x512
    1: \n770 (via $auto$blifparse.cc:371:parse_blif$256)
    2: \n771 (via $auto$blifparse.cc:371:parse_blif$257)
    3: \n772 (via $auto$blifparse.cc:371:parse_blif$258)
    4: \n773 (via $auto$blifparse.cc:371:parse_blif$259)
    5: \n774 (via $auto$blifparse.cc:371:parse_blif$260)
    6: \n775 (via $auto$blifparse.cc:371:parse_blif$261)
    7: \n776 (via $auto$blifparse.cc:371:parse_blif$262)
    8: \n777 (via $auto$blifparse.cc:371:parse_blif$263)
    9: \n778 (via $auto$blifparse.cc:371:parse_blif$264)
   10: \n779 (via $auto$blifparse.cc:371:parse_blif$265)
   11: \n780 (via $auto$blifparse.cc:371:parse_blif$266)
   12: \n781 (via $auto$blifparse.cc:371:parse_blif$267)
   13: \n782 (via $auto$blifparse.cc:371:parse_blif$268)
   14: \n783 (via $auto$blifparse.cc:371:parse_blif$269)
   15: \n784 (via $auto$blifparse.cc:371:parse_blif$270)
   16: \n785 (via $auto$blifparse.cc:371:parse_blif$271)
   17: \n786 (via $auto$blifparse.cc:371:parse_blif$272)
   18: \n787 (via $auto$blifparse.cc:371:parse_blif$273)
   19: \n788 (via $auto$blifparse.cc:371:parse_blif$274)
   20: \n789 (via $auto$blifparse.cc:371:parse_blif$275)
   21: \n790 (via $auto$blifparse.cc:371:parse_blif$276)
   22: \n791 (via $auto$blifparse.cc:371:parse_blif$277)
   23: \n792 (via $auto$blifparse.cc:371:parse_blif$278)
   24: \n793 (via $auto$blifparse.cc:371:parse_blif$279)
   25: \n794 (via $auto$blifparse.cc:371:parse_blif$280)
   26: \n795 (via $auto$blifparse.cc:371:parse_blif$281)
   27: \n796 (via $auto$blifparse.cc:371:parse_blif$282)
   28: \n797 (via $auto$blifparse.cc:371:parse_blif$283)
   29: \n798 (via $auto$blifparse.cc:371:parse_blif$284)
   30: \n799 (via $auto$blifparse.cc:371:parse_blif$285)
   31: \n800 (via $auto$blifparse.cc:371:parse_blif$286)
   32: \n801 (via $auto$blifparse.cc:371:parse_blif$287)
   33: \n802 (via $auto$blifparse.cc:371:parse_blif$288)
   34: \n803 (via $auto$blifparse.cc:371:parse_blif$289)
   35: \n804 (via $auto$blifparse.cc:371:parse_blif$290)
   36: \n805 (via $auto$blifparse.cc:371:parse_blif$291)
   37: \n806 (via $auto$blifparse.cc:371:parse_blif$292)
   38: \n807 (via $auto$blifparse.cc:371:parse_blif$293)
   39: \n808 (via $auto$blifparse.cc:371:parse_blif$294)
   40: \n809 (via $auto$blifparse.cc:371:parse_blif$295)
   41: \n810 (via $auto$blifparse.cc:371:parse_blif$296)
   42: \n811 (via $auto$blifparse.cc:371:parse_blif$297)
   43: \n812 (via $auto$blifparse.cc:371:parse_blif$298)
   44: \n813 (via $auto$blifparse.cc:371:parse_blif$299)
   45: \n814 (via $auto$blifparse.cc:371:parse_blif$300)
   46: \n815 (via $auto$blifparse.cc:371:parse_blif$301)
   47: \n816 (via $auto$blifparse.cc:371:parse_blif$302)
   48: \n817 (via $auto$blifparse.cc:371:parse_blif$303)
   49: \n818 (via $auto$blifparse.cc:371:parse_blif$304)
   50: \n819 (via $auto$blifparse.cc:371:parse_blif$305)
   51: \n820 (via $auto$blifparse.cc:371:parse_blif$306)
   52: \n821 (via $auto$blifparse.cc:371:parse_blif$307)
   53: \n822 (via $auto$blifparse.cc:371:parse_blif$308)
   54: \n823 (via $auto$blifparse.cc:371:parse_blif$309)
   55: \n824 (via $auto$blifparse.cc:371:parse_blif$310)
   56: \n825 (via $auto$blifparse.cc:371:parse_blif$311)
   57: \n826 (via $auto$blifparse.cc:371:parse_blif$312)
   58: \n827 (via $auto$blifparse.cc:371:parse_blif$313)
   59: \n828 (via $auto$blifparse.cc:371:parse_blif$314)
   60: \n829 (via $auto$blifparse.cc:371:parse_blif$315)
   61: \n830 (via $auto$blifparse.cc:371:parse_blif$316)
   62: \n831 (via $auto$blifparse.cc:371:parse_blif$317)
   63: \n832 (via $auto$blifparse.cc:371:parse_blif$318)
   64: \n833 (via $auto$blifparse.cc:371:parse_blif$319)
   65: \n834 (via $auto$blifparse.cc:371:parse_blif$320)
   66: \n835 (via $auto$blifparse.cc:371:parse_blif$321)
   67: \n836 (via $auto$blifparse.cc:371:parse_blif$322)
   68: \n837 (via $auto$blifparse.cc:371:parse_blif$323)
   69: \n838 (via $auto$blifparse.cc:371:parse_blif$324)
   70: \n839 (via $auto$blifparse.cc:371:parse_blif$325)
   71: \n840 (via $auto$blifparse.cc:371:parse_blif$326)
   72: \n841 (via $auto$blifparse.cc:371:parse_blif$327)
   73: \n842 (via $auto$blifparse.cc:371:parse_blif$328)
   74: \n843 (via $auto$blifparse.cc:371:parse_blif$329)
   75: \n844 (via $auto$blifparse.cc:371:parse_blif$330)
   76: \n845 (via $auto$blifparse.cc:371:parse_blif$331)
   77: \n846 (via $auto$blifparse.cc:371:parse_blif$332)
   78: \n847 (via $auto$blifparse.cc:371:parse_blif$333)
   79: \n848 (via $auto$blifparse.cc:371:parse_blif$334)
   80: \n849 (via $auto$blifparse.cc:371:parse_blif$335)
   81: \n850 (via $auto$blifparse.cc:371:parse_blif$336)
   82: \n851 (via $auto$blifparse.cc:371:parse_blif$337)
   83: \n852 (via $auto$blifparse.cc:371:parse_blif$338)
   84: \n853 (via $auto$blifparse.cc:371:parse_blif$339)
   85: \n854 (via $auto$blifparse.cc:371:parse_blif$340)
   86: \n855 (via $auto$blifparse.cc:371:parse_blif$341)
   87: \n856 (via $auto$blifparse.cc:371:parse_blif$342)
   88: \n857 (via $auto$blifparse.cc:371:parse_blif$343)
   89: \n858 (via $auto$blifparse.cc:371:parse_blif$344)
   90: \n859 (via $auto$blifparse.cc:371:parse_blif$345)
   91: \n860 (via $auto$blifparse.cc:371:parse_blif$346)
   92: \n861 (via $auto$blifparse.cc:371:parse_blif$347)
   93: \n862 (via $auto$blifparse.cc:371:parse_blif$348)
   94: \n863 (via $auto$blifparse.cc:371:parse_blif$349)
   95: \n864 (via $auto$blifparse.cc:371:parse_blif$350)
   96: \n865 (via $auto$blifparse.cc:371:parse_blif$351)
   97: \n866 (via $auto$blifparse.cc:371:parse_blif$352)
   98: \n867 (via $auto$blifparse.cc:371:parse_blif$353)
   99: \n868 (via $auto$blifparse.cc:371:parse_blif$354)
  100: \n869 (via $auto$blifparse.cc:371:parse_blif$355)
  101: \n870 (via $auto$blifparse.cc:371:parse_blif$356)
  102: \n871 (via $auto$blifparse.cc:371:parse_blif$357)
  103: \n872 (via $auto$blifparse.cc:371:parse_blif$358)
  104: \n873 (via $auto$blifparse.cc:371:parse_blif$359)
  105: \n874 (via $auto$blifparse.cc:371:parse_blif$360)
  106: \n875 (via $auto$blifparse.cc:371:parse_blif$361)
  107: \n876 (via $auto$blifparse.cc:371:parse_blif$362)
  108: \n877 (via $auto$blifparse.cc:371:parse_blif$363)
  109: \n878 (via $auto$blifparse.cc:371:parse_blif$364)
  110: \n879 (via $auto$blifparse.cc:371:parse_blif$365)
  111: \n880 (via $auto$blifparse.cc:371:parse_blif$366)
  112: \n881 (via $auto$blifparse.cc:371:parse_blif$367)
  113: \n882 (via $auto$blifparse.cc:371:parse_blif$368)
  114: \n883 (via $auto$blifparse.cc:371:parse_blif$369)
  115: \n884 (via $auto$blifparse.cc:371:parse_blif$370)
  116: \n885 (via $auto$blifparse.cc:371:parse_blif$371)
  117: \n886 (via $auto$blifparse.cc:371:parse_blif$372)
  118: \n887 (via $auto$blifparse.cc:371:parse_blif$373)
  119: \n888 (via $auto$blifparse.cc:371:parse_blif$374)
  120: \n889 (via $auto$blifparse.cc:371:parse_blif$375)
  121: \n890 (via $auto$blifparse.cc:371:parse_blif$376)
  122: \n891 (via $auto$blifparse.cc:371:parse_blif$377)
  123: \n892 (via $auto$blifparse.cc:371:parse_blif$378)
  124: \n893 (via $auto$blifparse.cc:371:parse_blif$379)
  125: \n894 (via $auto$blifparse.cc:371:parse_blif$380)
  126: \n895 (via $auto$blifparse.cc:371:parse_blif$381)
  127: \n896 (via $auto$blifparse.cc:371:parse_blif$382)
  128: \n897 (via $auto$blifparse.cc:371:parse_blif$383)
  129: \n898 (via $auto$blifparse.cc:371:parse_blif$384)
  130: \n899 (via $auto$blifparse.cc:371:parse_blif$385)
  131: \n900 (via $auto$blifparse.cc:371:parse_blif$386)
  132: \n901 (via $auto$blifparse.cc:371:parse_blif$387)
  133: \n902 (via $auto$blifparse.cc:371:parse_blif$388)
  134: \n903 (via $auto$blifparse.cc:371:parse_blif$389)
  135: \n904 (via $auto$blifparse.cc:371:parse_blif$390)
  136: \n905 (via $auto$blifparse.cc:371:parse_blif$391)
  137: \n906 (via $auto$blifparse.cc:371:parse_blif$392)
  138: \n907 (via $auto$blifparse.cc:371:parse_blif$393)
  139: \n908 (via $auto$blifparse.cc:371:parse_blif$394)
  140: \n909 (via $auto$blifparse.cc:371:parse_blif$395)
  141: \n910 (via $auto$blifparse.cc:371:parse_blif$396)
  142: \n911 (via $auto$blifparse.cc:371:parse_blif$397)
  143: \n912 (via $auto$blifparse.cc:371:parse_blif$398)
  144: \n913 (via $auto$blifparse.cc:371:parse_blif$399)
  145: \n914 (via $auto$blifparse.cc:371:parse_blif$400)
  146: \n915 (via $auto$blifparse.cc:371:parse_blif$401)
  147: \n916 (via $auto$blifparse.cc:371:parse_blif$402)
  148: \n917 (via $auto$blifparse.cc:371:parse_blif$403)
  149: \n918 (via $auto$blifparse.cc:371:parse_blif$404)
  150: \n919 (via $auto$blifparse.cc:371:parse_blif$405)
  151: \n920 (via $auto$blifparse.cc:371:parse_blif$406)
  152: \n921 (via $auto$blifparse.cc:371:parse_blif$407)
  153: \n922 (via $auto$blifparse.cc:371:parse_blif$408)
  154: \n923 (via $auto$blifparse.cc:371:parse_blif$409)
  155: \n924 (via $auto$blifparse.cc:371:parse_blif$410)
  156: \n925 (via $auto$blifparse.cc:371:parse_blif$411)
  157: \n926 (via $auto$blifparse.cc:371:parse_blif$412)
  158: \n927 (via $auto$blifparse.cc:371:parse_blif$413)
  159: \n928 (via $auto$blifparse.cc:371:parse_blif$414)
  160: \n929 (via $auto$blifparse.cc:371:parse_blif$415)
  161: \n930 (via $auto$blifparse.cc:371:parse_blif$416)
  162: \n931 (via $auto$blifparse.cc:371:parse_blif$417)
  163: \n932 (via $auto$blifparse.cc:371:parse_blif$418)
  164: \n933 (via $auto$blifparse.cc:371:parse_blif$419)
  165: \n934 (via $auto$blifparse.cc:371:parse_blif$420)
  166: \n935 (via $auto$blifparse.cc:371:parse_blif$421)
  167: \n936 (via $auto$blifparse.cc:371:parse_blif$422)
  168: \n937 (via $auto$blifparse.cc:371:parse_blif$423)
  169: \n938 (via $auto$blifparse.cc:371:parse_blif$424)
  170: \n939 (via $auto$blifparse.cc:371:parse_blif$425)
  171: \n940 (via $auto$blifparse.cc:371:parse_blif$426)
  172: \n941 (via $auto$blifparse.cc:371:parse_blif$427)
  173: \n942 (via $auto$blifparse.cc:371:parse_blif$428)
  174: \n943 (via $auto$blifparse.cc:371:parse_blif$429)
  175: \n944 (via $auto$blifparse.cc:371:parse_blif$430)
  176: \n945 (via $auto$blifparse.cc:371:parse_blif$431)
  177: \n946 (via $auto$blifparse.cc:371:parse_blif$432)
  178: \n947 (via $auto$blifparse.cc:371:parse_blif$433)
  179: \n948 (via $auto$blifparse.cc:371:parse_blif$434)
  180: \n949 (via $auto$blifparse.cc:371:parse_blif$435)
  181: \n950 (via $auto$blifparse.cc:371:parse_blif$436)
  182: \n951 (via $auto$blifparse.cc:371:parse_blif$437)
  183: \n952 (via $auto$blifparse.cc:371:parse_blif$438)
  184: \n953 (via $auto$blifparse.cc:371:parse_blif$439)
  185: \n954 (via $auto$blifparse.cc:371:parse_blif$440)
  186: \n955 (via $auto$blifparse.cc:371:parse_blif$441)
  187: \n956 (via $auto$blifparse.cc:371:parse_blif$442)
  188: \n957 (via $auto$blifparse.cc:371:parse_blif$443)
  189: \n958 (via $auto$blifparse.cc:371:parse_blif$444)
  190: \n959 (via $auto$blifparse.cc:371:parse_blif$445)
  191: \n960 (via $auto$blifparse.cc:371:parse_blif$446)
  192: \n961 (via $auto$blifparse.cc:371:parse_blif$447)
  193: \n962 (via $auto$blifparse.cc:371:parse_blif$448)
  194: \n963 (via $auto$blifparse.cc:371:parse_blif$449)
  195: \n964 (via $auto$blifparse.cc:371:parse_blif$450)
  196: \n965 (via $auto$blifparse.cc:371:parse_blif$451)
  197: \n966 (via $auto$blifparse.cc:371:parse_blif$452)
  198: \n967 (via $auto$blifparse.cc:371:parse_blif$453)
  199: \n968 (via $auto$blifparse.cc:371:parse_blif$454)
  200: \n969 (via $auto$blifparse.cc:371:parse_blif$455)
  201: \n970 (via $auto$blifparse.cc:371:parse_blif$456)
  202: \n971 (via $auto$blifparse.cc:371:parse_blif$457)
  203: \n972 (via $auto$blifparse.cc:371:parse_blif$458)
  204: \n973 (via $auto$blifparse.cc:371:parse_blif$459)
  205: \n974 (via $auto$blifparse.cc:371:parse_blif$460)
  206: \n975 (via $auto$blifparse.cc:371:parse_blif$461)
  207: \n976 (via $auto$blifparse.cc:371:parse_blif$462)
  208: \n977 (via $auto$blifparse.cc:371:parse_blif$463)
  209: \n978 (via $auto$blifparse.cc:371:parse_blif$464)
  210: \n979 (via $auto$blifparse.cc:371:parse_blif$465)
  211: \n980 (via $auto$blifparse.cc:371:parse_blif$466)
  212: \n981 (via $auto$blifparse.cc:371:parse_blif$467)
  213: \n982 (via $auto$blifparse.cc:371:parse_blif$468)
  214: \n983 (via $auto$blifparse.cc:371:parse_blif$469)
  215: \n984 (via $auto$blifparse.cc:371:parse_blif$470)
  216: \n985 (via $auto$blifparse.cc:371:parse_blif$471)
  217: \n986 (via $auto$blifparse.cc:371:parse_blif$472)
  218: \n987 (via $auto$blifparse.cc:371:parse_blif$473)
  219: \n988 (via $auto$blifparse.cc:371:parse_blif$474)
  220: \n989 (via $auto$blifparse.cc:371:parse_blif$475)
  221: \n990 (via $auto$blifparse.cc:371:parse_blif$476)
  222: \n991 (via $auto$blifparse.cc:371:parse_blif$477)
  223: \n992 (via $auto$blifparse.cc:371:parse_blif$478)
  224: \n993 (via $auto$blifparse.cc:371:parse_blif$479)
  225: \n994 (via $auto$blifparse.cc:371:parse_blif$480)
  226: \n995 (via $auto$blifparse.cc:371:parse_blif$481)
  227: \n996 (via $auto$blifparse.cc:371:parse_blif$482)
  228: \n997 (via $auto$blifparse.cc:371:parse_blif$483)
  229: \n998 (via $auto$blifparse.cc:371:parse_blif$484)
  230: \n999 (via $auto$blifparse.cc:371:parse_blif$485)
  231: \n1000 (via $auto$blifparse.cc:371:parse_blif$486)
  232: \n1001 (via $auto$blifparse.cc:371:parse_blif$487)
  233: \n1002 (via $auto$blifparse.cc:371:parse_blif$488)
  234: \n1003 (via $auto$blifparse.cc:371:parse_blif$489)
  235: \n1004 (via $auto$blifparse.cc:371:parse_blif$490)
  236: \n1005 (via $auto$blifparse.cc:371:parse_blif$491)
  237: \n1006 (via $auto$blifparse.cc:371:parse_blif$492)
  238: \n1007 (via $auto$blifparse.cc:371:parse_blif$493)
  239: \n1008 (via $auto$blifparse.cc:371:parse_blif$494)
  240: \n1009 (via $auto$blifparse.cc:371:parse_blif$495)
  241: \n1010 (via $auto$blifparse.cc:371:parse_blif$496)
  242: \n1011 (via $auto$blifparse.cc:371:parse_blif$497)
  243: \n1012 (via $auto$blifparse.cc:371:parse_blif$498)
  244: \n1013 (via $auto$blifparse.cc:371:parse_blif$499)
  245: \n1014 (via $auto$blifparse.cc:371:parse_blif$500)
  246: \n1015 (via $auto$blifparse.cc:371:parse_blif$501)
  247: \n1016 (via $auto$blifparse.cc:371:parse_blif$502)
  248: \n1017 (via $auto$blifparse.cc:371:parse_blif$503)
  249: \n1018 (via $auto$blifparse.cc:371:parse_blif$504)
  250: \n1019 (via $auto$blifparse.cc:371:parse_blif$505)
  251: \n1020 (via $auto$blifparse.cc:371:parse_blif$506)
  252: \n1021 (via $auto$blifparse.cc:371:parse_blif$507)
  253: \n1022 (via $auto$blifparse.cc:371:parse_blif$508)
  254: \n1023 (via $auto$blifparse.cc:371:parse_blif$509)
  255: \n1024 (via $auto$blifparse.cc:371:parse_blif$510)
  256: \n1025 (via $auto$blifparse.cc:371:parse_blif$511)
  257: \y0 (via $auto$blifparse.cc:371:parse_blif$512)

End of script. Logfile hash: 4832f1b1f6
CPU: user 0.02s system 0.00s, MEM: 16.99 MB total, 10.50 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 38% 2x read_blif (0 sec), 22% 1x ltp (0 sec), ...
>>> Temacle mapping succeed with area = 3768.294464111328
full_adder_256 initial mapping area = 4746.0307775735855
full_adder_256 Temacle mapping area = 3768.294464111328
full_adder_256 Temacle saveArea = (4746.0307775735855 - 3768.294464111328) / 4746.0307775735855 = 20.601137229921765 %
